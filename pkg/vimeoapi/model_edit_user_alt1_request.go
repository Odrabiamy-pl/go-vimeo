/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the EditUserAlt1Request type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EditUserAlt1Request{}

// EditUserAlt1Request struct for EditUserAlt1Request
type EditUserAlt1Request struct {
	// The user's bio.
	Bio *string `json:"bio,omitempty"`
	// A list of values describing the content in the user's videos. Find the full list in the [/contentratings](https://developer.vimeo.com/api/reference/videos#get_content_ratings) endpoint. You must provide a comma-separated list if you're using a query string or an array if you're using JSON.
	ContentFilter []string `json:"content_filter,omitempty"`
	// The authenticated user's gender.  Option descriptions:  * `f` - The user's preferred pronouns are she and her.  * `m` - The user's preferred pronouns are he and him.  * `n` - The user would rather not give preferred pronouns.  * `o` - The user's preferred pronouns are they and them. 
	Gender *string `json:"gender,omitempty"`
	// The user's custom Vimeo URL.
	Link *string `json:"link,omitempty"`
	// The user's location.
	Location *string `json:"location,omitempty"`
	// The user's display name.
	Name *string `json:"name,omitempty"`
	// The default password for all future videos that this user uploads. To use this field, the **videos.privacy.view** field must be `password`.
	Password *string `json:"password,omitempty"`
	Videos *EditUserAlt1RequestVideos `json:"videos,omitempty"`
}

// NewEditUserAlt1Request instantiates a new EditUserAlt1Request object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditUserAlt1Request() *EditUserAlt1Request {
	this := EditUserAlt1Request{}
	return &this
}

// NewEditUserAlt1RequestWithDefaults instantiates a new EditUserAlt1Request object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditUserAlt1RequestWithDefaults() *EditUserAlt1Request {
	this := EditUserAlt1Request{}
	return &this
}

// GetBio returns the Bio field value if set, zero value otherwise.
func (o *EditUserAlt1Request) GetBio() string {
	if o == nil || IsNil(o.Bio) {
		var ret string
		return ret
	}
	return *o.Bio
}

// GetBioOk returns a tuple with the Bio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditUserAlt1Request) GetBioOk() (*string, bool) {
	if o == nil || IsNil(o.Bio) {
		return nil, false
	}
	return o.Bio, true
}

// HasBio returns a boolean if a field has been set.
func (o *EditUserAlt1Request) HasBio() bool {
	if o != nil && !IsNil(o.Bio) {
		return true
	}

	return false
}

// SetBio gets a reference to the given string and assigns it to the Bio field.
func (o *EditUserAlt1Request) SetBio(v string) {
	o.Bio = &v
}

// GetContentFilter returns the ContentFilter field value if set, zero value otherwise.
func (o *EditUserAlt1Request) GetContentFilter() []string {
	if o == nil || IsNil(o.ContentFilter) {
		var ret []string
		return ret
	}
	return o.ContentFilter
}

// GetContentFilterOk returns a tuple with the ContentFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditUserAlt1Request) GetContentFilterOk() ([]string, bool) {
	if o == nil || IsNil(o.ContentFilter) {
		return nil, false
	}
	return o.ContentFilter, true
}

// HasContentFilter returns a boolean if a field has been set.
func (o *EditUserAlt1Request) HasContentFilter() bool {
	if o != nil && !IsNil(o.ContentFilter) {
		return true
	}

	return false
}

// SetContentFilter gets a reference to the given []string and assigns it to the ContentFilter field.
func (o *EditUserAlt1Request) SetContentFilter(v []string) {
	o.ContentFilter = v
}

// GetGender returns the Gender field value if set, zero value otherwise.
func (o *EditUserAlt1Request) GetGender() string {
	if o == nil || IsNil(o.Gender) {
		var ret string
		return ret
	}
	return *o.Gender
}

// GetGenderOk returns a tuple with the Gender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditUserAlt1Request) GetGenderOk() (*string, bool) {
	if o == nil || IsNil(o.Gender) {
		return nil, false
	}
	return o.Gender, true
}

// HasGender returns a boolean if a field has been set.
func (o *EditUserAlt1Request) HasGender() bool {
	if o != nil && !IsNil(o.Gender) {
		return true
	}

	return false
}

// SetGender gets a reference to the given string and assigns it to the Gender field.
func (o *EditUserAlt1Request) SetGender(v string) {
	o.Gender = &v
}

// GetLink returns the Link field value if set, zero value otherwise.
func (o *EditUserAlt1Request) GetLink() string {
	if o == nil || IsNil(o.Link) {
		var ret string
		return ret
	}
	return *o.Link
}

// GetLinkOk returns a tuple with the Link field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditUserAlt1Request) GetLinkOk() (*string, bool) {
	if o == nil || IsNil(o.Link) {
		return nil, false
	}
	return o.Link, true
}

// HasLink returns a boolean if a field has been set.
func (o *EditUserAlt1Request) HasLink() bool {
	if o != nil && !IsNil(o.Link) {
		return true
	}

	return false
}

// SetLink gets a reference to the given string and assigns it to the Link field.
func (o *EditUserAlt1Request) SetLink(v string) {
	o.Link = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *EditUserAlt1Request) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditUserAlt1Request) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *EditUserAlt1Request) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *EditUserAlt1Request) SetLocation(v string) {
	o.Location = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EditUserAlt1Request) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditUserAlt1Request) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EditUserAlt1Request) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EditUserAlt1Request) SetName(v string) {
	o.Name = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *EditUserAlt1Request) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditUserAlt1Request) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *EditUserAlt1Request) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *EditUserAlt1Request) SetPassword(v string) {
	o.Password = &v
}

// GetVideos returns the Videos field value if set, zero value otherwise.
func (o *EditUserAlt1Request) GetVideos() EditUserAlt1RequestVideos {
	if o == nil || IsNil(o.Videos) {
		var ret EditUserAlt1RequestVideos
		return ret
	}
	return *o.Videos
}

// GetVideosOk returns a tuple with the Videos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditUserAlt1Request) GetVideosOk() (*EditUserAlt1RequestVideos, bool) {
	if o == nil || IsNil(o.Videos) {
		return nil, false
	}
	return o.Videos, true
}

// HasVideos returns a boolean if a field has been set.
func (o *EditUserAlt1Request) HasVideos() bool {
	if o != nil && !IsNil(o.Videos) {
		return true
	}

	return false
}

// SetVideos gets a reference to the given EditUserAlt1RequestVideos and assigns it to the Videos field.
func (o *EditUserAlt1Request) SetVideos(v EditUserAlt1RequestVideos) {
	o.Videos = &v
}

func (o EditUserAlt1Request) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EditUserAlt1Request) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Bio) {
		toSerialize["bio"] = o.Bio
	}
	if !IsNil(o.ContentFilter) {
		toSerialize["content_filter"] = o.ContentFilter
	}
	if !IsNil(o.Gender) {
		toSerialize["gender"] = o.Gender
	}
	if !IsNil(o.Link) {
		toSerialize["link"] = o.Link
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.Videos) {
		toSerialize["videos"] = o.Videos
	}
	return toSerialize, nil
}

type NullableEditUserAlt1Request struct {
	value *EditUserAlt1Request
	isSet bool
}

func (v NullableEditUserAlt1Request) Get() *EditUserAlt1Request {
	return v.value
}

func (v *NullableEditUserAlt1Request) Set(val *EditUserAlt1Request) {
	v.value = val
	v.isSet = true
}

func (v NullableEditUserAlt1Request) IsSet() bool {
	return v.isSet
}

func (v *NullableEditUserAlt1Request) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditUserAlt1Request(val *EditUserAlt1Request) *NullableEditUserAlt1Request {
	return &NullableEditUserAlt1Request{value: val, isSet: true}
}

func (v NullableEditUserAlt1Request) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditUserAlt1Request) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


