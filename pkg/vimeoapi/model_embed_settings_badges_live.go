/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EmbedSettingsBadgesLive type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmbedSettingsBadgesLive{}

// EmbedSettingsBadgesLive struct for EmbedSettingsBadgesLive
type EmbedSettingsBadgesLive struct {
	// Whether the video was streamed live.
	Archived bool `json:"archived"`
	// Whether the video is currently streaming live.
	Streaming bool `json:"streaming"`
}

type _EmbedSettingsBadgesLive EmbedSettingsBadgesLive

// NewEmbedSettingsBadgesLive instantiates a new EmbedSettingsBadgesLive object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmbedSettingsBadgesLive(archived bool, streaming bool) *EmbedSettingsBadgesLive {
	this := EmbedSettingsBadgesLive{}
	this.Archived = archived
	this.Streaming = streaming
	return &this
}

// NewEmbedSettingsBadgesLiveWithDefaults instantiates a new EmbedSettingsBadgesLive object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmbedSettingsBadgesLiveWithDefaults() *EmbedSettingsBadgesLive {
	this := EmbedSettingsBadgesLive{}
	return &this
}

// GetArchived returns the Archived field value
func (o *EmbedSettingsBadgesLive) GetArchived() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value
// and a boolean to check if the value has been set.
func (o *EmbedSettingsBadgesLive) GetArchivedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Archived, true
}

// SetArchived sets field value
func (o *EmbedSettingsBadgesLive) SetArchived(v bool) {
	o.Archived = v
}

// GetStreaming returns the Streaming field value
func (o *EmbedSettingsBadgesLive) GetStreaming() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Streaming
}

// GetStreamingOk returns a tuple with the Streaming field value
// and a boolean to check if the value has been set.
func (o *EmbedSettingsBadgesLive) GetStreamingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Streaming, true
}

// SetStreaming sets field value
func (o *EmbedSettingsBadgesLive) SetStreaming(v bool) {
	o.Streaming = v
}

func (o EmbedSettingsBadgesLive) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmbedSettingsBadgesLive) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["archived"] = o.Archived
	toSerialize["streaming"] = o.Streaming
	return toSerialize, nil
}

func (o *EmbedSettingsBadgesLive) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"archived",
		"streaming",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmbedSettingsBadgesLive := _EmbedSettingsBadgesLive{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEmbedSettingsBadgesLive)

	if err != nil {
		return err
	}

	*o = EmbedSettingsBadgesLive(varEmbedSettingsBadgesLive)

	return err
}

type NullableEmbedSettingsBadgesLive struct {
	value *EmbedSettingsBadgesLive
	isSet bool
}

func (v NullableEmbedSettingsBadgesLive) Get() *EmbedSettingsBadgesLive {
	return v.value
}

func (v *NullableEmbedSettingsBadgesLive) Set(val *EmbedSettingsBadgesLive) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbedSettingsBadgesLive) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbedSettingsBadgesLive) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbedSettingsBadgesLive(val *EmbedSettingsBadgesLive) *NullableEmbedSettingsBadgesLive {
	return &NullableEmbedSettingsBadgesLive{value: val, isSet: true}
}

func (v NullableEmbedSettingsBadgesLive) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbedSettingsBadgesLive) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


