/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type VideosTranscriptsAPI interface {

	/*
		GetTranscript Get transcript segments

		This method returns the transcript segments of the specified text track.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param texttrackId The ID of the text track.
		@param videoId The ID of the video.
		@return ApiGetTranscriptRequest
	*/
	GetTranscript(ctx context.Context, texttrackId float32, videoId int32) ApiGetTranscriptRequest

	// GetTranscriptExecute executes the request
	//  @return []Segment
	GetTranscriptExecute(r ApiGetTranscriptRequest) ([]Segment, *http.Response, error)
}

// VideosTranscriptsAPIService VideosTranscriptsAPI service
type VideosTranscriptsAPIService service

type ApiGetTranscriptRequest struct {
	ctx         context.Context
	ApiService  VideosTranscriptsAPI
	texttrackId float32
	videoId     int32
}

func (r ApiGetTranscriptRequest) Execute() ([]Segment, *http.Response, error) {
	return r.ApiService.GetTranscriptExecute(r)
}

/*
GetTranscript Get transcript segments

This method returns the transcript segments of the specified text track.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param texttrackId The ID of the text track.
	@param videoId The ID of the video.
	@return ApiGetTranscriptRequest
*/
func (a *VideosTranscriptsAPIService) GetTranscript(ctx context.Context, texttrackId float32, videoId int32) ApiGetTranscriptRequest {
	return ApiGetTranscriptRequest{
		ApiService:  a,
		ctx:         ctx,
		texttrackId: texttrackId,
		videoId:     videoId,
	}
}

// Execute executes the request
//
//	@return []Segment
func (a *VideosTranscriptsAPIService) GetTranscriptExecute(r ApiGetTranscriptRequest) ([]Segment, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Segment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosTranscriptsAPIService.GetTranscript")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos/{video_id}/transcripts/{texttrack_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"texttrack_id"+"}", url.PathEscape(parameterValueToString(r.texttrackId, "texttrackId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.video.segment"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
