/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SubscriptionPlansCurrency type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionPlansCurrency{}

// SubscriptionPlansCurrency Information about the currency in which the price of the plan is expressed.
type SubscriptionPlansCurrency struct {
	// The ISO code of the associated currency.
	CurrencyCode string `json:"currency_code"`
	// The symbol of the associated currency.
	Symbol string `json:"symbol"`
}

type _SubscriptionPlansCurrency SubscriptionPlansCurrency

// NewSubscriptionPlansCurrency instantiates a new SubscriptionPlansCurrency object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionPlansCurrency(currencyCode string, symbol string) *SubscriptionPlansCurrency {
	this := SubscriptionPlansCurrency{}
	this.CurrencyCode = currencyCode
	this.Symbol = symbol
	return &this
}

// NewSubscriptionPlansCurrencyWithDefaults instantiates a new SubscriptionPlansCurrency object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionPlansCurrencyWithDefaults() *SubscriptionPlansCurrency {
	this := SubscriptionPlansCurrency{}
	return &this
}

// GetCurrencyCode returns the CurrencyCode field value
func (o *SubscriptionPlansCurrency) GetCurrencyCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value
// and a boolean to check if the value has been set.
func (o *SubscriptionPlansCurrency) GetCurrencyCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrencyCode, true
}

// SetCurrencyCode sets field value
func (o *SubscriptionPlansCurrency) SetCurrencyCode(v string) {
	o.CurrencyCode = v
}

// GetSymbol returns the Symbol field value
func (o *SubscriptionPlansCurrency) GetSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *SubscriptionPlansCurrency) GetSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *SubscriptionPlansCurrency) SetSymbol(v string) {
	o.Symbol = v
}

func (o SubscriptionPlansCurrency) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionPlansCurrency) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["currency_code"] = o.CurrencyCode
	toSerialize["symbol"] = o.Symbol
	return toSerialize, nil
}

func (o *SubscriptionPlansCurrency) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"currency_code",
		"symbol",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubscriptionPlansCurrency := _SubscriptionPlansCurrency{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubscriptionPlansCurrency)

	if err != nil {
		return err
	}

	*o = SubscriptionPlansCurrency(varSubscriptionPlansCurrency)

	return err
}

type NullableSubscriptionPlansCurrency struct {
	value *SubscriptionPlansCurrency
	isSet bool
}

func (v NullableSubscriptionPlansCurrency) Get() *SubscriptionPlansCurrency {
	return v.value
}

func (v *NullableSubscriptionPlansCurrency) Set(val *SubscriptionPlansCurrency) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionPlansCurrency) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionPlansCurrency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionPlansCurrency(val *SubscriptionPlansCurrency) *NullableSubscriptionPlansCurrency {
	return &NullableSubscriptionPlansCurrency{value: val, isSet: true}
}

func (v NullableSubscriptionPlansCurrency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionPlansCurrency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


