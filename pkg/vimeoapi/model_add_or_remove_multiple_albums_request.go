/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the AddOrRemoveMultipleAlbumsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddOrRemoveMultipleAlbumsRequest{}

// AddOrRemoveMultipleAlbumsRequest struct for AddOrRemoveMultipleAlbumsRequest
type AddOrRemoveMultipleAlbumsRequest struct {
	// The array of showcases to add the video to. Specify these with a batch request; see our [Using Common Formats and Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests) guide for more information.
	Add []AddOrRemoveMultipleAlbumsRequestAddInner `json:"add,omitempty"`
	// The array of showcases to remove the video from. Specify these with a batch request; see our [Using Common Formats and Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests) guide for more information.
	Remove []AddOrRemoveMultipleAlbumsRequestRemoveInner `json:"remove,omitempty"`
}

// NewAddOrRemoveMultipleAlbumsRequest instantiates a new AddOrRemoveMultipleAlbumsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddOrRemoveMultipleAlbumsRequest() *AddOrRemoveMultipleAlbumsRequest {
	this := AddOrRemoveMultipleAlbumsRequest{}
	return &this
}

// NewAddOrRemoveMultipleAlbumsRequestWithDefaults instantiates a new AddOrRemoveMultipleAlbumsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddOrRemoveMultipleAlbumsRequestWithDefaults() *AddOrRemoveMultipleAlbumsRequest {
	this := AddOrRemoveMultipleAlbumsRequest{}
	return &this
}

// GetAdd returns the Add field value if set, zero value otherwise.
func (o *AddOrRemoveMultipleAlbumsRequest) GetAdd() []AddOrRemoveMultipleAlbumsRequestAddInner {
	if o == nil || IsNil(o.Add) {
		var ret []AddOrRemoveMultipleAlbumsRequestAddInner
		return ret
	}
	return o.Add
}

// GetAddOk returns a tuple with the Add field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddOrRemoveMultipleAlbumsRequest) GetAddOk() ([]AddOrRemoveMultipleAlbumsRequestAddInner, bool) {
	if o == nil || IsNil(o.Add) {
		return nil, false
	}
	return o.Add, true
}

// HasAdd returns a boolean if a field has been set.
func (o *AddOrRemoveMultipleAlbumsRequest) HasAdd() bool {
	if o != nil && !IsNil(o.Add) {
		return true
	}

	return false
}

// SetAdd gets a reference to the given []AddOrRemoveMultipleAlbumsRequestAddInner and assigns it to the Add field.
func (o *AddOrRemoveMultipleAlbumsRequest) SetAdd(v []AddOrRemoveMultipleAlbumsRequestAddInner) {
	o.Add = v
}

// GetRemove returns the Remove field value if set, zero value otherwise.
func (o *AddOrRemoveMultipleAlbumsRequest) GetRemove() []AddOrRemoveMultipleAlbumsRequestRemoveInner {
	if o == nil || IsNil(o.Remove) {
		var ret []AddOrRemoveMultipleAlbumsRequestRemoveInner
		return ret
	}
	return o.Remove
}

// GetRemoveOk returns a tuple with the Remove field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddOrRemoveMultipleAlbumsRequest) GetRemoveOk() ([]AddOrRemoveMultipleAlbumsRequestRemoveInner, bool) {
	if o == nil || IsNil(o.Remove) {
		return nil, false
	}
	return o.Remove, true
}

// HasRemove returns a boolean if a field has been set.
func (o *AddOrRemoveMultipleAlbumsRequest) HasRemove() bool {
	if o != nil && !IsNil(o.Remove) {
		return true
	}

	return false
}

// SetRemove gets a reference to the given []AddOrRemoveMultipleAlbumsRequestRemoveInner and assigns it to the Remove field.
func (o *AddOrRemoveMultipleAlbumsRequest) SetRemove(v []AddOrRemoveMultipleAlbumsRequestRemoveInner) {
	o.Remove = v
}

func (o AddOrRemoveMultipleAlbumsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddOrRemoveMultipleAlbumsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Add) {
		toSerialize["add"] = o.Add
	}
	if !IsNil(o.Remove) {
		toSerialize["remove"] = o.Remove
	}
	return toSerialize, nil
}

type NullableAddOrRemoveMultipleAlbumsRequest struct {
	value *AddOrRemoveMultipleAlbumsRequest
	isSet bool
}

func (v NullableAddOrRemoveMultipleAlbumsRequest) Get() *AddOrRemoveMultipleAlbumsRequest {
	return v.value
}

func (v *NullableAddOrRemoveMultipleAlbumsRequest) Set(val *AddOrRemoveMultipleAlbumsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddOrRemoveMultipleAlbumsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddOrRemoveMultipleAlbumsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddOrRemoveMultipleAlbumsRequest(val *AddOrRemoveMultipleAlbumsRequest) *NullableAddOrRemoveMultipleAlbumsRequest {
	return &NullableAddOrRemoveMultipleAlbumsRequest{value: val, isSet: true}
}

func (v NullableAddOrRemoveMultipleAlbumsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddOrRemoveMultipleAlbumsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


