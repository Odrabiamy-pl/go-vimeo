/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the UserUploadQuotaLifetime type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserUploadQuotaLifetime{}

// UserUploadQuotaLifetime Information about the authenticated user's lifetime upload usage.
type UserUploadQuotaLifetime struct {
	// The number of bytes or videos remaining in the authenticated user's lifetime maximum.
	Free NullableFloat32 `json:"free"`
	// The total number of bytes or videos that the authenticated user can upload across the lifetime of their account.
	Max NullableFloat32 `json:"max"`
	// The unit that's used to compute quota.  Option descriptions:  * `video_count` - The quota is calculated using the count of the videos.  * `video_size` - The quota is calculated using the byte size of the videos. 
	Unit NullableString `json:"unit"`
	// The number of bytes or videos that the authenticated user has already uploaded against their lifetime limit.
	Used NullableFloat32 `json:"used"`
}

// NewUserUploadQuotaLifetime instantiates a new UserUploadQuotaLifetime object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserUploadQuotaLifetime(free NullableFloat32, max NullableFloat32, unit NullableString, used NullableFloat32) *UserUploadQuotaLifetime {
	this := UserUploadQuotaLifetime{}
	this.Free = free
	this.Max = max
	this.Unit = unit
	this.Used = used
	return &this
}

// NewUserUploadQuotaLifetimeWithDefaults instantiates a new UserUploadQuotaLifetime object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserUploadQuotaLifetimeWithDefaults() *UserUploadQuotaLifetime {
	this := UserUploadQuotaLifetime{}
	return &this
}

// GetFree returns the Free field value
// If the value is explicit nil, the zero value for float32 will be returned
func (o *UserUploadQuotaLifetime) GetFree() float32 {
	if o == nil || o.Free.Get() == nil {
		var ret float32
		return ret
	}

	return *o.Free.Get()
}

// GetFreeOk returns a tuple with the Free field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserUploadQuotaLifetime) GetFreeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Free.Get(), o.Free.IsSet()
}

// SetFree sets field value
func (o *UserUploadQuotaLifetime) SetFree(v float32) {
	o.Free.Set(&v)
}

// GetMax returns the Max field value
// If the value is explicit nil, the zero value for float32 will be returned
func (o *UserUploadQuotaLifetime) GetMax() float32 {
	if o == nil || o.Max.Get() == nil {
		var ret float32
		return ret
	}

	return *o.Max.Get()
}

// GetMaxOk returns a tuple with the Max field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserUploadQuotaLifetime) GetMaxOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Max.Get(), o.Max.IsSet()
}

// SetMax sets field value
func (o *UserUploadQuotaLifetime) SetMax(v float32) {
	o.Max.Set(&v)
}

// GetUnit returns the Unit field value
// If the value is explicit nil, the zero value for string will be returned
func (o *UserUploadQuotaLifetime) GetUnit() string {
	if o == nil || o.Unit.Get() == nil {
		var ret string
		return ret
	}

	return *o.Unit.Get()
}

// GetUnitOk returns a tuple with the Unit field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserUploadQuotaLifetime) GetUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Unit.Get(), o.Unit.IsSet()
}

// SetUnit sets field value
func (o *UserUploadQuotaLifetime) SetUnit(v string) {
	o.Unit.Set(&v)
}

// GetUsed returns the Used field value
// If the value is explicit nil, the zero value for float32 will be returned
func (o *UserUploadQuotaLifetime) GetUsed() float32 {
	if o == nil || o.Used.Get() == nil {
		var ret float32
		return ret
	}

	return *o.Used.Get()
}

// GetUsedOk returns a tuple with the Used field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserUploadQuotaLifetime) GetUsedOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Used.Get(), o.Used.IsSet()
}

// SetUsed sets field value
func (o *UserUploadQuotaLifetime) SetUsed(v float32) {
	o.Used.Set(&v)
}

func (o UserUploadQuotaLifetime) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserUploadQuotaLifetime) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["free"] = o.Free.Get()
	toSerialize["max"] = o.Max.Get()
	toSerialize["unit"] = o.Unit.Get()
	toSerialize["used"] = o.Used.Get()
	return toSerialize, nil
}

type NullableUserUploadQuotaLifetime struct {
	value *UserUploadQuotaLifetime
	isSet bool
}

func (v NullableUserUploadQuotaLifetime) Get() *UserUploadQuotaLifetime {
	return v.value
}

func (v *NullableUserUploadQuotaLifetime) Set(val *UserUploadQuotaLifetime) {
	v.value = val
	v.isSet = true
}

func (v NullableUserUploadQuotaLifetime) IsSet() bool {
	return v.isSet
}

func (v *NullableUserUploadQuotaLifetime) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserUploadQuotaLifetime(val *UserUploadQuotaLifetime) *NullableUserUploadQuotaLifetime {
	return &NullableUserUploadQuotaLifetime{value: val, isSet: true}
}

func (v NullableUserUploadQuotaLifetime) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserUploadQuotaLifetime) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


