/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type WebinarRegistrationsAPI interface {

	/*
	CaptureWebinarRegistrationList Capture the user registration list associated with a webinar

	This method captures the user registration list associated with the specified webinar. A maximum of 50 registrants are permitted as part of the request.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId The ID of the user.
	@param webinarId The ID of the webinar.
	@return ApiCaptureWebinarRegistrationListRequest
	*/
	CaptureWebinarRegistrationList(ctx context.Context, userId int32, webinarId string) ApiCaptureWebinarRegistrationListRequest

	// CaptureWebinarRegistrationListExecute executes the request
	CaptureWebinarRegistrationListExecute(r ApiCaptureWebinarRegistrationListRequest) (*http.Response, error)

	/*
	CaptureWebinarRegistrationListAlt1 Capture the user registration list associated with a webinar

	This method captures the user registration list associated with the specified webinar. A maximum of 50 registrants are permitted as part of the request.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param webinarId The ID of the webinar.
	@return ApiCaptureWebinarRegistrationListAlt1Request
	*/
	CaptureWebinarRegistrationListAlt1(ctx context.Context, webinarId string) ApiCaptureWebinarRegistrationListAlt1Request

	// CaptureWebinarRegistrationListAlt1Execute executes the request
	CaptureWebinarRegistrationListAlt1Execute(r ApiCaptureWebinarRegistrationListAlt1Request) (*http.Response, error)

	/*
	DeleteWebinarRegistrant Delete a registrant record associated with a webinar

	This method deletes the specified registrant associated with a webinar and originally submitted through a webinar form.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param registrantId The ID of the webinar registrant.
	@param userId The ID of the user.
	@param webinarId The ID of the webinar.
	@return ApiDeleteWebinarRegistrantRequest
	*/
	DeleteWebinarRegistrant(ctx context.Context, registrantId string, userId int32, webinarId string) ApiDeleteWebinarRegistrantRequest

	// DeleteWebinarRegistrantExecute executes the request
	DeleteWebinarRegistrantExecute(r ApiDeleteWebinarRegistrantRequest) (*http.Response, error)

	/*
	DeleteWebinarRegistrantAlt1 Delete a registrant record associated with a webinar

	This method deletes the specified registrant associated with a webinar and originally submitted through a webinar form.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param registrantId The ID of the webinar registrant.
	@param webinarId The ID of the webinar.
	@return ApiDeleteWebinarRegistrantAlt1Request
	*/
	DeleteWebinarRegistrantAlt1(ctx context.Context, registrantId string, webinarId string) ApiDeleteWebinarRegistrantAlt1Request

	// DeleteWebinarRegistrantAlt1Execute executes the request
	DeleteWebinarRegistrantAlt1Execute(r ApiDeleteWebinarRegistrantAlt1Request) (*http.Response, error)

	/*
	GetAllWebinarRegistrations Get user registration data associated with a webinar

	This method returns the list of user registrations that is associated with the specified webinar and was originally submitted through a webinar form.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId The ID of the user.
	@param webinarId The ID of the webinar.
	@return ApiGetAllWebinarRegistrationsRequest
	*/
	GetAllWebinarRegistrations(ctx context.Context, userId int32, webinarId string) ApiGetAllWebinarRegistrationsRequest

	// GetAllWebinarRegistrationsExecute executes the request
	//  @return WebinarRegistrant
	GetAllWebinarRegistrationsExecute(r ApiGetAllWebinarRegistrationsRequest) (*WebinarRegistrant, *http.Response, error)

	/*
	GetAllWebinarRegistrationsAlt1 Get user registration data associated with a webinar

	This method returns the list of user registrations that is associated with the specified webinar and was originally submitted through a webinar form.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param webinarId The ID of the webinar.
	@return ApiGetAllWebinarRegistrationsAlt1Request
	*/
	GetAllWebinarRegistrationsAlt1(ctx context.Context, webinarId string) ApiGetAllWebinarRegistrationsAlt1Request

	// GetAllWebinarRegistrationsAlt1Execute executes the request
	//  @return WebinarRegistrant
	GetAllWebinarRegistrationsAlt1Execute(r ApiGetAllWebinarRegistrationsAlt1Request) (*WebinarRegistrant, *http.Response, error)

	/*
	UpdateWebinarRegistrations Update user registration data associated with a webinar

	This method updates the specified user registration data associated with a webinar and originally submitted through a webinar form.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param registrantId The ID of the webinar registrant.
	@param userId The ID of the user.
	@param webinarId The ID of the webinar.
	@return ApiUpdateWebinarRegistrationsRequest
	*/
	UpdateWebinarRegistrations(ctx context.Context, registrantId string, userId int32, webinarId string) ApiUpdateWebinarRegistrationsRequest

	// UpdateWebinarRegistrationsExecute executes the request
	//  @return WebinarRegistrant
	UpdateWebinarRegistrationsExecute(r ApiUpdateWebinarRegistrationsRequest) (*WebinarRegistrant, *http.Response, error)

	/*
	UpdateWebinarRegistrationsAlt1 Update user registration data associated with a webinar

	This method updates the specified user registration data associated with a webinar and originally submitted through a webinar form.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param registrantId The ID of the webinar registrant.
	@param webinarId The ID of the webinar.
	@return ApiUpdateWebinarRegistrationsAlt1Request
	*/
	UpdateWebinarRegistrationsAlt1(ctx context.Context, registrantId string, webinarId string) ApiUpdateWebinarRegistrationsAlt1Request

	// UpdateWebinarRegistrationsAlt1Execute executes the request
	//  @return WebinarRegistrant
	UpdateWebinarRegistrationsAlt1Execute(r ApiUpdateWebinarRegistrationsAlt1Request) (*WebinarRegistrant, *http.Response, error)
}

// WebinarRegistrationsAPIService WebinarRegistrationsAPI service
type WebinarRegistrationsAPIService service

type ApiCaptureWebinarRegistrationListRequest struct {
	ctx context.Context
	ApiService WebinarRegistrationsAPI
	userId int32
	webinarId string
	captureWebinarRegistrationListAlt1Request *CaptureWebinarRegistrationListAlt1Request
}

func (r ApiCaptureWebinarRegistrationListRequest) CaptureWebinarRegistrationListAlt1Request(captureWebinarRegistrationListAlt1Request CaptureWebinarRegistrationListAlt1Request) ApiCaptureWebinarRegistrationListRequest {
	r.captureWebinarRegistrationListAlt1Request = &captureWebinarRegistrationListAlt1Request
	return r
}

func (r ApiCaptureWebinarRegistrationListRequest) Execute() (*http.Response, error) {
	return r.ApiService.CaptureWebinarRegistrationListExecute(r)
}

/*
CaptureWebinarRegistrationList Capture the user registration list associated with a webinar

This method captures the user registration list associated with the specified webinar. A maximum of 50 registrants are permitted as part of the request.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId The ID of the user.
 @param webinarId The ID of the webinar.
 @return ApiCaptureWebinarRegistrationListRequest
*/
func (a *WebinarRegistrationsAPIService) CaptureWebinarRegistrationList(ctx context.Context, userId int32, webinarId string) ApiCaptureWebinarRegistrationListRequest {
	return ApiCaptureWebinarRegistrationListRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		webinarId: webinarId,
	}
}

// Execute executes the request
func (a *WebinarRegistrationsAPIService) CaptureWebinarRegistrationListExecute(r ApiCaptureWebinarRegistrationListRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WebinarRegistrationsAPIService.CaptureWebinarRegistrationList")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/webinars/{webinar_id}/registrants"
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"webinar_id"+"}", url.PathEscape(parameterValueToString(r.webinarId, "webinarId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.captureWebinarRegistrationListAlt1Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCaptureWebinarRegistrationListAlt1Request struct {
	ctx context.Context
	ApiService WebinarRegistrationsAPI
	webinarId string
	captureWebinarRegistrationListAlt1Request *CaptureWebinarRegistrationListAlt1Request
}

func (r ApiCaptureWebinarRegistrationListAlt1Request) CaptureWebinarRegistrationListAlt1Request(captureWebinarRegistrationListAlt1Request CaptureWebinarRegistrationListAlt1Request) ApiCaptureWebinarRegistrationListAlt1Request {
	r.captureWebinarRegistrationListAlt1Request = &captureWebinarRegistrationListAlt1Request
	return r
}

func (r ApiCaptureWebinarRegistrationListAlt1Request) Execute() (*http.Response, error) {
	return r.ApiService.CaptureWebinarRegistrationListAlt1Execute(r)
}

/*
CaptureWebinarRegistrationListAlt1 Capture the user registration list associated with a webinar

This method captures the user registration list associated with the specified webinar. A maximum of 50 registrants are permitted as part of the request.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param webinarId The ID of the webinar.
 @return ApiCaptureWebinarRegistrationListAlt1Request
*/
func (a *WebinarRegistrationsAPIService) CaptureWebinarRegistrationListAlt1(ctx context.Context, webinarId string) ApiCaptureWebinarRegistrationListAlt1Request {
	return ApiCaptureWebinarRegistrationListAlt1Request{
		ApiService: a,
		ctx: ctx,
		webinarId: webinarId,
	}
}

// Execute executes the request
func (a *WebinarRegistrationsAPIService) CaptureWebinarRegistrationListAlt1Execute(r ApiCaptureWebinarRegistrationListAlt1Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WebinarRegistrationsAPIService.CaptureWebinarRegistrationListAlt1")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/webinars/{webinar_id}/registrants"
	localVarPath = strings.Replace(localVarPath, "{"+"webinar_id"+"}", url.PathEscape(parameterValueToString(r.webinarId, "webinarId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.captureWebinarRegistrationListAlt1Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteWebinarRegistrantRequest struct {
	ctx context.Context
	ApiService WebinarRegistrationsAPI
	registrantId string
	userId int32
	webinarId string
}

func (r ApiDeleteWebinarRegistrantRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteWebinarRegistrantExecute(r)
}

/*
DeleteWebinarRegistrant Delete a registrant record associated with a webinar

This method deletes the specified registrant associated with a webinar and originally submitted through a webinar form.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param registrantId The ID of the webinar registrant.
 @param userId The ID of the user.
 @param webinarId The ID of the webinar.
 @return ApiDeleteWebinarRegistrantRequest
*/
func (a *WebinarRegistrationsAPIService) DeleteWebinarRegistrant(ctx context.Context, registrantId string, userId int32, webinarId string) ApiDeleteWebinarRegistrantRequest {
	return ApiDeleteWebinarRegistrantRequest{
		ApiService: a,
		ctx: ctx,
		registrantId: registrantId,
		userId: userId,
		webinarId: webinarId,
	}
}

// Execute executes the request
func (a *WebinarRegistrationsAPIService) DeleteWebinarRegistrantExecute(r ApiDeleteWebinarRegistrantRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WebinarRegistrationsAPIService.DeleteWebinarRegistrant")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/webinars/{webinar_id}/registrants/{registrant_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"registrant_id"+"}", url.PathEscape(parameterValueToString(r.registrantId, "registrantId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"webinar_id"+"}", url.PathEscape(parameterValueToString(r.webinarId, "webinarId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteWebinarRegistrantAlt1Request struct {
	ctx context.Context
	ApiService WebinarRegistrationsAPI
	registrantId string
	webinarId string
}

func (r ApiDeleteWebinarRegistrantAlt1Request) Execute() (*http.Response, error) {
	return r.ApiService.DeleteWebinarRegistrantAlt1Execute(r)
}

/*
DeleteWebinarRegistrantAlt1 Delete a registrant record associated with a webinar

This method deletes the specified registrant associated with a webinar and originally submitted through a webinar form.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param registrantId The ID of the webinar registrant.
 @param webinarId The ID of the webinar.
 @return ApiDeleteWebinarRegistrantAlt1Request
*/
func (a *WebinarRegistrationsAPIService) DeleteWebinarRegistrantAlt1(ctx context.Context, registrantId string, webinarId string) ApiDeleteWebinarRegistrantAlt1Request {
	return ApiDeleteWebinarRegistrantAlt1Request{
		ApiService: a,
		ctx: ctx,
		registrantId: registrantId,
		webinarId: webinarId,
	}
}

// Execute executes the request
func (a *WebinarRegistrationsAPIService) DeleteWebinarRegistrantAlt1Execute(r ApiDeleteWebinarRegistrantAlt1Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WebinarRegistrationsAPIService.DeleteWebinarRegistrantAlt1")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/webinars/{webinar_id}/registrants/{registrant_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"registrant_id"+"}", url.PathEscape(parameterValueToString(r.registrantId, "registrantId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"webinar_id"+"}", url.PathEscape(parameterValueToString(r.webinarId, "webinarId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAllWebinarRegistrationsRequest struct {
	ctx context.Context
	ApiService WebinarRegistrationsAPI
	userId int32
	webinarId string
	direction *string
	page *float32
	perPage *float32
	sort *string
}

// The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
func (r ApiGetAllWebinarRegistrationsRequest) Direction(direction string) ApiGetAllWebinarRegistrationsRequest {
	r.direction = &direction
	return r
}

// The page number of the results to show.
func (r ApiGetAllWebinarRegistrationsRequest) Page(page float32) ApiGetAllWebinarRegistrationsRequest {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiGetAllWebinarRegistrationsRequest) PerPage(perPage float32) ApiGetAllWebinarRegistrationsRequest {
	r.perPage = &perPage
	return r
}

// The way to sort the results.  Option descriptions:  * &#x60;registration_date&#x60; - Sort the results by registration date. 
func (r ApiGetAllWebinarRegistrationsRequest) Sort(sort string) ApiGetAllWebinarRegistrationsRequest {
	r.sort = &sort
	return r
}

func (r ApiGetAllWebinarRegistrationsRequest) Execute() (*WebinarRegistrant, *http.Response, error) {
	return r.ApiService.GetAllWebinarRegistrationsExecute(r)
}

/*
GetAllWebinarRegistrations Get user registration data associated with a webinar

This method returns the list of user registrations that is associated with the specified webinar and was originally submitted through a webinar form.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId The ID of the user.
 @param webinarId The ID of the webinar.
 @return ApiGetAllWebinarRegistrationsRequest
*/
func (a *WebinarRegistrationsAPIService) GetAllWebinarRegistrations(ctx context.Context, userId int32, webinarId string) ApiGetAllWebinarRegistrationsRequest {
	return ApiGetAllWebinarRegistrationsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		webinarId: webinarId,
	}
}

// Execute executes the request
//  @return WebinarRegistrant
func (a *WebinarRegistrationsAPIService) GetAllWebinarRegistrationsExecute(r ApiGetAllWebinarRegistrationsRequest) (*WebinarRegistrant, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WebinarRegistrant
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WebinarRegistrationsAPIService.GetAllWebinarRegistrations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/webinars/{webinar_id}/registrants"
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"webinar_id"+"}", url.PathEscape(parameterValueToString(r.webinarId, "webinarId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAllWebinarRegistrationsAlt1Request struct {
	ctx context.Context
	ApiService WebinarRegistrationsAPI
	webinarId string
	direction *string
	page *float32
	perPage *float32
	sort *string
}

// The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
func (r ApiGetAllWebinarRegistrationsAlt1Request) Direction(direction string) ApiGetAllWebinarRegistrationsAlt1Request {
	r.direction = &direction
	return r
}

// The page number of the results to show.
func (r ApiGetAllWebinarRegistrationsAlt1Request) Page(page float32) ApiGetAllWebinarRegistrationsAlt1Request {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiGetAllWebinarRegistrationsAlt1Request) PerPage(perPage float32) ApiGetAllWebinarRegistrationsAlt1Request {
	r.perPage = &perPage
	return r
}

// The way to sort the results.  Option descriptions:  * &#x60;registration_date&#x60; - Sort the results by registration date. 
func (r ApiGetAllWebinarRegistrationsAlt1Request) Sort(sort string) ApiGetAllWebinarRegistrationsAlt1Request {
	r.sort = &sort
	return r
}

func (r ApiGetAllWebinarRegistrationsAlt1Request) Execute() (*WebinarRegistrant, *http.Response, error) {
	return r.ApiService.GetAllWebinarRegistrationsAlt1Execute(r)
}

/*
GetAllWebinarRegistrationsAlt1 Get user registration data associated with a webinar

This method returns the list of user registrations that is associated with the specified webinar and was originally submitted through a webinar form.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param webinarId The ID of the webinar.
 @return ApiGetAllWebinarRegistrationsAlt1Request
*/
func (a *WebinarRegistrationsAPIService) GetAllWebinarRegistrationsAlt1(ctx context.Context, webinarId string) ApiGetAllWebinarRegistrationsAlt1Request {
	return ApiGetAllWebinarRegistrationsAlt1Request{
		ApiService: a,
		ctx: ctx,
		webinarId: webinarId,
	}
}

// Execute executes the request
//  @return WebinarRegistrant
func (a *WebinarRegistrationsAPIService) GetAllWebinarRegistrationsAlt1Execute(r ApiGetAllWebinarRegistrationsAlt1Request) (*WebinarRegistrant, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WebinarRegistrant
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WebinarRegistrationsAPIService.GetAllWebinarRegistrationsAlt1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/webinars/{webinar_id}/registrants"
	localVarPath = strings.Replace(localVarPath, "{"+"webinar_id"+"}", url.PathEscape(parameterValueToString(r.webinarId, "webinarId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateWebinarRegistrationsRequest struct {
	ctx context.Context
	ApiService WebinarRegistrationsAPI
	registrantId string
	userId int32
	webinarId string
	updateWebinarRegistrationsAlt1Request *UpdateWebinarRegistrationsAlt1Request
}

func (r ApiUpdateWebinarRegistrationsRequest) UpdateWebinarRegistrationsAlt1Request(updateWebinarRegistrationsAlt1Request UpdateWebinarRegistrationsAlt1Request) ApiUpdateWebinarRegistrationsRequest {
	r.updateWebinarRegistrationsAlt1Request = &updateWebinarRegistrationsAlt1Request
	return r
}

func (r ApiUpdateWebinarRegistrationsRequest) Execute() (*WebinarRegistrant, *http.Response, error) {
	return r.ApiService.UpdateWebinarRegistrationsExecute(r)
}

/*
UpdateWebinarRegistrations Update user registration data associated with a webinar

This method updates the specified user registration data associated with a webinar and originally submitted through a webinar form.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param registrantId The ID of the webinar registrant.
 @param userId The ID of the user.
 @param webinarId The ID of the webinar.
 @return ApiUpdateWebinarRegistrationsRequest
*/
func (a *WebinarRegistrationsAPIService) UpdateWebinarRegistrations(ctx context.Context, registrantId string, userId int32, webinarId string) ApiUpdateWebinarRegistrationsRequest {
	return ApiUpdateWebinarRegistrationsRequest{
		ApiService: a,
		ctx: ctx,
		registrantId: registrantId,
		userId: userId,
		webinarId: webinarId,
	}
}

// Execute executes the request
//  @return WebinarRegistrant
func (a *WebinarRegistrationsAPIService) UpdateWebinarRegistrationsExecute(r ApiUpdateWebinarRegistrationsRequest) (*WebinarRegistrant, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WebinarRegistrant
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WebinarRegistrationsAPIService.UpdateWebinarRegistrations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/webinars/{webinar_id}/registrants/{registrant_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"registrant_id"+"}", url.PathEscape(parameterValueToString(r.registrantId, "registrantId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"webinar_id"+"}", url.PathEscape(parameterValueToString(r.webinarId, "webinarId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateWebinarRegistrationsAlt1Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateWebinarRegistrationsAlt1Request struct {
	ctx context.Context
	ApiService WebinarRegistrationsAPI
	registrantId string
	webinarId string
	updateWebinarRegistrationsAlt1Request *UpdateWebinarRegistrationsAlt1Request
}

func (r ApiUpdateWebinarRegistrationsAlt1Request) UpdateWebinarRegistrationsAlt1Request(updateWebinarRegistrationsAlt1Request UpdateWebinarRegistrationsAlt1Request) ApiUpdateWebinarRegistrationsAlt1Request {
	r.updateWebinarRegistrationsAlt1Request = &updateWebinarRegistrationsAlt1Request
	return r
}

func (r ApiUpdateWebinarRegistrationsAlt1Request) Execute() (*WebinarRegistrant, *http.Response, error) {
	return r.ApiService.UpdateWebinarRegistrationsAlt1Execute(r)
}

/*
UpdateWebinarRegistrationsAlt1 Update user registration data associated with a webinar

This method updates the specified user registration data associated with a webinar and originally submitted through a webinar form.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param registrantId The ID of the webinar registrant.
 @param webinarId The ID of the webinar.
 @return ApiUpdateWebinarRegistrationsAlt1Request
*/
func (a *WebinarRegistrationsAPIService) UpdateWebinarRegistrationsAlt1(ctx context.Context, registrantId string, webinarId string) ApiUpdateWebinarRegistrationsAlt1Request {
	return ApiUpdateWebinarRegistrationsAlt1Request{
		ApiService: a,
		ctx: ctx,
		registrantId: registrantId,
		webinarId: webinarId,
	}
}

// Execute executes the request
//  @return WebinarRegistrant
func (a *WebinarRegistrationsAPIService) UpdateWebinarRegistrationsAlt1Execute(r ApiUpdateWebinarRegistrationsAlt1Request) (*WebinarRegistrant, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WebinarRegistrant
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WebinarRegistrationsAPIService.UpdateWebinarRegistrationsAlt1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/webinars/{webinar_id}/registrants/{registrant_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"registrant_id"+"}", url.PathEscape(parameterValueToString(r.registrantId, "registrantId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"webinar_id"+"}", url.PathEscape(parameterValueToString(r.webinarId, "webinarId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateWebinarRegistrationsAlt1Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
