/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Analytics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Analytics{}

// Analytics struct for Analytics
type Analytics struct {
	// The average percent watched in seconds of the corresponding Vimeo content.
	AveragePercentWatched float32 `json:"average_percent_watched"`
	// The average time watched in seconds of the corresponding Vimeo content.
	AverageTimeWatched float32 `json:"average_time_watched"`
	Country AnalyticsCountry `json:"country"`
	// The number of downloads of the corresponding Vimeo content.
	Downloads float32 `json:"downloads"`
	// The domain name of the website.
	EmbedDomain string `json:"embed_domain"`
	// The end time of the time interval in ISO 8601 format.
	EndDate string `json:"end_date"`
	// The number of finishes of the corresponding Vimeo content.
	Finishes float32 `json:"finishes"`
	// The number of impressions of the corresponding Vimeo content.
	Impressions float32 `json:"impressions"`
	Metadata AnalyticsMetadata `json:"metadata"`
	// The start time of the time interval in ISO 8601 format.
	StartDate string `json:"start_date"`
	// The total time watched in seconds of the corresponding Vimeo content.
	TotalTimeWatched float32 `json:"total_time_watched"`
	// The number of unique impressions of the corresponding Vimeo content.
	UniqueImpressions float32 `json:"unique_impressions"`
	// The number of unique viewers of the corresponding Vimeo content.
	UniqueViewers float32 `json:"unique_viewers"`
	// The number of views of the corresponding Vimeo content.
	Views float32 `json:"views"`
}

type _Analytics Analytics

// NewAnalytics instantiates a new Analytics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnalytics(averagePercentWatched float32, averageTimeWatched float32, country AnalyticsCountry, downloads float32, embedDomain string, endDate string, finishes float32, impressions float32, metadata AnalyticsMetadata, startDate string, totalTimeWatched float32, uniqueImpressions float32, uniqueViewers float32, views float32) *Analytics {
	this := Analytics{}
	this.AveragePercentWatched = averagePercentWatched
	this.AverageTimeWatched = averageTimeWatched
	this.Country = country
	this.Downloads = downloads
	this.EmbedDomain = embedDomain
	this.EndDate = endDate
	this.Finishes = finishes
	this.Impressions = impressions
	this.Metadata = metadata
	this.StartDate = startDate
	this.TotalTimeWatched = totalTimeWatched
	this.UniqueImpressions = uniqueImpressions
	this.UniqueViewers = uniqueViewers
	this.Views = views
	return &this
}

// NewAnalyticsWithDefaults instantiates a new Analytics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnalyticsWithDefaults() *Analytics {
	this := Analytics{}
	return &this
}

// GetAveragePercentWatched returns the AveragePercentWatched field value
func (o *Analytics) GetAveragePercentWatched() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.AveragePercentWatched
}

// GetAveragePercentWatchedOk returns a tuple with the AveragePercentWatched field value
// and a boolean to check if the value has been set.
func (o *Analytics) GetAveragePercentWatchedOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AveragePercentWatched, true
}

// SetAveragePercentWatched sets field value
func (o *Analytics) SetAveragePercentWatched(v float32) {
	o.AveragePercentWatched = v
}

// GetAverageTimeWatched returns the AverageTimeWatched field value
func (o *Analytics) GetAverageTimeWatched() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.AverageTimeWatched
}

// GetAverageTimeWatchedOk returns a tuple with the AverageTimeWatched field value
// and a boolean to check if the value has been set.
func (o *Analytics) GetAverageTimeWatchedOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AverageTimeWatched, true
}

// SetAverageTimeWatched sets field value
func (o *Analytics) SetAverageTimeWatched(v float32) {
	o.AverageTimeWatched = v
}

// GetCountry returns the Country field value
func (o *Analytics) GetCountry() AnalyticsCountry {
	if o == nil {
		var ret AnalyticsCountry
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *Analytics) GetCountryOk() (*AnalyticsCountry, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *Analytics) SetCountry(v AnalyticsCountry) {
	o.Country = v
}

// GetDownloads returns the Downloads field value
func (o *Analytics) GetDownloads() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Downloads
}

// GetDownloadsOk returns a tuple with the Downloads field value
// and a boolean to check if the value has been set.
func (o *Analytics) GetDownloadsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Downloads, true
}

// SetDownloads sets field value
func (o *Analytics) SetDownloads(v float32) {
	o.Downloads = v
}

// GetEmbedDomain returns the EmbedDomain field value
func (o *Analytics) GetEmbedDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EmbedDomain
}

// GetEmbedDomainOk returns a tuple with the EmbedDomain field value
// and a boolean to check if the value has been set.
func (o *Analytics) GetEmbedDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EmbedDomain, true
}

// SetEmbedDomain sets field value
func (o *Analytics) SetEmbedDomain(v string) {
	o.EmbedDomain = v
}

// GetEndDate returns the EndDate field value
func (o *Analytics) GetEndDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value
// and a boolean to check if the value has been set.
func (o *Analytics) GetEndDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndDate, true
}

// SetEndDate sets field value
func (o *Analytics) SetEndDate(v string) {
	o.EndDate = v
}

// GetFinishes returns the Finishes field value
func (o *Analytics) GetFinishes() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Finishes
}

// GetFinishesOk returns a tuple with the Finishes field value
// and a boolean to check if the value has been set.
func (o *Analytics) GetFinishesOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Finishes, true
}

// SetFinishes sets field value
func (o *Analytics) SetFinishes(v float32) {
	o.Finishes = v
}

// GetImpressions returns the Impressions field value
func (o *Analytics) GetImpressions() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Impressions
}

// GetImpressionsOk returns a tuple with the Impressions field value
// and a boolean to check if the value has been set.
func (o *Analytics) GetImpressionsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Impressions, true
}

// SetImpressions sets field value
func (o *Analytics) SetImpressions(v float32) {
	o.Impressions = v
}

// GetMetadata returns the Metadata field value
func (o *Analytics) GetMetadata() AnalyticsMetadata {
	if o == nil {
		var ret AnalyticsMetadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *Analytics) GetMetadataOk() (*AnalyticsMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *Analytics) SetMetadata(v AnalyticsMetadata) {
	o.Metadata = v
}

// GetStartDate returns the StartDate field value
func (o *Analytics) GetStartDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value
// and a boolean to check if the value has been set.
func (o *Analytics) GetStartDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartDate, true
}

// SetStartDate sets field value
func (o *Analytics) SetStartDate(v string) {
	o.StartDate = v
}

// GetTotalTimeWatched returns the TotalTimeWatched field value
func (o *Analytics) GetTotalTimeWatched() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalTimeWatched
}

// GetTotalTimeWatchedOk returns a tuple with the TotalTimeWatched field value
// and a boolean to check if the value has been set.
func (o *Analytics) GetTotalTimeWatchedOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalTimeWatched, true
}

// SetTotalTimeWatched sets field value
func (o *Analytics) SetTotalTimeWatched(v float32) {
	o.TotalTimeWatched = v
}

// GetUniqueImpressions returns the UniqueImpressions field value
func (o *Analytics) GetUniqueImpressions() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.UniqueImpressions
}

// GetUniqueImpressionsOk returns a tuple with the UniqueImpressions field value
// and a boolean to check if the value has been set.
func (o *Analytics) GetUniqueImpressionsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UniqueImpressions, true
}

// SetUniqueImpressions sets field value
func (o *Analytics) SetUniqueImpressions(v float32) {
	o.UniqueImpressions = v
}

// GetUniqueViewers returns the UniqueViewers field value
func (o *Analytics) GetUniqueViewers() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.UniqueViewers
}

// GetUniqueViewersOk returns a tuple with the UniqueViewers field value
// and a boolean to check if the value has been set.
func (o *Analytics) GetUniqueViewersOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UniqueViewers, true
}

// SetUniqueViewers sets field value
func (o *Analytics) SetUniqueViewers(v float32) {
	o.UniqueViewers = v
}

// GetViews returns the Views field value
func (o *Analytics) GetViews() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Views
}

// GetViewsOk returns a tuple with the Views field value
// and a boolean to check if the value has been set.
func (o *Analytics) GetViewsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Views, true
}

// SetViews sets field value
func (o *Analytics) SetViews(v float32) {
	o.Views = v
}

func (o Analytics) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Analytics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["average_percent_watched"] = o.AveragePercentWatched
	toSerialize["average_time_watched"] = o.AverageTimeWatched
	toSerialize["country"] = o.Country
	toSerialize["downloads"] = o.Downloads
	toSerialize["embed_domain"] = o.EmbedDomain
	toSerialize["end_date"] = o.EndDate
	toSerialize["finishes"] = o.Finishes
	toSerialize["impressions"] = o.Impressions
	toSerialize["metadata"] = o.Metadata
	toSerialize["start_date"] = o.StartDate
	toSerialize["total_time_watched"] = o.TotalTimeWatched
	toSerialize["unique_impressions"] = o.UniqueImpressions
	toSerialize["unique_viewers"] = o.UniqueViewers
	toSerialize["views"] = o.Views
	return toSerialize, nil
}

func (o *Analytics) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"average_percent_watched",
		"average_time_watched",
		"country",
		"downloads",
		"embed_domain",
		"end_date",
		"finishes",
		"impressions",
		"metadata",
		"start_date",
		"total_time_watched",
		"unique_impressions",
		"unique_viewers",
		"views",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAnalytics := _Analytics{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAnalytics)

	if err != nil {
		return err
	}

	*o = Analytics(varAnalytics)

	return err
}

type NullableAnalytics struct {
	value *Analytics
	isSet bool
}

func (v NullableAnalytics) Get() *Analytics {
	return v.value
}

func (v *NullableAnalytics) Set(val *Analytics) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalytics) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalytics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalytics(val *Analytics) *NullableAnalytics {
	return &NullableAnalytics{value: val, isSet: true}
}

func (v NullableAnalytics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalytics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


