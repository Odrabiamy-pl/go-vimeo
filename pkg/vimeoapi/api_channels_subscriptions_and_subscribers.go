/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type ChannelsSubscriptionsAndSubscribersAPI interface {

	/*
	CheckIfUserSubscribedToChannel Check if a user follows a channel

	This method determines whether the specified user is a follower of a particular channel.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param channelId The ID of the channel.
	@param userId The ID of the user.
	@return ApiCheckIfUserSubscribedToChannelRequest
	*/
	CheckIfUserSubscribedToChannel(ctx context.Context, channelId float32, userId int32) ApiCheckIfUserSubscribedToChannelRequest

	// CheckIfUserSubscribedToChannelExecute executes the request
	CheckIfUserSubscribedToChannelExecute(r ApiCheckIfUserSubscribedToChannelRequest) (*http.Response, error)

	/*
	CheckIfUserSubscribedToChannelAlt1 Check if a user follows a channel

	This method determines whether the specified user is a follower of a particular channel.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param channelId The ID of the channel.
	@return ApiCheckIfUserSubscribedToChannelAlt1Request
	*/
	CheckIfUserSubscribedToChannelAlt1(ctx context.Context, channelId float32) ApiCheckIfUserSubscribedToChannelAlt1Request

	// CheckIfUserSubscribedToChannelAlt1Execute executes the request
	CheckIfUserSubscribedToChannelAlt1Execute(r ApiCheckIfUserSubscribedToChannelAlt1Request) (*http.Response, error)

	/*
	GetChannelSubscribers Get all the followers of a channel

	This method returns every follower of the specified channel.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param channelId The ID of the channel.
	@return ApiGetChannelSubscribersRequest
	*/
	GetChannelSubscribers(ctx context.Context, channelId float32) ApiGetChannelSubscribersRequest

	// GetChannelSubscribersExecute executes the request
	//  @return []User
	GetChannelSubscribersExecute(r ApiGetChannelSubscribersRequest) ([]User, *http.Response, error)

	/*
	SubscribeToChannel Subscribe the user to a specific channel

	This method subscribes the authenticated user to the specified channel.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param channelId The ID of the channel.
	@param userId The ID of the user.
	@return ApiSubscribeToChannelRequest
	*/
	SubscribeToChannel(ctx context.Context, channelId float32, userId int32) ApiSubscribeToChannelRequest

	// SubscribeToChannelExecute executes the request
	SubscribeToChannelExecute(r ApiSubscribeToChannelRequest) (*http.Response, error)

	/*
	SubscribeToChannelAlt1 Subscribe the user to a specific channel

	This method subscribes the authenticated user to the specified channel.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param channelId The ID of the channel.
	@return ApiSubscribeToChannelAlt1Request
	*/
	SubscribeToChannelAlt1(ctx context.Context, channelId float32) ApiSubscribeToChannelAlt1Request

	// SubscribeToChannelAlt1Execute executes the request
	SubscribeToChannelAlt1Execute(r ApiSubscribeToChannelAlt1Request) (*http.Response, error)

	/*
	UnsubscribeFromChannel Unsubscribe the user from a specific channel

	This method unsubscribes the authenticated user from the specified channel.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param channelId The ID of the channel.
	@param userId The ID of the user.
	@return ApiUnsubscribeFromChannelRequest
	*/
	UnsubscribeFromChannel(ctx context.Context, channelId float32, userId int32) ApiUnsubscribeFromChannelRequest

	// UnsubscribeFromChannelExecute executes the request
	UnsubscribeFromChannelExecute(r ApiUnsubscribeFromChannelRequest) (*http.Response, error)

	/*
	UnsubscribeFromChannelAlt1 Unsubscribe the user from a specific channel

	This method unsubscribes the authenticated user from the specified channel.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param channelId The ID of the channel.
	@return ApiUnsubscribeFromChannelAlt1Request
	*/
	UnsubscribeFromChannelAlt1(ctx context.Context, channelId float32) ApiUnsubscribeFromChannelAlt1Request

	// UnsubscribeFromChannelAlt1Execute executes the request
	UnsubscribeFromChannelAlt1Execute(r ApiUnsubscribeFromChannelAlt1Request) (*http.Response, error)
}

// ChannelsSubscriptionsAndSubscribersAPIService ChannelsSubscriptionsAndSubscribersAPI service
type ChannelsSubscriptionsAndSubscribersAPIService service

type ApiCheckIfUserSubscribedToChannelRequest struct {
	ctx context.Context
	ApiService ChannelsSubscriptionsAndSubscribersAPI
	channelId float32
	userId int32
}

func (r ApiCheckIfUserSubscribedToChannelRequest) Execute() (*http.Response, error) {
	return r.ApiService.CheckIfUserSubscribedToChannelExecute(r)
}

/*
CheckIfUserSubscribedToChannel Check if a user follows a channel

This method determines whether the specified user is a follower of a particular channel.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param channelId The ID of the channel.
 @param userId The ID of the user.
 @return ApiCheckIfUserSubscribedToChannelRequest
*/
func (a *ChannelsSubscriptionsAndSubscribersAPIService) CheckIfUserSubscribedToChannel(ctx context.Context, channelId float32, userId int32) ApiCheckIfUserSubscribedToChannelRequest {
	return ApiCheckIfUserSubscribedToChannelRequest{
		ApiService: a,
		ctx: ctx,
		channelId: channelId,
		userId: userId,
	}
}

// Execute executes the request
func (a *ChannelsSubscriptionsAndSubscribersAPIService) CheckIfUserSubscribedToChannelExecute(r ApiCheckIfUserSubscribedToChannelRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChannelsSubscriptionsAndSubscribersAPIService.CheckIfUserSubscribedToChannel")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/channels/{channel_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"channel_id"+"}", url.PathEscape(parameterValueToString(r.channelId, "channelId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCheckIfUserSubscribedToChannelAlt1Request struct {
	ctx context.Context
	ApiService ChannelsSubscriptionsAndSubscribersAPI
	channelId float32
}

func (r ApiCheckIfUserSubscribedToChannelAlt1Request) Execute() (*http.Response, error) {
	return r.ApiService.CheckIfUserSubscribedToChannelAlt1Execute(r)
}

/*
CheckIfUserSubscribedToChannelAlt1 Check if a user follows a channel

This method determines whether the specified user is a follower of a particular channel.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param channelId The ID of the channel.
 @return ApiCheckIfUserSubscribedToChannelAlt1Request
*/
func (a *ChannelsSubscriptionsAndSubscribersAPIService) CheckIfUserSubscribedToChannelAlt1(ctx context.Context, channelId float32) ApiCheckIfUserSubscribedToChannelAlt1Request {
	return ApiCheckIfUserSubscribedToChannelAlt1Request{
		ApiService: a,
		ctx: ctx,
		channelId: channelId,
	}
}

// Execute executes the request
func (a *ChannelsSubscriptionsAndSubscribersAPIService) CheckIfUserSubscribedToChannelAlt1Execute(r ApiCheckIfUserSubscribedToChannelAlt1Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChannelsSubscriptionsAndSubscribersAPIService.CheckIfUserSubscribedToChannelAlt1")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/channels/{channel_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"channel_id"+"}", url.PathEscape(parameterValueToString(r.channelId, "channelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetChannelSubscribersRequest struct {
	ctx context.Context
	ApiService ChannelsSubscriptionsAndSubscribersAPI
	channelId float32
	filter *string
	direction *string
	page *float32
	perPage *float32
	query *string
	sort *string
}

// The attribute by which to filter the results.  Option descriptions:  * &#x60;moderators&#x60; - Return moderators. 
func (r ApiGetChannelSubscribersRequest) Filter(filter string) ApiGetChannelSubscribersRequest {
	r.filter = &filter
	return r
}

// The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
func (r ApiGetChannelSubscribersRequest) Direction(direction string) ApiGetChannelSubscribersRequest {
	r.direction = &direction
	return r
}

// The page number of the results to show.
func (r ApiGetChannelSubscribersRequest) Page(page float32) ApiGetChannelSubscribersRequest {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiGetChannelSubscribersRequest) PerPage(perPage float32) ApiGetChannelSubscribersRequest {
	r.perPage = &perPage
	return r
}

// The search query to use to filter the results.
func (r ApiGetChannelSubscribersRequest) Query(query string) ApiGetChannelSubscribersRequest {
	r.query = &query
	return r
}

// The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by follow date. 
func (r ApiGetChannelSubscribersRequest) Sort(sort string) ApiGetChannelSubscribersRequest {
	r.sort = &sort
	return r
}

func (r ApiGetChannelSubscribersRequest) Execute() ([]User, *http.Response, error) {
	return r.ApiService.GetChannelSubscribersExecute(r)
}

/*
GetChannelSubscribers Get all the followers of a channel

This method returns every follower of the specified channel.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param channelId The ID of the channel.
 @return ApiGetChannelSubscribersRequest
*/
func (a *ChannelsSubscriptionsAndSubscribersAPIService) GetChannelSubscribers(ctx context.Context, channelId float32) ApiGetChannelSubscribersRequest {
	return ApiGetChannelSubscribersRequest{
		ApiService: a,
		ctx: ctx,
		channelId: channelId,
	}
}

// Execute executes the request
//  @return []User
func (a *ChannelsSubscriptionsAndSubscribersAPIService) GetChannelSubscribersExecute(r ApiGetChannelSubscribersRequest) ([]User, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []User
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChannelsSubscriptionsAndSubscribersAPIService.GetChannelSubscribers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/channels/{channel_id}/users"
	localVarPath = strings.Replace(localVarPath, "{"+"channel_id"+"}", url.PathEscape(parameterValueToString(r.channelId, "channelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.filter == nil {
		return localVarReturnValue, nil, reportError("filter is required and must be specified")
	}

	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	if r.query != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "query", r.query, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.user+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSubscribeToChannelRequest struct {
	ctx context.Context
	ApiService ChannelsSubscriptionsAndSubscribersAPI
	channelId float32
	userId int32
}

func (r ApiSubscribeToChannelRequest) Execute() (*http.Response, error) {
	return r.ApiService.SubscribeToChannelExecute(r)
}

/*
SubscribeToChannel Subscribe the user to a specific channel

This method subscribes the authenticated user to the specified channel.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param channelId The ID of the channel.
 @param userId The ID of the user.
 @return ApiSubscribeToChannelRequest
*/
func (a *ChannelsSubscriptionsAndSubscribersAPIService) SubscribeToChannel(ctx context.Context, channelId float32, userId int32) ApiSubscribeToChannelRequest {
	return ApiSubscribeToChannelRequest{
		ApiService: a,
		ctx: ctx,
		channelId: channelId,
		userId: userId,
	}
}

// Execute executes the request
func (a *ChannelsSubscriptionsAndSubscribersAPIService) SubscribeToChannelExecute(r ApiSubscribeToChannelRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChannelsSubscriptionsAndSubscribersAPIService.SubscribeToChannel")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/channels/{channel_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"channel_id"+"}", url.PathEscape(parameterValueToString(r.channelId, "channelId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSubscribeToChannelAlt1Request struct {
	ctx context.Context
	ApiService ChannelsSubscriptionsAndSubscribersAPI
	channelId float32
}

func (r ApiSubscribeToChannelAlt1Request) Execute() (*http.Response, error) {
	return r.ApiService.SubscribeToChannelAlt1Execute(r)
}

/*
SubscribeToChannelAlt1 Subscribe the user to a specific channel

This method subscribes the authenticated user to the specified channel.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param channelId The ID of the channel.
 @return ApiSubscribeToChannelAlt1Request
*/
func (a *ChannelsSubscriptionsAndSubscribersAPIService) SubscribeToChannelAlt1(ctx context.Context, channelId float32) ApiSubscribeToChannelAlt1Request {
	return ApiSubscribeToChannelAlt1Request{
		ApiService: a,
		ctx: ctx,
		channelId: channelId,
	}
}

// Execute executes the request
func (a *ChannelsSubscriptionsAndSubscribersAPIService) SubscribeToChannelAlt1Execute(r ApiSubscribeToChannelAlt1Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChannelsSubscriptionsAndSubscribersAPIService.SubscribeToChannelAlt1")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/channels/{channel_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"channel_id"+"}", url.PathEscape(parameterValueToString(r.channelId, "channelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUnsubscribeFromChannelRequest struct {
	ctx context.Context
	ApiService ChannelsSubscriptionsAndSubscribersAPI
	channelId float32
	userId int32
}

func (r ApiUnsubscribeFromChannelRequest) Execute() (*http.Response, error) {
	return r.ApiService.UnsubscribeFromChannelExecute(r)
}

/*
UnsubscribeFromChannel Unsubscribe the user from a specific channel

This method unsubscribes the authenticated user from the specified channel.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param channelId The ID of the channel.
 @param userId The ID of the user.
 @return ApiUnsubscribeFromChannelRequest
*/
func (a *ChannelsSubscriptionsAndSubscribersAPIService) UnsubscribeFromChannel(ctx context.Context, channelId float32, userId int32) ApiUnsubscribeFromChannelRequest {
	return ApiUnsubscribeFromChannelRequest{
		ApiService: a,
		ctx: ctx,
		channelId: channelId,
		userId: userId,
	}
}

// Execute executes the request
func (a *ChannelsSubscriptionsAndSubscribersAPIService) UnsubscribeFromChannelExecute(r ApiUnsubscribeFromChannelRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChannelsSubscriptionsAndSubscribersAPIService.UnsubscribeFromChannel")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/channels/{channel_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"channel_id"+"}", url.PathEscape(parameterValueToString(r.channelId, "channelId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUnsubscribeFromChannelAlt1Request struct {
	ctx context.Context
	ApiService ChannelsSubscriptionsAndSubscribersAPI
	channelId float32
}

func (r ApiUnsubscribeFromChannelAlt1Request) Execute() (*http.Response, error) {
	return r.ApiService.UnsubscribeFromChannelAlt1Execute(r)
}

/*
UnsubscribeFromChannelAlt1 Unsubscribe the user from a specific channel

This method unsubscribes the authenticated user from the specified channel.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param channelId The ID of the channel.
 @return ApiUnsubscribeFromChannelAlt1Request
*/
func (a *ChannelsSubscriptionsAndSubscribersAPIService) UnsubscribeFromChannelAlt1(ctx context.Context, channelId float32) ApiUnsubscribeFromChannelAlt1Request {
	return ApiUnsubscribeFromChannelAlt1Request{
		ApiService: a,
		ctx: ctx,
		channelId: channelId,
	}
}

// Execute executes the request
func (a *ChannelsSubscriptionsAndSubscribersAPIService) UnsubscribeFromChannelAlt1Execute(r ApiUnsubscribeFromChannelAlt1Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChannelsSubscriptionsAndSubscribersAPIService.UnsubscribeFromChannelAlt1")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/channels/{channel_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"channel_id"+"}", url.PathEscape(parameterValueToString(r.channelId, "channelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
