/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OnDemandRegion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OnDemandRegion{}

// OnDemandRegion struct for OnDemandRegion
type OnDemandRegion struct {
	// The ISO 3166-1 alpha-2 code for this country.
	CountryCode string `json:"country_code"`
	// The descriptive name of this country.
	CountryName string `json:"country_name"`
	// The region container's relative URI.
	Uri string `json:"uri"`
}

type _OnDemandRegion OnDemandRegion

// NewOnDemandRegion instantiates a new OnDemandRegion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOnDemandRegion(countryCode string, countryName string, uri string) *OnDemandRegion {
	this := OnDemandRegion{}
	this.CountryCode = countryCode
	this.CountryName = countryName
	this.Uri = uri
	return &this
}

// NewOnDemandRegionWithDefaults instantiates a new OnDemandRegion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOnDemandRegionWithDefaults() *OnDemandRegion {
	this := OnDemandRegion{}
	return &this
}

// GetCountryCode returns the CountryCode field value
func (o *OnDemandRegion) GetCountryCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value
// and a boolean to check if the value has been set.
func (o *OnDemandRegion) GetCountryCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CountryCode, true
}

// SetCountryCode sets field value
func (o *OnDemandRegion) SetCountryCode(v string) {
	o.CountryCode = v
}

// GetCountryName returns the CountryName field value
func (o *OnDemandRegion) GetCountryName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CountryName
}

// GetCountryNameOk returns a tuple with the CountryName field value
// and a boolean to check if the value has been set.
func (o *OnDemandRegion) GetCountryNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CountryName, true
}

// SetCountryName sets field value
func (o *OnDemandRegion) SetCountryName(v string) {
	o.CountryName = v
}

// GetUri returns the Uri field value
func (o *OnDemandRegion) GetUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uri
}

// GetUriOk returns a tuple with the Uri field value
// and a boolean to check if the value has been set.
func (o *OnDemandRegion) GetUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uri, true
}

// SetUri sets field value
func (o *OnDemandRegion) SetUri(v string) {
	o.Uri = v
}

func (o OnDemandRegion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OnDemandRegion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["country_code"] = o.CountryCode
	toSerialize["country_name"] = o.CountryName
	toSerialize["uri"] = o.Uri
	return toSerialize, nil
}

func (o *OnDemandRegion) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"country_code",
		"country_name",
		"uri",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOnDemandRegion := _OnDemandRegion{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOnDemandRegion)

	if err != nil {
		return err
	}

	*o = OnDemandRegion(varOnDemandRegion)

	return err
}

type NullableOnDemandRegion struct {
	value *OnDemandRegion
	isSet bool
}

func (v NullableOnDemandRegion) Get() *OnDemandRegion {
	return v.value
}

func (v *NullableOnDemandRegion) Set(val *OnDemandRegion) {
	v.value = val
	v.isSet = true
}

func (v NullableOnDemandRegion) IsSet() bool {
	return v.isSet
}

func (v *NullableOnDemandRegion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOnDemandRegion(val *OnDemandRegion) *NullableOnDemandRegion {
	return &NullableOnDemandRegion{value: val, isSet: true}
}

func (v NullableOnDemandRegion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOnDemandRegion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


