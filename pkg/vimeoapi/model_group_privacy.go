/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GroupPrivacy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GroupPrivacy{}

// GroupPrivacy The group's privacy settings.
type GroupPrivacy struct {
	// Who can comment on the group.  Option descriptions:  * `all` - Anyone can comment on the group.  * `members` - Only group members can comment on the group. 
	Comment string `json:"comment"`
	// Who can invite new members to the group.  Option descriptions:  * `all` - Anyone can invite new members to the group.  * `members` - Only group members can invite new members to the group. 
	Invite string `json:"invite"`
	// Who can join the group.  Option descriptions:  * `anybody` - Anyone can join the group.  * `members` - Only people with a Vimeo account can join the group. 
	Join string `json:"join"`
	// Who can add videos to the group.  Option descriptions:  * `all` - Anyone can add videos to the group.  * `members` - Only group members can add videos to the group. 
	Videos string `json:"videos"`
	// Who can access the group.  Option descriptions:  * `anybody` - Anyone can access the group. This privacy setting appears as `Public` on the Vimeo front end.  * `members` - Only group members can access the group. 
	View string `json:"view"`
}

type _GroupPrivacy GroupPrivacy

// NewGroupPrivacy instantiates a new GroupPrivacy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupPrivacy(comment string, invite string, join string, videos string, view string) *GroupPrivacy {
	this := GroupPrivacy{}
	this.Comment = comment
	this.Invite = invite
	this.Join = join
	this.Videos = videos
	this.View = view
	return &this
}

// NewGroupPrivacyWithDefaults instantiates a new GroupPrivacy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupPrivacyWithDefaults() *GroupPrivacy {
	this := GroupPrivacy{}
	return &this
}

// GetComment returns the Comment field value
func (o *GroupPrivacy) GetComment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Comment
}

// GetCommentOk returns a tuple with the Comment field value
// and a boolean to check if the value has been set.
func (o *GroupPrivacy) GetCommentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Comment, true
}

// SetComment sets field value
func (o *GroupPrivacy) SetComment(v string) {
	o.Comment = v
}

// GetInvite returns the Invite field value
func (o *GroupPrivacy) GetInvite() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Invite
}

// GetInviteOk returns a tuple with the Invite field value
// and a boolean to check if the value has been set.
func (o *GroupPrivacy) GetInviteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Invite, true
}

// SetInvite sets field value
func (o *GroupPrivacy) SetInvite(v string) {
	o.Invite = v
}

// GetJoin returns the Join field value
func (o *GroupPrivacy) GetJoin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Join
}

// GetJoinOk returns a tuple with the Join field value
// and a boolean to check if the value has been set.
func (o *GroupPrivacy) GetJoinOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Join, true
}

// SetJoin sets field value
func (o *GroupPrivacy) SetJoin(v string) {
	o.Join = v
}

// GetVideos returns the Videos field value
func (o *GroupPrivacy) GetVideos() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Videos
}

// GetVideosOk returns a tuple with the Videos field value
// and a boolean to check if the value has been set.
func (o *GroupPrivacy) GetVideosOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Videos, true
}

// SetVideos sets field value
func (o *GroupPrivacy) SetVideos(v string) {
	o.Videos = v
}

// GetView returns the View field value
func (o *GroupPrivacy) GetView() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.View
}

// GetViewOk returns a tuple with the View field value
// and a boolean to check if the value has been set.
func (o *GroupPrivacy) GetViewOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.View, true
}

// SetView sets field value
func (o *GroupPrivacy) SetView(v string) {
	o.View = v
}

func (o GroupPrivacy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GroupPrivacy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["comment"] = o.Comment
	toSerialize["invite"] = o.Invite
	toSerialize["join"] = o.Join
	toSerialize["videos"] = o.Videos
	toSerialize["view"] = o.View
	return toSerialize, nil
}

func (o *GroupPrivacy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"comment",
		"invite",
		"join",
		"videos",
		"view",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGroupPrivacy := _GroupPrivacy{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGroupPrivacy)

	if err != nil {
		return err
	}

	*o = GroupPrivacy(varGroupPrivacy)

	return err
}

type NullableGroupPrivacy struct {
	value *GroupPrivacy
	isSet bool
}

func (v NullableGroupPrivacy) Get() *GroupPrivacy {
	return v.value
}

func (v *NullableGroupPrivacy) Set(val *GroupPrivacy) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupPrivacy) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupPrivacy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupPrivacy(val *GroupPrivacy) *NullableGroupPrivacy {
	return &NullableGroupPrivacy{value: val, isSet: true}
}

func (v NullableGroupPrivacy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupPrivacy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


