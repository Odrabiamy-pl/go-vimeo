/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type OnDemandPurchasesAndRentalsAPI interface {

	/*
		CheckIfVodWasPurchasedAlt1 Check if a user has made a purchase or rental from an On Demand page

		This method determines whether the authenticated user has made a purchase or rental from the specified On Demand page.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param ondemandId The ID of the On Demand page.
		@return ApiCheckIfVodWasPurchasedAlt1Request
	*/
	CheckIfVodWasPurchasedAlt1(ctx context.Context, ondemandId float32) ApiCheckIfVodWasPurchasedAlt1Request

	// CheckIfVodWasPurchasedAlt1Execute executes the request
	//  @return OnDemandPage
	CheckIfVodWasPurchasedAlt1Execute(r ApiCheckIfVodWasPurchasedAlt1Request) (*OnDemandPage, *http.Response, error)

	/*
		GetVodPurchases Get all of the user's On Demand purchases and rentals

		This method returns every purchase and rental that the authenticated user has made across all On Demand pages.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param userId The ID of the user.
		@return ApiGetVodPurchasesRequest
	*/
	GetVodPurchases(ctx context.Context, userId int32) ApiGetVodPurchasesRequest

	// GetVodPurchasesExecute executes the request
	//  @return []OnDemandPage
	GetVodPurchasesExecute(r ApiGetVodPurchasesRequest) ([]OnDemandPage, *http.Response, error)

	/*
		GetVodPurchasesAlt1 Get all of the user's On Demand purchases and rentals

		This method returns every purchase and rental that the authenticated user has made across all On Demand pages.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiGetVodPurchasesAlt1Request
	*/
	GetVodPurchasesAlt1(ctx context.Context) ApiGetVodPurchasesAlt1Request

	// GetVodPurchasesAlt1Execute executes the request
	//  @return []OnDemandPage
	GetVodPurchasesAlt1Execute(r ApiGetVodPurchasesAlt1Request) ([]OnDemandPage, *http.Response, error)
}

// OnDemandPurchasesAndRentalsAPIService OnDemandPurchasesAndRentalsAPI service
type OnDemandPurchasesAndRentalsAPIService service

type ApiCheckIfVodWasPurchasedAlt1Request struct {
	ctx        context.Context
	ApiService OnDemandPurchasesAndRentalsAPI
	ondemandId float32
}

func (r ApiCheckIfVodWasPurchasedAlt1Request) Execute() (*OnDemandPage, *http.Response, error) {
	return r.ApiService.CheckIfVodWasPurchasedAlt1Execute(r)
}

/*
CheckIfVodWasPurchasedAlt1 Check if a user has made a purchase or rental from an On Demand page

This method determines whether the authenticated user has made a purchase or rental from the specified On Demand page.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ondemandId The ID of the On Demand page.
	@return ApiCheckIfVodWasPurchasedAlt1Request
*/
func (a *OnDemandPurchasesAndRentalsAPIService) CheckIfVodWasPurchasedAlt1(ctx context.Context, ondemandId float32) ApiCheckIfVodWasPurchasedAlt1Request {
	return ApiCheckIfVodWasPurchasedAlt1Request{
		ApiService: a,
		ctx:        ctx,
		ondemandId: ondemandId,
	}
}

// Execute executes the request
//
//	@return OnDemandPage
func (a *OnDemandPurchasesAndRentalsAPIService) CheckIfVodWasPurchasedAlt1Execute(r ApiCheckIfVodWasPurchasedAlt1Request) (*OnDemandPage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OnDemandPage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnDemandPurchasesAndRentalsAPIService.CheckIfVodWasPurchasedAlt1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/ondemand/purchases/{ondemand_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"ondemand_id"+"}", url.PathEscape(parameterValueToString(r.ondemandId, "ondemandId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.ondemand.page+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetVodPurchasesRequest struct {
	ctx        context.Context
	ApiService OnDemandPurchasesAndRentalsAPI
	userId     int32
	direction  *string
	filter     *string
	page       *float32
	perPage    *float32
	sort       *string
}

// The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.
func (r ApiGetVodPurchasesRequest) Direction(direction string) ApiGetVodPurchasesRequest {
	r.direction = &direction
	return r
}

// The type of the On Demand video to filter on.  Option descriptions:  * &#x60;all&#x60; - Filter by all video types.  * &#x60;expiring_soon&#x60; - Filter by videos that expire soon.  * &#x60;film&#x60; - Filter by film.  * &#x60;important&#x60; - Filter by pages that are about to expire.  * &#x60;purchased&#x60; - Filter by purchased videos.  * &#x60;rented&#x60; - Filter by rented videos.  * &#x60;series&#x60; - Filter by series.  * &#x60;subscription&#x60; - Filter by video subscription.  * &#x60;unwatched&#x60; - Filter by unwatched videos.  * &#x60;watched&#x60; - Filter by watched videos.
func (r ApiGetVodPurchasesRequest) Filter(filter string) ApiGetVodPurchasesRequest {
	r.filter = &filter
	return r
}

// The page number of the results to show.
func (r ApiGetVodPurchasesRequest) Page(page float32) ApiGetVodPurchasesRequest {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiGetVodPurchasesRequest) PerPage(perPage float32) ApiGetVodPurchasesRequest {
	r.perPage = &perPage
	return r
}

// The way to sort the results.  Option descriptions:  * &#x60;added&#x60; - Sort the results by most recently added video.  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;name&#x60; - Sort the results by video name.  * &#x60;purchase_time&#x60; - Sort the results by time of video purchase.  * &#x60;rating&#x60; - Sort the results by content rating.  * &#x60;release_date&#x60; - Sort the results by video release date.
func (r ApiGetVodPurchasesRequest) Sort(sort string) ApiGetVodPurchasesRequest {
	r.sort = &sort
	return r
}

func (r ApiGetVodPurchasesRequest) Execute() ([]OnDemandPage, *http.Response, error) {
	return r.ApiService.GetVodPurchasesExecute(r)
}

/*
GetVodPurchases Get all of the user's On Demand purchases and rentals

This method returns every purchase and rental that the authenticated user has made across all On Demand pages.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId The ID of the user.
	@return ApiGetVodPurchasesRequest
*/
func (a *OnDemandPurchasesAndRentalsAPIService) GetVodPurchases(ctx context.Context, userId int32) ApiGetVodPurchasesRequest {
	return ApiGetVodPurchasesRequest{
		ApiService: a,
		ctx:        ctx,
		userId:     userId,
	}
}

// Execute executes the request
//
//	@return []OnDemandPage
func (a *OnDemandPurchasesAndRentalsAPIService) GetVodPurchasesExecute(r ApiGetVodPurchasesRequest) ([]OnDemandPage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []OnDemandPage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnDemandPurchasesAndRentalsAPIService.GetVodPurchases")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/ondemand/purchases"
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.ondemand.page+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetVodPurchasesAlt1Request struct {
	ctx        context.Context
	ApiService OnDemandPurchasesAndRentalsAPI
	direction  *string
	filter     *string
	page       *float32
	perPage    *float32
	sort       *string
}

// The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.
func (r ApiGetVodPurchasesAlt1Request) Direction(direction string) ApiGetVodPurchasesAlt1Request {
	r.direction = &direction
	return r
}

// The type of the On Demand video to filter on.  Option descriptions:  * &#x60;all&#x60; - Filter by all video types.  * &#x60;expiring_soon&#x60; - Filter by videos that expire soon.  * &#x60;film&#x60; - Filter by film.  * &#x60;important&#x60; - Filter by pages that are about to expire.  * &#x60;purchased&#x60; - Filter by purchased videos.  * &#x60;rented&#x60; - Filter by rented videos.  * &#x60;series&#x60; - Filter by series.  * &#x60;subscription&#x60; - Filter by video subscription.  * &#x60;unwatched&#x60; - Filter by unwatched videos.  * &#x60;watched&#x60; - Filter by watched videos.
func (r ApiGetVodPurchasesAlt1Request) Filter(filter string) ApiGetVodPurchasesAlt1Request {
	r.filter = &filter
	return r
}

// The page number of the results to show.
func (r ApiGetVodPurchasesAlt1Request) Page(page float32) ApiGetVodPurchasesAlt1Request {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiGetVodPurchasesAlt1Request) PerPage(perPage float32) ApiGetVodPurchasesAlt1Request {
	r.perPage = &perPage
	return r
}

// The way to sort the results.  Option descriptions:  * &#x60;added&#x60; - Sort the results by most recently added video.  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;name&#x60; - Sort the results by video name.  * &#x60;purchase_time&#x60; - Sort the results by time of video purchase.  * &#x60;rating&#x60; - Sort the results by content rating.  * &#x60;release_date&#x60; - Sort the results by video release date.
func (r ApiGetVodPurchasesAlt1Request) Sort(sort string) ApiGetVodPurchasesAlt1Request {
	r.sort = &sort
	return r
}

func (r ApiGetVodPurchasesAlt1Request) Execute() ([]OnDemandPage, *http.Response, error) {
	return r.ApiService.GetVodPurchasesAlt1Execute(r)
}

/*
GetVodPurchasesAlt1 Get all of the user's On Demand purchases and rentals

This method returns every purchase and rental that the authenticated user has made across all On Demand pages.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetVodPurchasesAlt1Request
*/
func (a *OnDemandPurchasesAndRentalsAPIService) GetVodPurchasesAlt1(ctx context.Context) ApiGetVodPurchasesAlt1Request {
	return ApiGetVodPurchasesAlt1Request{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []OnDemandPage
func (a *OnDemandPurchasesAndRentalsAPIService) GetVodPurchasesAlt1Execute(r ApiGetVodPurchasesAlt1Request) ([]OnDemandPage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []OnDemandPage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnDemandPurchasesAndRentalsAPIService.GetVodPurchasesAlt1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/ondemand/purchases"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.ondemand.page+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
