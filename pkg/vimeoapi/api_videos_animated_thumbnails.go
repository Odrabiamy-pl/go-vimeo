/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type VideosAnimatedThumbnailsAPI interface {

	/*
	CreateAnimatedThumbset Create a set of animated thumbnails for a video

	This method creates a set of animated thumbnails for the specified video. Please note that you can't create more than four sets of animated thumbnails for the same video.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param videoId The ID of the video.
	@return ApiCreateAnimatedThumbsetRequest
	*/
	CreateAnimatedThumbset(ctx context.Context, videoId float32) ApiCreateAnimatedThumbsetRequest

	// CreateAnimatedThumbsetExecute executes the request
	//  @return AnimatedThumbset
	CreateAnimatedThumbsetExecute(r ApiCreateAnimatedThumbsetRequest) (*AnimatedThumbset, *http.Response, error)

	/*
	DeleteAnimatedThumbset Delete a set of animated thumbnails for a video

	This method deletes a set of animated thumbnails for the specified video.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param pictureId The UUID of the set of animated thumbnails.
	@param videoId The ID of the video.
	@return ApiDeleteAnimatedThumbsetRequest
	*/
	DeleteAnimatedThumbset(ctx context.Context, pictureId string, videoId float32) ApiDeleteAnimatedThumbsetRequest

	// DeleteAnimatedThumbsetExecute executes the request
	DeleteAnimatedThumbsetExecute(r ApiDeleteAnimatedThumbsetRequest) (*http.Response, error)

	/*
	GetAllAnimatedThumbset Get all the animated thumbnails of a video

	This method returns all the sets of animated thumbnails associated with the specified video. The authenticated user must be the owner of the video.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param videoId The ID of the video.
	@return ApiGetAllAnimatedThumbsetRequest
	*/
	GetAllAnimatedThumbset(ctx context.Context, videoId float32) ApiGetAllAnimatedThumbsetRequest

	// GetAllAnimatedThumbsetExecute executes the request
	//  @return []AnimatedThumbset
	GetAllAnimatedThumbsetExecute(r ApiGetAllAnimatedThumbsetRequest) ([]AnimatedThumbset, *http.Response, error)

	/*
	GetAnimatedThumbset Get a specific set of animated thumbnails

	This method returns a particular set of animated thumbnails associated with the specified video. The authenticated user must be the owner of the video.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param pictureId The UUID of the set of animated thumbnails.
	@param videoId The ID of the video.
	@return ApiGetAnimatedThumbsetRequest
	*/
	GetAnimatedThumbset(ctx context.Context, pictureId string, videoId float32) ApiGetAnimatedThumbsetRequest

	// GetAnimatedThumbsetExecute executes the request
	//  @return AnimatedThumbset
	GetAnimatedThumbsetExecute(r ApiGetAnimatedThumbsetRequest) (*AnimatedThumbset, *http.Response, error)

	/*
	GetAnimatedThumbsetStatus Get the status of a set of animated thumbnails

	This method returns the status of a particular set of animated thumbnails associated with the specified video. The status indicates whether the thumbnails are ready to use. The authenticated user must be the owner of the video.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param pictureId The UUID of the set of animated thumbnails.
	@param videoId The ID of the video.
	@return ApiGetAnimatedThumbsetStatusRequest
	*/
	GetAnimatedThumbsetStatus(ctx context.Context, pictureId string, videoId float32) ApiGetAnimatedThumbsetStatusRequest

	// GetAnimatedThumbsetStatusExecute executes the request
	//  @return AnimatedThumbset
	GetAnimatedThumbsetStatusExecute(r ApiGetAnimatedThumbsetStatusRequest) (*AnimatedThumbset, *http.Response, error)
}

// VideosAnimatedThumbnailsAPIService VideosAnimatedThumbnailsAPI service
type VideosAnimatedThumbnailsAPIService service

type ApiCreateAnimatedThumbsetRequest struct {
	ctx context.Context
	ApiService VideosAnimatedThumbnailsAPI
	videoId float32
	createAnimatedThumbsetRequest *CreateAnimatedThumbsetRequest
}

func (r ApiCreateAnimatedThumbsetRequest) CreateAnimatedThumbsetRequest(createAnimatedThumbsetRequest CreateAnimatedThumbsetRequest) ApiCreateAnimatedThumbsetRequest {
	r.createAnimatedThumbsetRequest = &createAnimatedThumbsetRequest
	return r
}

func (r ApiCreateAnimatedThumbsetRequest) Execute() (*AnimatedThumbset, *http.Response, error) {
	return r.ApiService.CreateAnimatedThumbsetExecute(r)
}

/*
CreateAnimatedThumbset Create a set of animated thumbnails for a video

This method creates a set of animated thumbnails for the specified video. Please note that you can't create more than four sets of animated thumbnails for the same video.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param videoId The ID of the video.
 @return ApiCreateAnimatedThumbsetRequest
*/
func (a *VideosAnimatedThumbnailsAPIService) CreateAnimatedThumbset(ctx context.Context, videoId float32) ApiCreateAnimatedThumbsetRequest {
	return ApiCreateAnimatedThumbsetRequest{
		ApiService: a,
		ctx: ctx,
		videoId: videoId,
	}
}

// Execute executes the request
//  @return AnimatedThumbset
func (a *VideosAnimatedThumbnailsAPIService) CreateAnimatedThumbsetExecute(r ApiCreateAnimatedThumbsetRequest) (*AnimatedThumbset, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AnimatedThumbset
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosAnimatedThumbnailsAPIService.CreateAnimatedThumbset")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos/{video_id}/animated_thumbsets"
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createAnimatedThumbsetRequest == nil {
		return localVarReturnValue, nil, reportError("createAnimatedThumbsetRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.vimeo.animatedthumbnails+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.animatedthumbnails+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createAnimatedThumbsetRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteAnimatedThumbsetRequest struct {
	ctx context.Context
	ApiService VideosAnimatedThumbnailsAPI
	pictureId string
	videoId float32
}

func (r ApiDeleteAnimatedThumbsetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteAnimatedThumbsetExecute(r)
}

/*
DeleteAnimatedThumbset Delete a set of animated thumbnails for a video

This method deletes a set of animated thumbnails for the specified video.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pictureId The UUID of the set of animated thumbnails.
 @param videoId The ID of the video.
 @return ApiDeleteAnimatedThumbsetRequest
*/
func (a *VideosAnimatedThumbnailsAPIService) DeleteAnimatedThumbset(ctx context.Context, pictureId string, videoId float32) ApiDeleteAnimatedThumbsetRequest {
	return ApiDeleteAnimatedThumbsetRequest{
		ApiService: a,
		ctx: ctx,
		pictureId: pictureId,
		videoId: videoId,
	}
}

// Execute executes the request
func (a *VideosAnimatedThumbnailsAPIService) DeleteAnimatedThumbsetExecute(r ApiDeleteAnimatedThumbsetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosAnimatedThumbnailsAPIService.DeleteAnimatedThumbset")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos/{video_id}/animated_thumbsets/{picture_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"picture_id"+"}", url.PathEscape(parameterValueToString(r.pictureId, "pictureId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAllAnimatedThumbsetRequest struct {
	ctx context.Context
	ApiService VideosAnimatedThumbnailsAPI
	videoId float32
	page *float32
	perPage *float32
}

// The page number of the results to show.
func (r ApiGetAllAnimatedThumbsetRequest) Page(page float32) ApiGetAllAnimatedThumbsetRequest {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiGetAllAnimatedThumbsetRequest) PerPage(perPage float32) ApiGetAllAnimatedThumbsetRequest {
	r.perPage = &perPage
	return r
}

func (r ApiGetAllAnimatedThumbsetRequest) Execute() ([]AnimatedThumbset, *http.Response, error) {
	return r.ApiService.GetAllAnimatedThumbsetExecute(r)
}

/*
GetAllAnimatedThumbset Get all the animated thumbnails of a video

This method returns all the sets of animated thumbnails associated with the specified video. The authenticated user must be the owner of the video.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param videoId The ID of the video.
 @return ApiGetAllAnimatedThumbsetRequest
*/
func (a *VideosAnimatedThumbnailsAPIService) GetAllAnimatedThumbset(ctx context.Context, videoId float32) ApiGetAllAnimatedThumbsetRequest {
	return ApiGetAllAnimatedThumbsetRequest{
		ApiService: a,
		ctx: ctx,
		videoId: videoId,
	}
}

// Execute executes the request
//  @return []AnimatedThumbset
func (a *VideosAnimatedThumbnailsAPIService) GetAllAnimatedThumbsetExecute(r ApiGetAllAnimatedThumbsetRequest) ([]AnimatedThumbset, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []AnimatedThumbset
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosAnimatedThumbnailsAPIService.GetAllAnimatedThumbset")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos/{video_id}/animated_thumbsets"
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.animatedthumbnails+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAnimatedThumbsetRequest struct {
	ctx context.Context
	ApiService VideosAnimatedThumbnailsAPI
	pictureId string
	videoId float32
}

func (r ApiGetAnimatedThumbsetRequest) Execute() (*AnimatedThumbset, *http.Response, error) {
	return r.ApiService.GetAnimatedThumbsetExecute(r)
}

/*
GetAnimatedThumbset Get a specific set of animated thumbnails

This method returns a particular set of animated thumbnails associated with the specified video. The authenticated user must be the owner of the video.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pictureId The UUID of the set of animated thumbnails.
 @param videoId The ID of the video.
 @return ApiGetAnimatedThumbsetRequest
*/
func (a *VideosAnimatedThumbnailsAPIService) GetAnimatedThumbset(ctx context.Context, pictureId string, videoId float32) ApiGetAnimatedThumbsetRequest {
	return ApiGetAnimatedThumbsetRequest{
		ApiService: a,
		ctx: ctx,
		pictureId: pictureId,
		videoId: videoId,
	}
}

// Execute executes the request
//  @return AnimatedThumbset
func (a *VideosAnimatedThumbnailsAPIService) GetAnimatedThumbsetExecute(r ApiGetAnimatedThumbsetRequest) (*AnimatedThumbset, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AnimatedThumbset
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosAnimatedThumbnailsAPIService.GetAnimatedThumbset")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos/{video_id}/animated_thumbsets/{picture_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"picture_id"+"}", url.PathEscape(parameterValueToString(r.pictureId, "pictureId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.animatedthumbnails+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAnimatedThumbsetStatusRequest struct {
	ctx context.Context
	ApiService VideosAnimatedThumbnailsAPI
	pictureId string
	videoId float32
}

func (r ApiGetAnimatedThumbsetStatusRequest) Execute() (*AnimatedThumbset, *http.Response, error) {
	return r.ApiService.GetAnimatedThumbsetStatusExecute(r)
}

/*
GetAnimatedThumbsetStatus Get the status of a set of animated thumbnails

This method returns the status of a particular set of animated thumbnails associated with the specified video. The status indicates whether the thumbnails are ready to use. The authenticated user must be the owner of the video.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pictureId The UUID of the set of animated thumbnails.
 @param videoId The ID of the video.
 @return ApiGetAnimatedThumbsetStatusRequest
*/
func (a *VideosAnimatedThumbnailsAPIService) GetAnimatedThumbsetStatus(ctx context.Context, pictureId string, videoId float32) ApiGetAnimatedThumbsetStatusRequest {
	return ApiGetAnimatedThumbsetStatusRequest{
		ApiService: a,
		ctx: ctx,
		pictureId: pictureId,
		videoId: videoId,
	}
}

// Execute executes the request
//  @return AnimatedThumbset
func (a *VideosAnimatedThumbnailsAPIService) GetAnimatedThumbsetStatusExecute(r ApiGetAnimatedThumbsetStatusRequest) (*AnimatedThumbset, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AnimatedThumbset
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosAnimatedThumbnailsAPIService.GetAnimatedThumbsetStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos/{video_id}/animated_thumbsets/{picture_id}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"picture_id"+"}", url.PathEscape(parameterValueToString(r.pictureId, "pictureId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.animatedthumbnails+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
