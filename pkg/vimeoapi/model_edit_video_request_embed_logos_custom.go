/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the EditVideoRequestEmbedLogosCustom type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EditVideoRequestEmbedLogosCustom{}

// EditVideoRequestEmbedLogosCustom struct for EditVideoRequestEmbedLogosCustom
type EditVideoRequestEmbedLogosCustom struct {
	// Whether to show the active custom logo on the embeddable player.
	Active *bool `json:"active,omitempty"`
	// The ID of the custom logo that will show on the emeddable player.
	Id NullableFloat32 `json:"id,omitempty"`
	// The URL that loads when the user clicks the custom logo.
	Link NullableString `json:"link,omitempty"`
	// Whether the custom logo is always visible on the embeddable player (`true`) or whether the logo appears and disappears with the rest of the UI (`false`).
	Sticky *bool `json:"sticky,omitempty"`
}

// NewEditVideoRequestEmbedLogosCustom instantiates a new EditVideoRequestEmbedLogosCustom object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditVideoRequestEmbedLogosCustom() *EditVideoRequestEmbedLogosCustom {
	this := EditVideoRequestEmbedLogosCustom{}
	return &this
}

// NewEditVideoRequestEmbedLogosCustomWithDefaults instantiates a new EditVideoRequestEmbedLogosCustom object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditVideoRequestEmbedLogosCustomWithDefaults() *EditVideoRequestEmbedLogosCustom {
	this := EditVideoRequestEmbedLogosCustom{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *EditVideoRequestEmbedLogosCustom) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditVideoRequestEmbedLogosCustom) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *EditVideoRequestEmbedLogosCustom) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *EditVideoRequestEmbedLogosCustom) SetActive(v bool) {
	o.Active = &v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EditVideoRequestEmbedLogosCustom) GetId() float32 {
	if o == nil || IsNil(o.Id.Get()) {
		var ret float32
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EditVideoRequestEmbedLogosCustom) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *EditVideoRequestEmbedLogosCustom) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableFloat32 and assigns it to the Id field.
func (o *EditVideoRequestEmbedLogosCustom) SetId(v float32) {
	o.Id.Set(&v)
}

// SetIdNil sets the value for Id to be an explicit nil
func (o *EditVideoRequestEmbedLogosCustom) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *EditVideoRequestEmbedLogosCustom) UnsetId() {
	o.Id.Unset()
}

// GetLink returns the Link field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EditVideoRequestEmbedLogosCustom) GetLink() string {
	if o == nil || IsNil(o.Link.Get()) {
		var ret string
		return ret
	}
	return *o.Link.Get()
}

// GetLinkOk returns a tuple with the Link field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EditVideoRequestEmbedLogosCustom) GetLinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Link.Get(), o.Link.IsSet()
}

// HasLink returns a boolean if a field has been set.
func (o *EditVideoRequestEmbedLogosCustom) HasLink() bool {
	if o != nil && o.Link.IsSet() {
		return true
	}

	return false
}

// SetLink gets a reference to the given NullableString and assigns it to the Link field.
func (o *EditVideoRequestEmbedLogosCustom) SetLink(v string) {
	o.Link.Set(&v)
}

// SetLinkNil sets the value for Link to be an explicit nil
func (o *EditVideoRequestEmbedLogosCustom) SetLinkNil() {
	o.Link.Set(nil)
}

// UnsetLink ensures that no value is present for Link, not even an explicit nil
func (o *EditVideoRequestEmbedLogosCustom) UnsetLink() {
	o.Link.Unset()
}

// GetSticky returns the Sticky field value if set, zero value otherwise.
func (o *EditVideoRequestEmbedLogosCustom) GetSticky() bool {
	if o == nil || IsNil(o.Sticky) {
		var ret bool
		return ret
	}
	return *o.Sticky
}

// GetStickyOk returns a tuple with the Sticky field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditVideoRequestEmbedLogosCustom) GetStickyOk() (*bool, bool) {
	if o == nil || IsNil(o.Sticky) {
		return nil, false
	}
	return o.Sticky, true
}

// HasSticky returns a boolean if a field has been set.
func (o *EditVideoRequestEmbedLogosCustom) HasSticky() bool {
	if o != nil && !IsNil(o.Sticky) {
		return true
	}

	return false
}

// SetSticky gets a reference to the given bool and assigns it to the Sticky field.
func (o *EditVideoRequestEmbedLogosCustom) SetSticky(v bool) {
	o.Sticky = &v
}

func (o EditVideoRequestEmbedLogosCustom) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EditVideoRequestEmbedLogosCustom) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Link.IsSet() {
		toSerialize["link"] = o.Link.Get()
	}
	if !IsNil(o.Sticky) {
		toSerialize["sticky"] = o.Sticky
	}
	return toSerialize, nil
}

type NullableEditVideoRequestEmbedLogosCustom struct {
	value *EditVideoRequestEmbedLogosCustom
	isSet bool
}

func (v NullableEditVideoRequestEmbedLogosCustom) Get() *EditVideoRequestEmbedLogosCustom {
	return v.value
}

func (v *NullableEditVideoRequestEmbedLogosCustom) Set(val *EditVideoRequestEmbedLogosCustom) {
	v.value = val
	v.isSet = true
}

func (v NullableEditVideoRequestEmbedLogosCustom) IsSet() bool {
	return v.isSet
}

func (v *NullableEditVideoRequestEmbedLogosCustom) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditVideoRequestEmbedLogosCustom(val *EditVideoRequestEmbedLogosCustom) *NullableEditVideoRequestEmbedLogosCustom {
	return &NullableEditVideoRequestEmbedLogosCustom{value: val, isSet: true}
}

func (v NullableEditVideoRequestEmbedLogosCustom) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditVideoRequestEmbedLogosCustom) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
