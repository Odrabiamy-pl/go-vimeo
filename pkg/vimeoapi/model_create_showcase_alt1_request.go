/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateShowcaseAlt1Request type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateShowcaseAlt1Request{}

// CreateShowcaseAlt1Request struct for CreateShowcaseAlt1Request
type CreateShowcaseAlt1Request struct {
	// The hexadecimal code for the color of the player buttons and showcase controls.
	BrandColor *string `json:"brand_color,omitempty"`
	// The description of the showcase.
	Description *string `json:"description,omitempty"`
	// Whether the showcase should be hidden from Vimeo when unlisted.
	HideFromVimeo *bool `json:"hide_from_vimeo,omitempty"`
	// Whether to hide Vimeo navigation when displaying the showcase.
	HideNav *bool `json:"hide_nav,omitempty"`
	// Whether to include the upcoming event in the showcase.
	HideUpcoming *bool `json:"hide_upcoming,omitempty"`
	// The type of layout for presenting the showcase.  Option descriptions:  * `grid` - The videos appear in a grid.  * `player` - The videos appear in the player. 
	Layout *string `json:"layout,omitempty"`
	// The name of the showcase.
	Name string `json:"name"`
	// The showcase's password. This field is required only when **privacy** is `password`.
	Password *string `json:"password,omitempty"`
	// The privacy level of the showcase.  Option descriptions:  * `anybody` - Anyone can access the showcase, either on Vimeo or through an embed.  * `embed_only` - The showcase doesn't appear on Vimeo, but it can be embedded on other sites.  * `nobody` - No one can access the showcase, including the authenticated user.  * `password` - Only those with the password can access the showcase.  * `team` - Only members of the authenticated user's team can access the showcase.  * `unlisted` - The showcase can't be accessed if the URL omits its unlisted hash. 
	Privacy *string `json:"privacy,omitempty"`
	// Whether showcase videos use the review mode URL.
	ReviewMode *bool `json:"review_mode,omitempty"`
	// The default sort order of the videos as they appear in the showcase.  Option descriptions:  * `added_first` - The videos appear according to when they were added to the showcase, with the most recently added first.  * `added_last` - The videos appear according to when they were added to the showcase, with the most recently added last.  * `alphabetical` - The videos appear alphabetically by their title.  * `arranged` - The videos appear as arranged by the owner of the showcase.  * `comments` - The videos appear according to their number of comments.  * `likes` - The videos appear according to their number of likes.  * `newest` - The videos appear in chronological order with the newest first.  * `oldest` - The videos appear in chronological order with the oldest first.  * `plays` - The videos appear according to their number of plays. 
	Sort *string `json:"sort,omitempty"`
	// The color theme of the showcase.  Option descriptions:  * `dark` - The showcase uses the dark theme.  * `standard` - The showcase uses the standard theme. 
	Theme *string `json:"theme,omitempty"`
}

type _CreateShowcaseAlt1Request CreateShowcaseAlt1Request

// NewCreateShowcaseAlt1Request instantiates a new CreateShowcaseAlt1Request object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateShowcaseAlt1Request(name string) *CreateShowcaseAlt1Request {
	this := CreateShowcaseAlt1Request{}
	this.Name = name
	return &this
}

// NewCreateShowcaseAlt1RequestWithDefaults instantiates a new CreateShowcaseAlt1Request object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateShowcaseAlt1RequestWithDefaults() *CreateShowcaseAlt1Request {
	this := CreateShowcaseAlt1Request{}
	return &this
}

// GetBrandColor returns the BrandColor field value if set, zero value otherwise.
func (o *CreateShowcaseAlt1Request) GetBrandColor() string {
	if o == nil || IsNil(o.BrandColor) {
		var ret string
		return ret
	}
	return *o.BrandColor
}

// GetBrandColorOk returns a tuple with the BrandColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateShowcaseAlt1Request) GetBrandColorOk() (*string, bool) {
	if o == nil || IsNil(o.BrandColor) {
		return nil, false
	}
	return o.BrandColor, true
}

// HasBrandColor returns a boolean if a field has been set.
func (o *CreateShowcaseAlt1Request) HasBrandColor() bool {
	if o != nil && !IsNil(o.BrandColor) {
		return true
	}

	return false
}

// SetBrandColor gets a reference to the given string and assigns it to the BrandColor field.
func (o *CreateShowcaseAlt1Request) SetBrandColor(v string) {
	o.BrandColor = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateShowcaseAlt1Request) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateShowcaseAlt1Request) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateShowcaseAlt1Request) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateShowcaseAlt1Request) SetDescription(v string) {
	o.Description = &v
}

// GetHideFromVimeo returns the HideFromVimeo field value if set, zero value otherwise.
func (o *CreateShowcaseAlt1Request) GetHideFromVimeo() bool {
	if o == nil || IsNil(o.HideFromVimeo) {
		var ret bool
		return ret
	}
	return *o.HideFromVimeo
}

// GetHideFromVimeoOk returns a tuple with the HideFromVimeo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateShowcaseAlt1Request) GetHideFromVimeoOk() (*bool, bool) {
	if o == nil || IsNil(o.HideFromVimeo) {
		return nil, false
	}
	return o.HideFromVimeo, true
}

// HasHideFromVimeo returns a boolean if a field has been set.
func (o *CreateShowcaseAlt1Request) HasHideFromVimeo() bool {
	if o != nil && !IsNil(o.HideFromVimeo) {
		return true
	}

	return false
}

// SetHideFromVimeo gets a reference to the given bool and assigns it to the HideFromVimeo field.
func (o *CreateShowcaseAlt1Request) SetHideFromVimeo(v bool) {
	o.HideFromVimeo = &v
}

// GetHideNav returns the HideNav field value if set, zero value otherwise.
func (o *CreateShowcaseAlt1Request) GetHideNav() bool {
	if o == nil || IsNil(o.HideNav) {
		var ret bool
		return ret
	}
	return *o.HideNav
}

// GetHideNavOk returns a tuple with the HideNav field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateShowcaseAlt1Request) GetHideNavOk() (*bool, bool) {
	if o == nil || IsNil(o.HideNav) {
		return nil, false
	}
	return o.HideNav, true
}

// HasHideNav returns a boolean if a field has been set.
func (o *CreateShowcaseAlt1Request) HasHideNav() bool {
	if o != nil && !IsNil(o.HideNav) {
		return true
	}

	return false
}

// SetHideNav gets a reference to the given bool and assigns it to the HideNav field.
func (o *CreateShowcaseAlt1Request) SetHideNav(v bool) {
	o.HideNav = &v
}

// GetHideUpcoming returns the HideUpcoming field value if set, zero value otherwise.
func (o *CreateShowcaseAlt1Request) GetHideUpcoming() bool {
	if o == nil || IsNil(o.HideUpcoming) {
		var ret bool
		return ret
	}
	return *o.HideUpcoming
}

// GetHideUpcomingOk returns a tuple with the HideUpcoming field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateShowcaseAlt1Request) GetHideUpcomingOk() (*bool, bool) {
	if o == nil || IsNil(o.HideUpcoming) {
		return nil, false
	}
	return o.HideUpcoming, true
}

// HasHideUpcoming returns a boolean if a field has been set.
func (o *CreateShowcaseAlt1Request) HasHideUpcoming() bool {
	if o != nil && !IsNil(o.HideUpcoming) {
		return true
	}

	return false
}

// SetHideUpcoming gets a reference to the given bool and assigns it to the HideUpcoming field.
func (o *CreateShowcaseAlt1Request) SetHideUpcoming(v bool) {
	o.HideUpcoming = &v
}

// GetLayout returns the Layout field value if set, zero value otherwise.
func (o *CreateShowcaseAlt1Request) GetLayout() string {
	if o == nil || IsNil(o.Layout) {
		var ret string
		return ret
	}
	return *o.Layout
}

// GetLayoutOk returns a tuple with the Layout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateShowcaseAlt1Request) GetLayoutOk() (*string, bool) {
	if o == nil || IsNil(o.Layout) {
		return nil, false
	}
	return o.Layout, true
}

// HasLayout returns a boolean if a field has been set.
func (o *CreateShowcaseAlt1Request) HasLayout() bool {
	if o != nil && !IsNil(o.Layout) {
		return true
	}

	return false
}

// SetLayout gets a reference to the given string and assigns it to the Layout field.
func (o *CreateShowcaseAlt1Request) SetLayout(v string) {
	o.Layout = &v
}

// GetName returns the Name field value
func (o *CreateShowcaseAlt1Request) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateShowcaseAlt1Request) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateShowcaseAlt1Request) SetName(v string) {
	o.Name = v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *CreateShowcaseAlt1Request) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateShowcaseAlt1Request) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *CreateShowcaseAlt1Request) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *CreateShowcaseAlt1Request) SetPassword(v string) {
	o.Password = &v
}

// GetPrivacy returns the Privacy field value if set, zero value otherwise.
func (o *CreateShowcaseAlt1Request) GetPrivacy() string {
	if o == nil || IsNil(o.Privacy) {
		var ret string
		return ret
	}
	return *o.Privacy
}

// GetPrivacyOk returns a tuple with the Privacy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateShowcaseAlt1Request) GetPrivacyOk() (*string, bool) {
	if o == nil || IsNil(o.Privacy) {
		return nil, false
	}
	return o.Privacy, true
}

// HasPrivacy returns a boolean if a field has been set.
func (o *CreateShowcaseAlt1Request) HasPrivacy() bool {
	if o != nil && !IsNil(o.Privacy) {
		return true
	}

	return false
}

// SetPrivacy gets a reference to the given string and assigns it to the Privacy field.
func (o *CreateShowcaseAlt1Request) SetPrivacy(v string) {
	o.Privacy = &v
}

// GetReviewMode returns the ReviewMode field value if set, zero value otherwise.
func (o *CreateShowcaseAlt1Request) GetReviewMode() bool {
	if o == nil || IsNil(o.ReviewMode) {
		var ret bool
		return ret
	}
	return *o.ReviewMode
}

// GetReviewModeOk returns a tuple with the ReviewMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateShowcaseAlt1Request) GetReviewModeOk() (*bool, bool) {
	if o == nil || IsNil(o.ReviewMode) {
		return nil, false
	}
	return o.ReviewMode, true
}

// HasReviewMode returns a boolean if a field has been set.
func (o *CreateShowcaseAlt1Request) HasReviewMode() bool {
	if o != nil && !IsNil(o.ReviewMode) {
		return true
	}

	return false
}

// SetReviewMode gets a reference to the given bool and assigns it to the ReviewMode field.
func (o *CreateShowcaseAlt1Request) SetReviewMode(v bool) {
	o.ReviewMode = &v
}

// GetSort returns the Sort field value if set, zero value otherwise.
func (o *CreateShowcaseAlt1Request) GetSort() string {
	if o == nil || IsNil(o.Sort) {
		var ret string
		return ret
	}
	return *o.Sort
}

// GetSortOk returns a tuple with the Sort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateShowcaseAlt1Request) GetSortOk() (*string, bool) {
	if o == nil || IsNil(o.Sort) {
		return nil, false
	}
	return o.Sort, true
}

// HasSort returns a boolean if a field has been set.
func (o *CreateShowcaseAlt1Request) HasSort() bool {
	if o != nil && !IsNil(o.Sort) {
		return true
	}

	return false
}

// SetSort gets a reference to the given string and assigns it to the Sort field.
func (o *CreateShowcaseAlt1Request) SetSort(v string) {
	o.Sort = &v
}

// GetTheme returns the Theme field value if set, zero value otherwise.
func (o *CreateShowcaseAlt1Request) GetTheme() string {
	if o == nil || IsNil(o.Theme) {
		var ret string
		return ret
	}
	return *o.Theme
}

// GetThemeOk returns a tuple with the Theme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateShowcaseAlt1Request) GetThemeOk() (*string, bool) {
	if o == nil || IsNil(o.Theme) {
		return nil, false
	}
	return o.Theme, true
}

// HasTheme returns a boolean if a field has been set.
func (o *CreateShowcaseAlt1Request) HasTheme() bool {
	if o != nil && !IsNil(o.Theme) {
		return true
	}

	return false
}

// SetTheme gets a reference to the given string and assigns it to the Theme field.
func (o *CreateShowcaseAlt1Request) SetTheme(v string) {
	o.Theme = &v
}

func (o CreateShowcaseAlt1Request) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateShowcaseAlt1Request) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BrandColor) {
		toSerialize["brand_color"] = o.BrandColor
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.HideFromVimeo) {
		toSerialize["hide_from_vimeo"] = o.HideFromVimeo
	}
	if !IsNil(o.HideNav) {
		toSerialize["hide_nav"] = o.HideNav
	}
	if !IsNil(o.HideUpcoming) {
		toSerialize["hide_upcoming"] = o.HideUpcoming
	}
	if !IsNil(o.Layout) {
		toSerialize["layout"] = o.Layout
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.Privacy) {
		toSerialize["privacy"] = o.Privacy
	}
	if !IsNil(o.ReviewMode) {
		toSerialize["review_mode"] = o.ReviewMode
	}
	if !IsNil(o.Sort) {
		toSerialize["sort"] = o.Sort
	}
	if !IsNil(o.Theme) {
		toSerialize["theme"] = o.Theme
	}
	return toSerialize, nil
}

func (o *CreateShowcaseAlt1Request) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateShowcaseAlt1Request := _CreateShowcaseAlt1Request{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateShowcaseAlt1Request)

	if err != nil {
		return err
	}

	*o = CreateShowcaseAlt1Request(varCreateShowcaseAlt1Request)

	return err
}

type NullableCreateShowcaseAlt1Request struct {
	value *CreateShowcaseAlt1Request
	isSet bool
}

func (v NullableCreateShowcaseAlt1Request) Get() *CreateShowcaseAlt1Request {
	return v.value
}

func (v *NullableCreateShowcaseAlt1Request) Set(val *CreateShowcaseAlt1Request) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateShowcaseAlt1Request) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateShowcaseAlt1Request) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateShowcaseAlt1Request(val *CreateShowcaseAlt1Request) *NullableCreateShowcaseAlt1Request {
	return &NullableCreateShowcaseAlt1Request{value: val, isSet: true}
}

func (v NullableCreateShowcaseAlt1Request) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateShowcaseAlt1Request) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


