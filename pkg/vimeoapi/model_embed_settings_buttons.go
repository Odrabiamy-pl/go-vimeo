/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the EmbedSettingsButtons type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmbedSettingsButtons{}

// EmbedSettingsButtons A collection of information about the buttons that appear on the interface of the embeddable player.
type EmbedSettingsButtons struct {
	// Whether the `embed` button appears in the embeddable player.
	Embed bool `json:"embed"`
	// Whether the `fullscreen` button appears in the embeddable player.
	Fullscreen bool `json:"fullscreen"`
	// Whether the `HD` button appears in the embeddable player.
	Hd bool `json:"hd"`
	// Whether the `like` button appears in the embeddable player.
	Like bool `json:"like"`
	// Whether the reaction button appears in the embeddable player.
	Reaction NullableBool `json:"reaction"`
	// Whether the `scaling` button appears in the embeddable player.
	Scaling bool `json:"scaling"`
	// Whether the `share` button appears in the embeddable player.
	Share bool `json:"share"`
	// Whether the `watch later` button appears in the embeddable player.
	Watchlater bool `json:"watchlater"`
}

// NewEmbedSettingsButtons instantiates a new EmbedSettingsButtons object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmbedSettingsButtons(embed bool, fullscreen bool, hd bool, like bool, reaction NullableBool, scaling bool, share bool, watchlater bool) *EmbedSettingsButtons {
	this := EmbedSettingsButtons{}
	this.Embed = embed
	this.Fullscreen = fullscreen
	this.Hd = hd
	this.Like = like
	this.Reaction = reaction
	this.Scaling = scaling
	this.Share = share
	this.Watchlater = watchlater
	return &this
}

// NewEmbedSettingsButtonsWithDefaults instantiates a new EmbedSettingsButtons object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmbedSettingsButtonsWithDefaults() *EmbedSettingsButtons {
	this := EmbedSettingsButtons{}
	return &this
}

// GetEmbed returns the Embed field value
func (o *EmbedSettingsButtons) GetEmbed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Embed
}

// GetEmbedOk returns a tuple with the Embed field value
// and a boolean to check if the value has been set.
func (o *EmbedSettingsButtons) GetEmbedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Embed, true
}

// SetEmbed sets field value
func (o *EmbedSettingsButtons) SetEmbed(v bool) {
	o.Embed = v
}

// GetFullscreen returns the Fullscreen field value
func (o *EmbedSettingsButtons) GetFullscreen() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Fullscreen
}

// GetFullscreenOk returns a tuple with the Fullscreen field value
// and a boolean to check if the value has been set.
func (o *EmbedSettingsButtons) GetFullscreenOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fullscreen, true
}

// SetFullscreen sets field value
func (o *EmbedSettingsButtons) SetFullscreen(v bool) {
	o.Fullscreen = v
}

// GetHd returns the Hd field value
func (o *EmbedSettingsButtons) GetHd() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Hd
}

// GetHdOk returns a tuple with the Hd field value
// and a boolean to check if the value has been set.
func (o *EmbedSettingsButtons) GetHdOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hd, true
}

// SetHd sets field value
func (o *EmbedSettingsButtons) SetHd(v bool) {
	o.Hd = v
}

// GetLike returns the Like field value
func (o *EmbedSettingsButtons) GetLike() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Like
}

// GetLikeOk returns a tuple with the Like field value
// and a boolean to check if the value has been set.
func (o *EmbedSettingsButtons) GetLikeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Like, true
}

// SetLike sets field value
func (o *EmbedSettingsButtons) SetLike(v bool) {
	o.Like = v
}

// GetReaction returns the Reaction field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *EmbedSettingsButtons) GetReaction() bool {
	if o == nil || o.Reaction.Get() == nil {
		var ret bool
		return ret
	}

	return *o.Reaction.Get()
}

// GetReactionOk returns a tuple with the Reaction field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmbedSettingsButtons) GetReactionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reaction.Get(), o.Reaction.IsSet()
}

// SetReaction sets field value
func (o *EmbedSettingsButtons) SetReaction(v bool) {
	o.Reaction.Set(&v)
}

// GetScaling returns the Scaling field value
func (o *EmbedSettingsButtons) GetScaling() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Scaling
}

// GetScalingOk returns a tuple with the Scaling field value
// and a boolean to check if the value has been set.
func (o *EmbedSettingsButtons) GetScalingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scaling, true
}

// SetScaling sets field value
func (o *EmbedSettingsButtons) SetScaling(v bool) {
	o.Scaling = v
}

// GetShare returns the Share field value
func (o *EmbedSettingsButtons) GetShare() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Share
}

// GetShareOk returns a tuple with the Share field value
// and a boolean to check if the value has been set.
func (o *EmbedSettingsButtons) GetShareOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Share, true
}

// SetShare sets field value
func (o *EmbedSettingsButtons) SetShare(v bool) {
	o.Share = v
}

// GetWatchlater returns the Watchlater field value
func (o *EmbedSettingsButtons) GetWatchlater() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Watchlater
}

// GetWatchlaterOk returns a tuple with the Watchlater field value
// and a boolean to check if the value has been set.
func (o *EmbedSettingsButtons) GetWatchlaterOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Watchlater, true
}

// SetWatchlater sets field value
func (o *EmbedSettingsButtons) SetWatchlater(v bool) {
	o.Watchlater = v
}

func (o EmbedSettingsButtons) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmbedSettingsButtons) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["embed"] = o.Embed
	toSerialize["fullscreen"] = o.Fullscreen
	toSerialize["hd"] = o.Hd
	toSerialize["like"] = o.Like
	toSerialize["reaction"] = o.Reaction.Get()
	toSerialize["scaling"] = o.Scaling
	toSerialize["share"] = o.Share
	toSerialize["watchlater"] = o.Watchlater
	return toSerialize, nil
}

type NullableEmbedSettingsButtons struct {
	value *EmbedSettingsButtons
	isSet bool
}

func (v NullableEmbedSettingsButtons) Get() *EmbedSettingsButtons {
	return v.value
}

func (v *NullableEmbedSettingsButtons) Set(val *EmbedSettingsButtons) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbedSettingsButtons) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbedSettingsButtons) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbedSettingsButtons(val *EmbedSettingsButtons) *NullableEmbedSettingsButtons {
	return &NullableEmbedSettingsButtons{value: val, isSet: true}
}

func (v NullableEmbedSettingsButtons) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbedSettingsButtons) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
