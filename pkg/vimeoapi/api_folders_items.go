/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type FoldersItemsAPI interface {

	/*
		DeleteFolderItemsAlt1 Remove items from a folder

		This method removes all items from the specified folder.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param projectId The ID of the folder.
		@return ApiDeleteFolderItemsAlt1Request
	*/
	DeleteFolderItemsAlt1(ctx context.Context, projectId float32) ApiDeleteFolderItemsAlt1Request

	// DeleteFolderItemsAlt1Execute executes the request
	DeleteFolderItemsAlt1Execute(r ApiDeleteFolderItemsAlt1Request) (*http.Response, error)

	/*
		GetFolderItems Get all the items in a folder

		This method returns every item that belongs to the specified folder.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param projectId The ID of the folder.
		@return ApiGetFolderItemsRequest
	*/
	GetFolderItems(ctx context.Context, projectId float32) ApiGetFolderItemsRequest

	// GetFolderItemsExecute executes the request
	GetFolderItemsExecute(r ApiGetFolderItemsRequest) (*http.Response, error)

	/*
		GetUserFolderItems Get all the items in a folder

		This method returns every item that belongs to the specified folder.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param projectId The ID of the folder.
		@param userId The ID of the user.
		@return ApiGetUserFolderItemsRequest
	*/
	GetUserFolderItems(ctx context.Context, projectId float32, userId int32) ApiGetUserFolderItemsRequest

	// GetUserFolderItemsExecute executes the request
	GetUserFolderItemsExecute(r ApiGetUserFolderItemsRequest) (*http.Response, error)
}

// FoldersItemsAPIService FoldersItemsAPI service
type FoldersItemsAPIService service

type ApiDeleteFolderItemsAlt1Request struct {
	ctx               context.Context
	ApiService        FoldersItemsAPI
	projectId         float32
	uris              *string
	shouldDeleteItems *bool
}

// A comma-separated list of video or event URIs to remove.
func (r ApiDeleteFolderItemsAlt1Request) Uris(uris string) ApiDeleteFolderItemsAlt1Request {
	r.uris = &uris
	return r
}

// Whether to delete the items when removing them from the folder.
func (r ApiDeleteFolderItemsAlt1Request) ShouldDeleteItems(shouldDeleteItems bool) ApiDeleteFolderItemsAlt1Request {
	r.shouldDeleteItems = &shouldDeleteItems
	return r
}

func (r ApiDeleteFolderItemsAlt1Request) Execute() (*http.Response, error) {
	return r.ApiService.DeleteFolderItemsAlt1Execute(r)
}

/*
DeleteFolderItemsAlt1 Remove items from a folder

This method removes all items from the specified folder.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param projectId The ID of the folder.
	@return ApiDeleteFolderItemsAlt1Request
*/
func (a *FoldersItemsAPIService) DeleteFolderItemsAlt1(ctx context.Context, projectId float32) ApiDeleteFolderItemsAlt1Request {
	return ApiDeleteFolderItemsAlt1Request{
		ApiService: a,
		ctx:        ctx,
		projectId:  projectId,
	}
}

// Execute executes the request
func (a *FoldersItemsAPIService) DeleteFolderItemsAlt1Execute(r ApiDeleteFolderItemsAlt1Request) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FoldersItemsAPIService.DeleteFolderItemsAlt1")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/projects/{project_id}/items"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.uris == nil {
		return nil, reportError("uris is required and must be specified")
	}

	if r.shouldDeleteItems != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "should_delete_items", r.shouldDeleteItems, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "uris", r.uris, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetFolderItemsRequest struct {
	ctx        context.Context
	ApiService FoldersItemsAPI
	projectId  float32
	direction  *string
	filter     *string
	page       *float32
	perPage    *float32
	sort       *string
}

// The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.
func (r ApiGetFolderItemsRequest) Direction(direction string) ApiGetFolderItemsRequest {
	r.direction = &direction
	return r
}

// The attribute by which to filter the results.  Option descriptions:  * &#x60;folder&#x60; - Filter the results by folder.  * &#x60;live_event&#x60; - Filter the results by event.  * &#x60;video&#x60; - Filter the results by video.
func (r ApiGetFolderItemsRequest) Filter(filter string) ApiGetFolderItemsRequest {
	r.filter = &filter
	return r
}

// The page number of the results to show.
func (r ApiGetFolderItemsRequest) Page(page float32) ApiGetFolderItemsRequest {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiGetFolderItemsRequest) PerPage(perPage float32) ApiGetFolderItemsRequest {
	r.perPage = &perPage
	return r
}

// The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sort order.  * &#x60;duration&#x60; - Sort the results by duration. Items without a duration, namely events and folders, are grouped by type in ascending alphabetical order, with events first.  * &#x60;last_user_action_event_date&#x60; - Sort the results by the date of the last user action.
func (r ApiGetFolderItemsRequest) Sort(sort string) ApiGetFolderItemsRequest {
	r.sort = &sort
	return r
}

func (r ApiGetFolderItemsRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetFolderItemsExecute(r)
}

/*
GetFolderItems Get all the items in a folder

This method returns every item that belongs to the specified folder.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param projectId The ID of the folder.
	@return ApiGetFolderItemsRequest
*/
func (a *FoldersItemsAPIService) GetFolderItems(ctx context.Context, projectId float32) ApiGetFolderItemsRequest {
	return ApiGetFolderItemsRequest{
		ApiService: a,
		ctx:        ctx,
		projectId:  projectId,
	}
}

// Execute executes the request
func (a *FoldersItemsAPIService) GetFolderItemsExecute(r ApiGetFolderItemsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FoldersItemsAPIService.GetFolderItems")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/projects/{project_id}/items"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetUserFolderItemsRequest struct {
	ctx        context.Context
	ApiService FoldersItemsAPI
	projectId  float32
	userId     int32
	direction  *string
	filter     *string
	page       *float32
	perPage    *float32
	sort       *string
}

// The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.
func (r ApiGetUserFolderItemsRequest) Direction(direction string) ApiGetUserFolderItemsRequest {
	r.direction = &direction
	return r
}

// The attribute by which to filter the results.  Option descriptions:  * &#x60;folder&#x60; - Filter the results by folder.  * &#x60;live_event&#x60; - Filter the results by event.  * &#x60;video&#x60; - Filter the results by video.
func (r ApiGetUserFolderItemsRequest) Filter(filter string) ApiGetUserFolderItemsRequest {
	r.filter = &filter
	return r
}

// The page number of the results to show.
func (r ApiGetUserFolderItemsRequest) Page(page float32) ApiGetUserFolderItemsRequest {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiGetUserFolderItemsRequest) PerPage(perPage float32) ApiGetUserFolderItemsRequest {
	r.perPage = &perPage
	return r
}

// The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sort order.  * &#x60;duration&#x60; - Sort the results by duration. Items without a duration, namely events and folders, are grouped by type in ascending alphabetical order, with events first.  * &#x60;last_user_action_event_date&#x60; - Sort the results by the date of the last user action.
func (r ApiGetUserFolderItemsRequest) Sort(sort string) ApiGetUserFolderItemsRequest {
	r.sort = &sort
	return r
}

func (r ApiGetUserFolderItemsRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetUserFolderItemsExecute(r)
}

/*
GetUserFolderItems Get all the items in a folder

This method returns every item that belongs to the specified folder.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param projectId The ID of the folder.
	@param userId The ID of the user.
	@return ApiGetUserFolderItemsRequest
*/
func (a *FoldersItemsAPIService) GetUserFolderItems(ctx context.Context, projectId float32, userId int32) ApiGetUserFolderItemsRequest {
	return ApiGetUserFolderItemsRequest{
		ApiService: a,
		ctx:        ctx,
		projectId:  projectId,
		userId:     userId,
	}
}

// Execute executes the request
func (a *FoldersItemsAPIService) GetUserFolderItemsExecute(r ApiGetUserFolderItemsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FoldersItemsAPIService.GetUserFolderItems")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/projects/{project_id}/items"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
