/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AnalyticsMetadataConnections type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnalyticsMetadataConnections{}

// AnalyticsMetadataConnections struct for AnalyticsMetadataConnections
type AnalyticsMetadataConnections struct {
	Video AnalyticsMetadataConnectionsVideo `json:"video"`
}

type _AnalyticsMetadataConnections AnalyticsMetadataConnections

// NewAnalyticsMetadataConnections instantiates a new AnalyticsMetadataConnections object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnalyticsMetadataConnections(video AnalyticsMetadataConnectionsVideo) *AnalyticsMetadataConnections {
	this := AnalyticsMetadataConnections{}
	this.Video = video
	return &this
}

// NewAnalyticsMetadataConnectionsWithDefaults instantiates a new AnalyticsMetadataConnections object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnalyticsMetadataConnectionsWithDefaults() *AnalyticsMetadataConnections {
	this := AnalyticsMetadataConnections{}
	return &this
}

// GetVideo returns the Video field value
func (o *AnalyticsMetadataConnections) GetVideo() AnalyticsMetadataConnectionsVideo {
	if o == nil {
		var ret AnalyticsMetadataConnectionsVideo
		return ret
	}

	return o.Video
}

// GetVideoOk returns a tuple with the Video field value
// and a boolean to check if the value has been set.
func (o *AnalyticsMetadataConnections) GetVideoOk() (*AnalyticsMetadataConnectionsVideo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Video, true
}

// SetVideo sets field value
func (o *AnalyticsMetadataConnections) SetVideo(v AnalyticsMetadataConnectionsVideo) {
	o.Video = v
}

func (o AnalyticsMetadataConnections) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnalyticsMetadataConnections) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["video"] = o.Video
	return toSerialize, nil
}

func (o *AnalyticsMetadataConnections) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"video",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAnalyticsMetadataConnections := _AnalyticsMetadataConnections{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAnalyticsMetadataConnections)

	if err != nil {
		return err
	}

	*o = AnalyticsMetadataConnections(varAnalyticsMetadataConnections)

	return err
}

type NullableAnalyticsMetadataConnections struct {
	value *AnalyticsMetadataConnections
	isSet bool
}

func (v NullableAnalyticsMetadataConnections) Get() *AnalyticsMetadataConnections {
	return v.value
}

func (v *NullableAnalyticsMetadataConnections) Set(val *AnalyticsMetadataConnections) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyticsMetadataConnections) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyticsMetadataConnections) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyticsMetadataConnections(val *AnalyticsMetadataConnections) *NullableAnalyticsMetadataConnections {
	return &NullableAnalyticsMetadataConnections{value: val, isSet: true}
}

func (v NullableAnalyticsMetadataConnections) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyticsMetadataConnections) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


