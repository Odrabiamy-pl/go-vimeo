/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the EditVodRequestPreorder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EditVodRequestPreorder{}

// EditVodRequestPreorder struct for EditVodRequestPreorder
type EditVodRequestPreorder struct {
	// Whether to enable preorders on the On Demand page.
	Active *bool `json:"active,omitempty"`
	// The time in ISO 8601 format when the On Demand page will be published. This parameter is required when **preorder.active** is `true`.
	PublishTime *string `json:"publish_time,omitempty"`
}

// NewEditVodRequestPreorder instantiates a new EditVodRequestPreorder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditVodRequestPreorder() *EditVodRequestPreorder {
	this := EditVodRequestPreorder{}
	return &this
}

// NewEditVodRequestPreorderWithDefaults instantiates a new EditVodRequestPreorder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditVodRequestPreorderWithDefaults() *EditVodRequestPreorder {
	this := EditVodRequestPreorder{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *EditVodRequestPreorder) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditVodRequestPreorder) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *EditVodRequestPreorder) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *EditVodRequestPreorder) SetActive(v bool) {
	o.Active = &v
}

// GetPublishTime returns the PublishTime field value if set, zero value otherwise.
func (o *EditVodRequestPreorder) GetPublishTime() string {
	if o == nil || IsNil(o.PublishTime) {
		var ret string
		return ret
	}
	return *o.PublishTime
}

// GetPublishTimeOk returns a tuple with the PublishTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditVodRequestPreorder) GetPublishTimeOk() (*string, bool) {
	if o == nil || IsNil(o.PublishTime) {
		return nil, false
	}
	return o.PublishTime, true
}

// HasPublishTime returns a boolean if a field has been set.
func (o *EditVodRequestPreorder) HasPublishTime() bool {
	if o != nil && !IsNil(o.PublishTime) {
		return true
	}

	return false
}

// SetPublishTime gets a reference to the given string and assigns it to the PublishTime field.
func (o *EditVodRequestPreorder) SetPublishTime(v string) {
	o.PublishTime = &v
}

func (o EditVodRequestPreorder) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EditVodRequestPreorder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.PublishTime) {
		toSerialize["publish_time"] = o.PublishTime
	}
	return toSerialize, nil
}

type NullableEditVodRequestPreorder struct {
	value *EditVodRequestPreorder
	isSet bool
}

func (v NullableEditVodRequestPreorder) Get() *EditVodRequestPreorder {
	return v.value
}

func (v *NullableEditVodRequestPreorder) Set(val *EditVodRequestPreorder) {
	v.value = val
	v.isSet = true
}

func (v NullableEditVodRequestPreorder) IsSet() bool {
	return v.isSet
}

func (v *NullableEditVodRequestPreorder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditVodRequestPreorder(val *EditVodRequestPreorder) *NullableEditVodRequestPreorder {
	return &NullableEditVodRequestPreorder{value: val, isSet: true}
}

func (v NullableEditVodRequestPreorder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditVodRequestPreorder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


