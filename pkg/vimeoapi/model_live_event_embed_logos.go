/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LiveEventEmbedLogos type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LiveEventEmbedLogos{}

// LiveEventEmbedLogos A collection of information about the logo in the corner of the embeddable player.
type LiveEventEmbedLogos struct {
	Custom LiveEventEmbedLogosCustom `json:"custom"`
	// Whether the Vimeo logo appears in the embeddable player for the video.
	Vimeo bool `json:"vimeo"`
}

type _LiveEventEmbedLogos LiveEventEmbedLogos

// NewLiveEventEmbedLogos instantiates a new LiveEventEmbedLogos object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLiveEventEmbedLogos(custom LiveEventEmbedLogosCustom, vimeo bool) *LiveEventEmbedLogos {
	this := LiveEventEmbedLogos{}
	this.Custom = custom
	this.Vimeo = vimeo
	return &this
}

// NewLiveEventEmbedLogosWithDefaults instantiates a new LiveEventEmbedLogos object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLiveEventEmbedLogosWithDefaults() *LiveEventEmbedLogos {
	this := LiveEventEmbedLogos{}
	return &this
}

// GetCustom returns the Custom field value
func (o *LiveEventEmbedLogos) GetCustom() LiveEventEmbedLogosCustom {
	if o == nil {
		var ret LiveEventEmbedLogosCustom
		return ret
	}

	return o.Custom
}

// GetCustomOk returns a tuple with the Custom field value
// and a boolean to check if the value has been set.
func (o *LiveEventEmbedLogos) GetCustomOk() (*LiveEventEmbedLogosCustom, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Custom, true
}

// SetCustom sets field value
func (o *LiveEventEmbedLogos) SetCustom(v LiveEventEmbedLogosCustom) {
	o.Custom = v
}

// GetVimeo returns the Vimeo field value
func (o *LiveEventEmbedLogos) GetVimeo() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Vimeo
}

// GetVimeoOk returns a tuple with the Vimeo field value
// and a boolean to check if the value has been set.
func (o *LiveEventEmbedLogos) GetVimeoOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vimeo, true
}

// SetVimeo sets field value
func (o *LiveEventEmbedLogos) SetVimeo(v bool) {
	o.Vimeo = v
}

func (o LiveEventEmbedLogos) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LiveEventEmbedLogos) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["custom"] = o.Custom
	toSerialize["vimeo"] = o.Vimeo
	return toSerialize, nil
}

func (o *LiveEventEmbedLogos) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"custom",
		"vimeo",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLiveEventEmbedLogos := _LiveEventEmbedLogos{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLiveEventEmbedLogos)

	if err != nil {
		return err
	}

	*o = LiveEventEmbedLogos(varLiveEventEmbedLogos)

	return err
}

type NullableLiveEventEmbedLogos struct {
	value *LiveEventEmbedLogos
	isSet bool
}

func (v NullableLiveEventEmbedLogos) Get() *LiveEventEmbedLogos {
	return v.value
}

func (v *NullableLiveEventEmbedLogos) Set(val *LiveEventEmbedLogos) {
	v.value = val
	v.isSet = true
}

func (v NullableLiveEventEmbedLogos) IsSet() bool {
	return v.isSet
}

func (v *NullableLiveEventEmbedLogos) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLiveEventEmbedLogos(val *LiveEventEmbedLogos) *NullableLiveEventEmbedLogos {
	return &NullableLiveEventEmbedLogos{value: val, isSet: true}
}

func (v NullableLiveEventEmbedLogos) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLiveEventEmbedLogos) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


