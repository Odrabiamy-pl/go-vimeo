/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the ChannelPrivacy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChannelPrivacy{}

// ChannelPrivacy The privacy settings of the channel.
type ChannelPrivacy struct {
	// The privacy setting of the channel.  Option descriptions:  * `anybody` - Anyone can access the channel. This privacy setting appears as `Public` on the Vimeo front end.  * `moderators` - Only moderators can access the channel.  * `users` - Only registered users can access the channel. _This field is deprecated._
	View string `json:"view"`
}

// NewChannelPrivacy instantiates a new ChannelPrivacy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelPrivacy(view string) *ChannelPrivacy {
	this := ChannelPrivacy{}
	this.View = view
	return &this
}

// NewChannelPrivacyWithDefaults instantiates a new ChannelPrivacy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelPrivacyWithDefaults() *ChannelPrivacy {
	this := ChannelPrivacy{}
	return &this
}

// GetView returns the View field value
func (o *ChannelPrivacy) GetView() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.View
}

// GetViewOk returns a tuple with the View field value
// and a boolean to check if the value has been set.
func (o *ChannelPrivacy) GetViewOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.View, true
}

// SetView sets field value
func (o *ChannelPrivacy) SetView(v string) {
	o.View = v
}

func (o ChannelPrivacy) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChannelPrivacy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["view"] = o.View
	return toSerialize, nil
}

type NullableChannelPrivacy struct {
	value *ChannelPrivacy
	isSet bool
}

func (v NullableChannelPrivacy) Get() *ChannelPrivacy {
	return v.value
}

func (v *NullableChannelPrivacy) Set(val *ChannelPrivacy) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelPrivacy) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelPrivacy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelPrivacy(val *ChannelPrivacy) *NullableChannelPrivacy {
	return &NullableChannelPrivacy{value: val, isSet: true}
}

func (v NullableChannelPrivacy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelPrivacy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
