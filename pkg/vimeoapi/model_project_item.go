/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the ProjectItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectItem{}

// ProjectItem struct for ProjectItem
type ProjectItem struct {
	Folder *Project `json:"folder,omitempty"`
	LiveEvent *LiveEventRecurring `json:"live_event,omitempty"`
	// The project item type.  Option descriptions:  * `folder` - The project item is a folder.  * `live_event` - The project item is a live event.  * `video` - The project item is a video. 
	Type string `json:"type"`
	Video *Video `json:"video,omitempty"`
}

// NewProjectItem instantiates a new ProjectItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectItem(type_ string) *ProjectItem {
	this := ProjectItem{}
	this.Type = type_
	return &this
}

// NewProjectItemWithDefaults instantiates a new ProjectItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectItemWithDefaults() *ProjectItem {
	this := ProjectItem{}
	return &this
}

// GetFolder returns the Folder field value if set, zero value otherwise.
func (o *ProjectItem) GetFolder() Project {
	if o == nil || IsNil(o.Folder) {
		var ret Project
		return ret
	}
	return *o.Folder
}

// GetFolderOk returns a tuple with the Folder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectItem) GetFolderOk() (*Project, bool) {
	if o == nil || IsNil(o.Folder) {
		return nil, false
	}
	return o.Folder, true
}

// HasFolder returns a boolean if a field has been set.
func (o *ProjectItem) HasFolder() bool {
	if o != nil && !IsNil(o.Folder) {
		return true
	}

	return false
}

// SetFolder gets a reference to the given Project and assigns it to the Folder field.
func (o *ProjectItem) SetFolder(v Project) {
	o.Folder = &v
}

// GetLiveEvent returns the LiveEvent field value if set, zero value otherwise.
func (o *ProjectItem) GetLiveEvent() LiveEventRecurring {
	if o == nil || IsNil(o.LiveEvent) {
		var ret LiveEventRecurring
		return ret
	}
	return *o.LiveEvent
}

// GetLiveEventOk returns a tuple with the LiveEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectItem) GetLiveEventOk() (*LiveEventRecurring, bool) {
	if o == nil || IsNil(o.LiveEvent) {
		return nil, false
	}
	return o.LiveEvent, true
}

// HasLiveEvent returns a boolean if a field has been set.
func (o *ProjectItem) HasLiveEvent() bool {
	if o != nil && !IsNil(o.LiveEvent) {
		return true
	}

	return false
}

// SetLiveEvent gets a reference to the given LiveEventRecurring and assigns it to the LiveEvent field.
func (o *ProjectItem) SetLiveEvent(v LiveEventRecurring) {
	o.LiveEvent = &v
}

// GetType returns the Type field value
func (o *ProjectItem) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ProjectItem) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ProjectItem) SetType(v string) {
	o.Type = v
}

// GetVideo returns the Video field value if set, zero value otherwise.
func (o *ProjectItem) GetVideo() Video {
	if o == nil || IsNil(o.Video) {
		var ret Video
		return ret
	}
	return *o.Video
}

// GetVideoOk returns a tuple with the Video field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectItem) GetVideoOk() (*Video, bool) {
	if o == nil || IsNil(o.Video) {
		return nil, false
	}
	return o.Video, true
}

// HasVideo returns a boolean if a field has been set.
func (o *ProjectItem) HasVideo() bool {
	if o != nil && !IsNil(o.Video) {
		return true
	}

	return false
}

// SetVideo gets a reference to the given Video and assigns it to the Video field.
func (o *ProjectItem) SetVideo(v Video) {
	o.Video = &v
}

func (o ProjectItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Folder) {
		toSerialize["folder"] = o.Folder
	}
	if !IsNil(o.LiveEvent) {
		toSerialize["live_event"] = o.LiveEvent
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.Video) {
		toSerialize["video"] = o.Video
	}
	return toSerialize, nil
}

type NullableProjectItem struct {
	value *ProjectItem
	isSet bool
}

func (v NullableProjectItem) Get() *ProjectItem {
	return v.value
}

func (v *NullableProjectItem) Set(val *ProjectItem) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectItem) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectItem(val *ProjectItem) *NullableProjectItem {
	return &NullableProjectItem{value: val, isSet: true}
}

func (v NullableProjectItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


