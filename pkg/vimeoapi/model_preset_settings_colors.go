/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the PresetSettingsColors type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PresetSettingsColors{}

// PresetSettingsColors struct for PresetSettingsColors
type PresetSettingsColors struct {
	// The fourth player color, which controls the player background color.
	ColorFour string `json:"color_four"`
	// The first player color, which controls the color of the progress bar, buttons, and more.
	ColorOne string `json:"color_one"`
	// The third player color, which controls the color of text and icons.
	ColorThree string `json:"color_three"`
	// The second player color, which controls the player accent color.
	ColorTwo string `json:"color_two"`
}

// NewPresetSettingsColors instantiates a new PresetSettingsColors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPresetSettingsColors(colorFour string, colorOne string, colorThree string, colorTwo string) *PresetSettingsColors {
	this := PresetSettingsColors{}
	this.ColorFour = colorFour
	this.ColorOne = colorOne
	this.ColorThree = colorThree
	this.ColorTwo = colorTwo
	return &this
}

// NewPresetSettingsColorsWithDefaults instantiates a new PresetSettingsColors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPresetSettingsColorsWithDefaults() *PresetSettingsColors {
	this := PresetSettingsColors{}
	return &this
}

// GetColorFour returns the ColorFour field value
func (o *PresetSettingsColors) GetColorFour() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ColorFour
}

// GetColorFourOk returns a tuple with the ColorFour field value
// and a boolean to check if the value has been set.
func (o *PresetSettingsColors) GetColorFourOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ColorFour, true
}

// SetColorFour sets field value
func (o *PresetSettingsColors) SetColorFour(v string) {
	o.ColorFour = v
}

// GetColorOne returns the ColorOne field value
func (o *PresetSettingsColors) GetColorOne() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ColorOne
}

// GetColorOneOk returns a tuple with the ColorOne field value
// and a boolean to check if the value has been set.
func (o *PresetSettingsColors) GetColorOneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ColorOne, true
}

// SetColorOne sets field value
func (o *PresetSettingsColors) SetColorOne(v string) {
	o.ColorOne = v
}

// GetColorThree returns the ColorThree field value
func (o *PresetSettingsColors) GetColorThree() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ColorThree
}

// GetColorThreeOk returns a tuple with the ColorThree field value
// and a boolean to check if the value has been set.
func (o *PresetSettingsColors) GetColorThreeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ColorThree, true
}

// SetColorThree sets field value
func (o *PresetSettingsColors) SetColorThree(v string) {
	o.ColorThree = v
}

// GetColorTwo returns the ColorTwo field value
func (o *PresetSettingsColors) GetColorTwo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ColorTwo
}

// GetColorTwoOk returns a tuple with the ColorTwo field value
// and a boolean to check if the value has been set.
func (o *PresetSettingsColors) GetColorTwoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ColorTwo, true
}

// SetColorTwo sets field value
func (o *PresetSettingsColors) SetColorTwo(v string) {
	o.ColorTwo = v
}

func (o PresetSettingsColors) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PresetSettingsColors) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["color_four"] = o.ColorFour
	toSerialize["color_one"] = o.ColorOne
	toSerialize["color_three"] = o.ColorThree
	toSerialize["color_two"] = o.ColorTwo
	return toSerialize, nil
}

type NullablePresetSettingsColors struct {
	value *PresetSettingsColors
	isSet bool
}

func (v NullablePresetSettingsColors) Get() *PresetSettingsColors {
	return v.value
}

func (v *NullablePresetSettingsColors) Set(val *PresetSettingsColors) {
	v.value = val
	v.isSet = true
}

func (v NullablePresetSettingsColors) IsSet() bool {
	return v.isSet
}

func (v *NullablePresetSettingsColors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePresetSettingsColors(val *PresetSettingsColors) *NullablePresetSettingsColors {
	return &NullablePresetSettingsColors{value: val, isSet: true}
}

func (v NullablePresetSettingsColors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePresetSettingsColors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


