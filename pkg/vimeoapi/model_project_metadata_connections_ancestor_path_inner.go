/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProjectMetadataConnectionsAncestorPathInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectMetadataConnectionsAncestorPathInner{}

// ProjectMetadataConnectionsAncestorPathInner struct for ProjectMetadataConnectionsAncestorPathInner
type ProjectMetadataConnectionsAncestorPathInner struct {
	// Whether the user can upload to this ancestor folder.
	CanUpload bool `json:"can_upload"`
	// The name of the folder.
	Name string `json:"name"`
	// The URI of the ancestor folder.
	Uri string `json:"uri"`
}

type _ProjectMetadataConnectionsAncestorPathInner ProjectMetadataConnectionsAncestorPathInner

// NewProjectMetadataConnectionsAncestorPathInner instantiates a new ProjectMetadataConnectionsAncestorPathInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectMetadataConnectionsAncestorPathInner(canUpload bool, name string, uri string) *ProjectMetadataConnectionsAncestorPathInner {
	this := ProjectMetadataConnectionsAncestorPathInner{}
	this.CanUpload = canUpload
	this.Name = name
	this.Uri = uri
	return &this
}

// NewProjectMetadataConnectionsAncestorPathInnerWithDefaults instantiates a new ProjectMetadataConnectionsAncestorPathInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectMetadataConnectionsAncestorPathInnerWithDefaults() *ProjectMetadataConnectionsAncestorPathInner {
	this := ProjectMetadataConnectionsAncestorPathInner{}
	return &this
}

// GetCanUpload returns the CanUpload field value
func (o *ProjectMetadataConnectionsAncestorPathInner) GetCanUpload() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CanUpload
}

// GetCanUploadOk returns a tuple with the CanUpload field value
// and a boolean to check if the value has been set.
func (o *ProjectMetadataConnectionsAncestorPathInner) GetCanUploadOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CanUpload, true
}

// SetCanUpload sets field value
func (o *ProjectMetadataConnectionsAncestorPathInner) SetCanUpload(v bool) {
	o.CanUpload = v
}

// GetName returns the Name field value
func (o *ProjectMetadataConnectionsAncestorPathInner) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ProjectMetadataConnectionsAncestorPathInner) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ProjectMetadataConnectionsAncestorPathInner) SetName(v string) {
	o.Name = v
}

// GetUri returns the Uri field value
func (o *ProjectMetadataConnectionsAncestorPathInner) GetUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uri
}

// GetUriOk returns a tuple with the Uri field value
// and a boolean to check if the value has been set.
func (o *ProjectMetadataConnectionsAncestorPathInner) GetUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uri, true
}

// SetUri sets field value
func (o *ProjectMetadataConnectionsAncestorPathInner) SetUri(v string) {
	o.Uri = v
}

func (o ProjectMetadataConnectionsAncestorPathInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectMetadataConnectionsAncestorPathInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["can_upload"] = o.CanUpload
	toSerialize["name"] = o.Name
	toSerialize["uri"] = o.Uri
	return toSerialize, nil
}

func (o *ProjectMetadataConnectionsAncestorPathInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"can_upload",
		"name",
		"uri",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProjectMetadataConnectionsAncestorPathInner := _ProjectMetadataConnectionsAncestorPathInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProjectMetadataConnectionsAncestorPathInner)

	if err != nil {
		return err
	}

	*o = ProjectMetadataConnectionsAncestorPathInner(varProjectMetadataConnectionsAncestorPathInner)

	return err
}

type NullableProjectMetadataConnectionsAncestorPathInner struct {
	value *ProjectMetadataConnectionsAncestorPathInner
	isSet bool
}

func (v NullableProjectMetadataConnectionsAncestorPathInner) Get() *ProjectMetadataConnectionsAncestorPathInner {
	return v.value
}

func (v *NullableProjectMetadataConnectionsAncestorPathInner) Set(val *ProjectMetadataConnectionsAncestorPathInner) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectMetadataConnectionsAncestorPathInner) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectMetadataConnectionsAncestorPathInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectMetadataConnectionsAncestorPathInner(val *ProjectMetadataConnectionsAncestorPathInner) *NullableProjectMetadataConnectionsAncestorPathInner {
	return &NullableProjectMetadataConnectionsAncestorPathInner{value: val, isSet: true}
}

func (v NullableProjectMetadataConnectionsAncestorPathInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectMetadataConnectionsAncestorPathInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


