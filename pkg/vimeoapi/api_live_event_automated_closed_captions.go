/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type LiveEventAutomatedClosedCaptionsAPI interface {

	/*
	EditLiveEventAutoCc Edit the automated closed captions preference of a live event

	This method edits the automated closed captions preference for the specified event.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param liveEventId The ID of the event.
	@param userId The ID of the user.
	@return ApiEditLiveEventAutoCcRequest
	*/
	EditLiveEventAutoCc(ctx context.Context, liveEventId float32, userId int32) ApiEditLiveEventAutoCcRequest

	// EditLiveEventAutoCcExecute executes the request
	//  @return LiveEventAutomatedClosedCaptions
	EditLiveEventAutoCcExecute(r ApiEditLiveEventAutoCcRequest) (*LiveEventAutomatedClosedCaptions, *http.Response, error)

	/*
	EditLiveEventAutoCcAlt1 Edit the automated closed captions preference of a live event

	This method edits the automated closed captions preference for the specified event.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param liveEventId The ID of the event.
	@return ApiEditLiveEventAutoCcAlt1Request
	*/
	EditLiveEventAutoCcAlt1(ctx context.Context, liveEventId float32) ApiEditLiveEventAutoCcAlt1Request

	// EditLiveEventAutoCcAlt1Execute executes the request
	//  @return LiveEventAutomatedClosedCaptions
	EditLiveEventAutoCcAlt1Execute(r ApiEditLiveEventAutoCcAlt1Request) (*LiveEventAutomatedClosedCaptions, *http.Response, error)

	/*
	EditLiveEventAutoCcAlt2 Edit the automated closed captions preference of a live event

	This method edits the automated closed captions preference for the specified event.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param liveEventId The ID of the event.
	@return ApiEditLiveEventAutoCcAlt2Request
	*/
	EditLiveEventAutoCcAlt2(ctx context.Context, liveEventId float32) ApiEditLiveEventAutoCcAlt2Request

	// EditLiveEventAutoCcAlt2Execute executes the request
	//  @return LiveEventAutomatedClosedCaptions
	EditLiveEventAutoCcAlt2Execute(r ApiEditLiveEventAutoCcAlt2Request) (*LiveEventAutomatedClosedCaptions, *http.Response, error)
}

// LiveEventAutomatedClosedCaptionsAPIService LiveEventAutomatedClosedCaptionsAPI service
type LiveEventAutomatedClosedCaptionsAPIService service

type ApiEditLiveEventAutoCcRequest struct {
	ctx context.Context
	ApiService LiveEventAutomatedClosedCaptionsAPI
	liveEventId float32
	userId int32
	editLiveEventAutoCcAlt1Request *EditLiveEventAutoCcAlt1Request
}

func (r ApiEditLiveEventAutoCcRequest) EditLiveEventAutoCcAlt1Request(editLiveEventAutoCcAlt1Request EditLiveEventAutoCcAlt1Request) ApiEditLiveEventAutoCcRequest {
	r.editLiveEventAutoCcAlt1Request = &editLiveEventAutoCcAlt1Request
	return r
}

func (r ApiEditLiveEventAutoCcRequest) Execute() (*LiveEventAutomatedClosedCaptions, *http.Response, error) {
	return r.ApiService.EditLiveEventAutoCcExecute(r)
}

/*
EditLiveEventAutoCc Edit the automated closed captions preference of a live event

This method edits the automated closed captions preference for the specified event.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param liveEventId The ID of the event.
 @param userId The ID of the user.
 @return ApiEditLiveEventAutoCcRequest
*/
func (a *LiveEventAutomatedClosedCaptionsAPIService) EditLiveEventAutoCc(ctx context.Context, liveEventId float32, userId int32) ApiEditLiveEventAutoCcRequest {
	return ApiEditLiveEventAutoCcRequest{
		ApiService: a,
		ctx: ctx,
		liveEventId: liveEventId,
		userId: userId,
	}
}

// Execute executes the request
//  @return LiveEventAutomatedClosedCaptions
func (a *LiveEventAutomatedClosedCaptionsAPIService) EditLiveEventAutoCcExecute(r ApiEditLiveEventAutoCcRequest) (*LiveEventAutomatedClosedCaptions, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LiveEventAutomatedClosedCaptions
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LiveEventAutomatedClosedCaptionsAPIService.EditLiveEventAutoCc")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/live_events/{live_event_id}/auto_cc"
	localVarPath = strings.Replace(localVarPath, "{"+"live_event_id"+"}", url.PathEscape(parameterValueToString(r.liveEventId, "liveEventId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.editLiveEventAutoCcAlt1Request == nil {
		return localVarReturnValue, nil, reportError("editLiveEventAutoCcAlt1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/application/vnd.vimeo.live.auto_cc+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/application/vnd.vimeo.live.auto_cc+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.editLiveEventAutoCcAlt1Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEditLiveEventAutoCcAlt1Request struct {
	ctx context.Context
	ApiService LiveEventAutomatedClosedCaptionsAPI
	liveEventId float32
	editLiveEventAutoCcAlt1Request *EditLiveEventAutoCcAlt1Request
}

func (r ApiEditLiveEventAutoCcAlt1Request) EditLiveEventAutoCcAlt1Request(editLiveEventAutoCcAlt1Request EditLiveEventAutoCcAlt1Request) ApiEditLiveEventAutoCcAlt1Request {
	r.editLiveEventAutoCcAlt1Request = &editLiveEventAutoCcAlt1Request
	return r
}

func (r ApiEditLiveEventAutoCcAlt1Request) Execute() (*LiveEventAutomatedClosedCaptions, *http.Response, error) {
	return r.ApiService.EditLiveEventAutoCcAlt1Execute(r)
}

/*
EditLiveEventAutoCcAlt1 Edit the automated closed captions preference of a live event

This method edits the automated closed captions preference for the specified event.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param liveEventId The ID of the event.
 @return ApiEditLiveEventAutoCcAlt1Request
*/
func (a *LiveEventAutomatedClosedCaptionsAPIService) EditLiveEventAutoCcAlt1(ctx context.Context, liveEventId float32) ApiEditLiveEventAutoCcAlt1Request {
	return ApiEditLiveEventAutoCcAlt1Request{
		ApiService: a,
		ctx: ctx,
		liveEventId: liveEventId,
	}
}

// Execute executes the request
//  @return LiveEventAutomatedClosedCaptions
func (a *LiveEventAutomatedClosedCaptionsAPIService) EditLiveEventAutoCcAlt1Execute(r ApiEditLiveEventAutoCcAlt1Request) (*LiveEventAutomatedClosedCaptions, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LiveEventAutomatedClosedCaptions
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LiveEventAutomatedClosedCaptionsAPIService.EditLiveEventAutoCcAlt1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/live_events/{live_event_id}/auto_cc"
	localVarPath = strings.Replace(localVarPath, "{"+"live_event_id"+"}", url.PathEscape(parameterValueToString(r.liveEventId, "liveEventId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.editLiveEventAutoCcAlt1Request == nil {
		return localVarReturnValue, nil, reportError("editLiveEventAutoCcAlt1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/application/vnd.vimeo.live.auto_cc+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/application/vnd.vimeo.live.auto_cc+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.editLiveEventAutoCcAlt1Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEditLiveEventAutoCcAlt2Request struct {
	ctx context.Context
	ApiService LiveEventAutomatedClosedCaptionsAPI
	liveEventId float32
	editLiveEventAutoCcAlt1Request *EditLiveEventAutoCcAlt1Request
}

func (r ApiEditLiveEventAutoCcAlt2Request) EditLiveEventAutoCcAlt1Request(editLiveEventAutoCcAlt1Request EditLiveEventAutoCcAlt1Request) ApiEditLiveEventAutoCcAlt2Request {
	r.editLiveEventAutoCcAlt1Request = &editLiveEventAutoCcAlt1Request
	return r
}

func (r ApiEditLiveEventAutoCcAlt2Request) Execute() (*LiveEventAutomatedClosedCaptions, *http.Response, error) {
	return r.ApiService.EditLiveEventAutoCcAlt2Execute(r)
}

/*
EditLiveEventAutoCcAlt2 Edit the automated closed captions preference of a live event

This method edits the automated closed captions preference for the specified event.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param liveEventId The ID of the event.
 @return ApiEditLiveEventAutoCcAlt2Request
*/
func (a *LiveEventAutomatedClosedCaptionsAPIService) EditLiveEventAutoCcAlt2(ctx context.Context, liveEventId float32) ApiEditLiveEventAutoCcAlt2Request {
	return ApiEditLiveEventAutoCcAlt2Request{
		ApiService: a,
		ctx: ctx,
		liveEventId: liveEventId,
	}
}

// Execute executes the request
//  @return LiveEventAutomatedClosedCaptions
func (a *LiveEventAutomatedClosedCaptionsAPIService) EditLiveEventAutoCcAlt2Execute(r ApiEditLiveEventAutoCcAlt2Request) (*LiveEventAutomatedClosedCaptions, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LiveEventAutomatedClosedCaptions
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LiveEventAutomatedClosedCaptionsAPIService.EditLiveEventAutoCcAlt2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/live_events/{live_event_id}/auto_cc"
	localVarPath = strings.Replace(localVarPath, "{"+"live_event_id"+"}", url.PathEscape(parameterValueToString(r.liveEventId, "liveEventId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.editLiveEventAutoCcAlt1Request == nil {
		return localVarReturnValue, nil, reportError("editLiveEventAutoCcAlt1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/application/vnd.vimeo.live.auto_cc+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/application/vnd.vimeo.live.auto_cc+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.editLiveEventAutoCcAlt1Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
