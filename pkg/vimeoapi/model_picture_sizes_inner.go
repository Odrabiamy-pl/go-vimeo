/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PictureSizesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PictureSizesInner{}

// PictureSizesInner struct for PictureSizesInner
type PictureSizesInner struct {
	// The height of the picture.
	Height NullableFloat32 `json:"height"`
	// The direct link to the image file. For information about the format of the image file, see our [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#returning-the-link-to-a-thumbnail) guide.
	Link string `json:"link"`
	// The direct link to the image file with a play button overlay. For information about the format of the image file, see our [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#returning-the-link-to-a-thumbnail) guide.
	LinkWithPlayButton *string `json:"link_with_play_button,omitempty"`
	// The width of the picture.
	Width float32 `json:"width"`
}

type _PictureSizesInner PictureSizesInner

// NewPictureSizesInner instantiates a new PictureSizesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPictureSizesInner(height NullableFloat32, link string, width float32) *PictureSizesInner {
	this := PictureSizesInner{}
	this.Height = height
	this.Link = link
	this.Width = width
	return &this
}

// NewPictureSizesInnerWithDefaults instantiates a new PictureSizesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPictureSizesInnerWithDefaults() *PictureSizesInner {
	this := PictureSizesInner{}
	return &this
}

// GetHeight returns the Height field value
// If the value is explicit nil, the zero value for float32 will be returned
func (o *PictureSizesInner) GetHeight() float32 {
	if o == nil || o.Height.Get() == nil {
		var ret float32
		return ret
	}

	return *o.Height.Get()
}

// GetHeightOk returns a tuple with the Height field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PictureSizesInner) GetHeightOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Height.Get(), o.Height.IsSet()
}

// SetHeight sets field value
func (o *PictureSizesInner) SetHeight(v float32) {
	o.Height.Set(&v)
}

// GetLink returns the Link field value
func (o *PictureSizesInner) GetLink() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Link
}

// GetLinkOk returns a tuple with the Link field value
// and a boolean to check if the value has been set.
func (o *PictureSizesInner) GetLinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Link, true
}

// SetLink sets field value
func (o *PictureSizesInner) SetLink(v string) {
	o.Link = v
}

// GetLinkWithPlayButton returns the LinkWithPlayButton field value if set, zero value otherwise.
func (o *PictureSizesInner) GetLinkWithPlayButton() string {
	if o == nil || IsNil(o.LinkWithPlayButton) {
		var ret string
		return ret
	}
	return *o.LinkWithPlayButton
}

// GetLinkWithPlayButtonOk returns a tuple with the LinkWithPlayButton field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PictureSizesInner) GetLinkWithPlayButtonOk() (*string, bool) {
	if o == nil || IsNil(o.LinkWithPlayButton) {
		return nil, false
	}
	return o.LinkWithPlayButton, true
}

// HasLinkWithPlayButton returns a boolean if a field has been set.
func (o *PictureSizesInner) HasLinkWithPlayButton() bool {
	if o != nil && !IsNil(o.LinkWithPlayButton) {
		return true
	}

	return false
}

// SetLinkWithPlayButton gets a reference to the given string and assigns it to the LinkWithPlayButton field.
func (o *PictureSizesInner) SetLinkWithPlayButton(v string) {
	o.LinkWithPlayButton = &v
}

// GetWidth returns the Width field value
func (o *PictureSizesInner) GetWidth() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Width
}

// GetWidthOk returns a tuple with the Width field value
// and a boolean to check if the value has been set.
func (o *PictureSizesInner) GetWidthOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Width, true
}

// SetWidth sets field value
func (o *PictureSizesInner) SetWidth(v float32) {
	o.Width = v
}

func (o PictureSizesInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PictureSizesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["height"] = o.Height.Get()
	toSerialize["link"] = o.Link
	if !IsNil(o.LinkWithPlayButton) {
		toSerialize["link_with_play_button"] = o.LinkWithPlayButton
	}
	toSerialize["width"] = o.Width
	return toSerialize, nil
}

func (o *PictureSizesInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"height",
		"link",
		"width",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPictureSizesInner := _PictureSizesInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPictureSizesInner)

	if err != nil {
		return err
	}

	*o = PictureSizesInner(varPictureSizesInner)

	return err
}

type NullablePictureSizesInner struct {
	value *PictureSizesInner
	isSet bool
}

func (v NullablePictureSizesInner) Get() *PictureSizesInner {
	return v.value
}

func (v *NullablePictureSizesInner) Set(val *PictureSizesInner) {
	v.value = val
	v.isSet = true
}

func (v NullablePictureSizesInner) IsSet() bool {
	return v.isSet
}

func (v *NullablePictureSizesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePictureSizesInner(val *PictureSizesInner) *NullablePictureSizesInner {
	return &NullablePictureSizesInner{value: val, isSet: true}
}

func (v NullablePictureSizesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePictureSizesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


