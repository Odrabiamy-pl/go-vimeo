/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the UpdateLiveEventAlt1RequestEmbed type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateLiveEventAlt1RequestEmbed{}

// UpdateLiveEventAlt1RequestEmbed The embed settings of the event and the videos generated by streaming to this event.
type UpdateLiveEventAlt1RequestEmbed struct {
	// Whether playback starts automatically on load.
	Autoplay *bool `json:"autoplay,omitempty"`
	// The hexadecimal color code for the main color of the embed player.
	Color *string                               `json:"color,omitempty"`
	Logos *CreateLiveEventAlt1RequestEmbedLogos `json:"logos,omitempty"`
	// Whether the playlist should start from the beginning again after reaching the end of the last video.
	Loop *bool `json:"loop,omitempty"`
	// Whether to show the playlist controls on the embed player.
	Playlist *bool `json:"playlist,omitempty"`
	// Whether to show the event schedule on the embed player.
	Schedule *bool `json:"schedule,omitempty"`
	// Whether the embed player should use (`true`) or ignore (`false`) the **embed.color** value.
	UseColor *bool `json:"use_color,omitempty"`
}

// NewUpdateLiveEventAlt1RequestEmbed instantiates a new UpdateLiveEventAlt1RequestEmbed object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateLiveEventAlt1RequestEmbed() *UpdateLiveEventAlt1RequestEmbed {
	this := UpdateLiveEventAlt1RequestEmbed{}
	return &this
}

// NewUpdateLiveEventAlt1RequestEmbedWithDefaults instantiates a new UpdateLiveEventAlt1RequestEmbed object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateLiveEventAlt1RequestEmbedWithDefaults() *UpdateLiveEventAlt1RequestEmbed {
	this := UpdateLiveEventAlt1RequestEmbed{}
	return &this
}

// GetAutoplay returns the Autoplay field value if set, zero value otherwise.
func (o *UpdateLiveEventAlt1RequestEmbed) GetAutoplay() bool {
	if o == nil || IsNil(o.Autoplay) {
		var ret bool
		return ret
	}
	return *o.Autoplay
}

// GetAutoplayOk returns a tuple with the Autoplay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLiveEventAlt1RequestEmbed) GetAutoplayOk() (*bool, bool) {
	if o == nil || IsNil(o.Autoplay) {
		return nil, false
	}
	return o.Autoplay, true
}

// HasAutoplay returns a boolean if a field has been set.
func (o *UpdateLiveEventAlt1RequestEmbed) HasAutoplay() bool {
	if o != nil && !IsNil(o.Autoplay) {
		return true
	}

	return false
}

// SetAutoplay gets a reference to the given bool and assigns it to the Autoplay field.
func (o *UpdateLiveEventAlt1RequestEmbed) SetAutoplay(v bool) {
	o.Autoplay = &v
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *UpdateLiveEventAlt1RequestEmbed) GetColor() string {
	if o == nil || IsNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLiveEventAlt1RequestEmbed) GetColorOk() (*string, bool) {
	if o == nil || IsNil(o.Color) {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *UpdateLiveEventAlt1RequestEmbed) HasColor() bool {
	if o != nil && !IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *UpdateLiveEventAlt1RequestEmbed) SetColor(v string) {
	o.Color = &v
}

// GetLogos returns the Logos field value if set, zero value otherwise.
func (o *UpdateLiveEventAlt1RequestEmbed) GetLogos() CreateLiveEventAlt1RequestEmbedLogos {
	if o == nil || IsNil(o.Logos) {
		var ret CreateLiveEventAlt1RequestEmbedLogos
		return ret
	}
	return *o.Logos
}

// GetLogosOk returns a tuple with the Logos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLiveEventAlt1RequestEmbed) GetLogosOk() (*CreateLiveEventAlt1RequestEmbedLogos, bool) {
	if o == nil || IsNil(o.Logos) {
		return nil, false
	}
	return o.Logos, true
}

// HasLogos returns a boolean if a field has been set.
func (o *UpdateLiveEventAlt1RequestEmbed) HasLogos() bool {
	if o != nil && !IsNil(o.Logos) {
		return true
	}

	return false
}

// SetLogos gets a reference to the given CreateLiveEventAlt1RequestEmbedLogos and assigns it to the Logos field.
func (o *UpdateLiveEventAlt1RequestEmbed) SetLogos(v CreateLiveEventAlt1RequestEmbedLogos) {
	o.Logos = &v
}

// GetLoop returns the Loop field value if set, zero value otherwise.
func (o *UpdateLiveEventAlt1RequestEmbed) GetLoop() bool {
	if o == nil || IsNil(o.Loop) {
		var ret bool
		return ret
	}
	return *o.Loop
}

// GetLoopOk returns a tuple with the Loop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLiveEventAlt1RequestEmbed) GetLoopOk() (*bool, bool) {
	if o == nil || IsNil(o.Loop) {
		return nil, false
	}
	return o.Loop, true
}

// HasLoop returns a boolean if a field has been set.
func (o *UpdateLiveEventAlt1RequestEmbed) HasLoop() bool {
	if o != nil && !IsNil(o.Loop) {
		return true
	}

	return false
}

// SetLoop gets a reference to the given bool and assigns it to the Loop field.
func (o *UpdateLiveEventAlt1RequestEmbed) SetLoop(v bool) {
	o.Loop = &v
}

// GetPlaylist returns the Playlist field value if set, zero value otherwise.
func (o *UpdateLiveEventAlt1RequestEmbed) GetPlaylist() bool {
	if o == nil || IsNil(o.Playlist) {
		var ret bool
		return ret
	}
	return *o.Playlist
}

// GetPlaylistOk returns a tuple with the Playlist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLiveEventAlt1RequestEmbed) GetPlaylistOk() (*bool, bool) {
	if o == nil || IsNil(o.Playlist) {
		return nil, false
	}
	return o.Playlist, true
}

// HasPlaylist returns a boolean if a field has been set.
func (o *UpdateLiveEventAlt1RequestEmbed) HasPlaylist() bool {
	if o != nil && !IsNil(o.Playlist) {
		return true
	}

	return false
}

// SetPlaylist gets a reference to the given bool and assigns it to the Playlist field.
func (o *UpdateLiveEventAlt1RequestEmbed) SetPlaylist(v bool) {
	o.Playlist = &v
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *UpdateLiveEventAlt1RequestEmbed) GetSchedule() bool {
	if o == nil || IsNil(o.Schedule) {
		var ret bool
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLiveEventAlt1RequestEmbed) GetScheduleOk() (*bool, bool) {
	if o == nil || IsNil(o.Schedule) {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *UpdateLiveEventAlt1RequestEmbed) HasSchedule() bool {
	if o != nil && !IsNil(o.Schedule) {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given bool and assigns it to the Schedule field.
func (o *UpdateLiveEventAlt1RequestEmbed) SetSchedule(v bool) {
	o.Schedule = &v
}

// GetUseColor returns the UseColor field value if set, zero value otherwise.
func (o *UpdateLiveEventAlt1RequestEmbed) GetUseColor() bool {
	if o == nil || IsNil(o.UseColor) {
		var ret bool
		return ret
	}
	return *o.UseColor
}

// GetUseColorOk returns a tuple with the UseColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLiveEventAlt1RequestEmbed) GetUseColorOk() (*bool, bool) {
	if o == nil || IsNil(o.UseColor) {
		return nil, false
	}
	return o.UseColor, true
}

// HasUseColor returns a boolean if a field has been set.
func (o *UpdateLiveEventAlt1RequestEmbed) HasUseColor() bool {
	if o != nil && !IsNil(o.UseColor) {
		return true
	}

	return false
}

// SetUseColor gets a reference to the given bool and assigns it to the UseColor field.
func (o *UpdateLiveEventAlt1RequestEmbed) SetUseColor(v bool) {
	o.UseColor = &v
}

func (o UpdateLiveEventAlt1RequestEmbed) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateLiveEventAlt1RequestEmbed) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Autoplay) {
		toSerialize["autoplay"] = o.Autoplay
	}
	if !IsNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	if !IsNil(o.Logos) {
		toSerialize["logos"] = o.Logos
	}
	if !IsNil(o.Loop) {
		toSerialize["loop"] = o.Loop
	}
	if !IsNil(o.Playlist) {
		toSerialize["playlist"] = o.Playlist
	}
	if !IsNil(o.Schedule) {
		toSerialize["schedule"] = o.Schedule
	}
	if !IsNil(o.UseColor) {
		toSerialize["use_color"] = o.UseColor
	}
	return toSerialize, nil
}

type NullableUpdateLiveEventAlt1RequestEmbed struct {
	value *UpdateLiveEventAlt1RequestEmbed
	isSet bool
}

func (v NullableUpdateLiveEventAlt1RequestEmbed) Get() *UpdateLiveEventAlt1RequestEmbed {
	return v.value
}

func (v *NullableUpdateLiveEventAlt1RequestEmbed) Set(val *UpdateLiveEventAlt1RequestEmbed) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateLiveEventAlt1RequestEmbed) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateLiveEventAlt1RequestEmbed) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateLiveEventAlt1RequestEmbed(val *UpdateLiveEventAlt1RequestEmbed) *NullableUpdateLiveEventAlt1RequestEmbed {
	return &NullableUpdateLiveEventAlt1RequestEmbed{value: val, isSet: true}
}

func (v NullableUpdateLiveEventAlt1RequestEmbed) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateLiveEventAlt1RequestEmbed) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
