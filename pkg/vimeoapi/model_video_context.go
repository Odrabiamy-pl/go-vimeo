/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VideoContext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VideoContext{}

// VideoContext The context of the video's subscription, if the video is part of a subscription.
type VideoContext struct {
	// The relevant contextual action.  Option descriptions:  * `Added to` - An Added To action.  * `Appearance by` - An Appearance By action.  * `Liked by` - A Liked By action.  * `Uploaded by` - An Uploaded By action. 
	Action string `json:"action"`
	// The contextual resource: a user, group, or channel representation, or an object of a tag.
	Resource map[string]interface{} `json:"resource"`
	// The contextual resource type.
	ResourceType string `json:"resource_type"`
}

type _VideoContext VideoContext

// NewVideoContext instantiates a new VideoContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVideoContext(action string, resource map[string]interface{}, resourceType string) *VideoContext {
	this := VideoContext{}
	this.Action = action
	this.Resource = resource
	this.ResourceType = resourceType
	return &this
}

// NewVideoContextWithDefaults instantiates a new VideoContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVideoContextWithDefaults() *VideoContext {
	this := VideoContext{}
	return &this
}

// GetAction returns the Action field value
func (o *VideoContext) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *VideoContext) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *VideoContext) SetAction(v string) {
	o.Action = v
}

// GetResource returns the Resource field value
// If the value is explicit nil, the zero value for map[string]interface{} will be returned
func (o *VideoContext) GetResource() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Resource
}

// GetResourceOk returns a tuple with the Resource field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VideoContext) GetResourceOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Resource) {
		return map[string]interface{}{}, false
	}
	return o.Resource, true
}

// SetResource sets field value
func (o *VideoContext) SetResource(v map[string]interface{}) {
	o.Resource = v
}

// GetResourceType returns the ResourceType field value
func (o *VideoContext) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *VideoContext) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *VideoContext) SetResourceType(v string) {
	o.ResourceType = v
}

func (o VideoContext) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VideoContext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["action"] = o.Action
	if o.Resource != nil {
		toSerialize["resource"] = o.Resource
	}
	toSerialize["resource_type"] = o.ResourceType
	return toSerialize, nil
}

func (o *VideoContext) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"action",
		"resource",
		"resource_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVideoContext := _VideoContext{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVideoContext)

	if err != nil {
		return err
	}

	*o = VideoContext(varVideoContext)

	return err
}

type NullableVideoContext struct {
	value *VideoContext
	isSet bool
}

func (v NullableVideoContext) Get() *VideoContext {
	return v.value
}

func (v *NullableVideoContext) Set(val *VideoContext) {
	v.value = val
	v.isSet = true
}

func (v NullableVideoContext) IsSet() bool {
	return v.isSet
}

func (v *NullableVideoContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVideoContext(val *VideoContext) *NullableVideoContext {
	return &NullableVideoContext{value: val, isSet: true}
}

func (v NullableVideoContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVideoContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


