/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the LiveEventSessionStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LiveEventSessionStatus{}

// LiveEventSessionStatus struct for LiveEventSessionStatus
type LiveEventSessionStatus struct {
	Archive LiveEventSessionStatusArchive `json:"archive"`
	// Whether the current user can manage the event.
	CanManage bool `json:"can_manage"`
	// The ID of the live video.
	Id float32 `json:"id"`
	Ingest LiveEventSessionStatusIngest `json:"ingest"`
	Metering LiveEventSessionStatusMetering `json:"metering"`
	// The status of the live event.  Option descriptions:  * `ended` - The live event has ended.  * `started` - The live event has started. 
	Status NullableString `json:"status"`
	// The stream mode of the event.  Option descriptions:  * `live` - The stream is live playback.  * `record` - The stream is in record mode.  * `simulive` - The stream is scheduled media playback. 
	StreamMode string `json:"stream_mode"`
}

// NewLiveEventSessionStatus instantiates a new LiveEventSessionStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLiveEventSessionStatus(archive LiveEventSessionStatusArchive, canManage bool, id float32, ingest LiveEventSessionStatusIngest, metering LiveEventSessionStatusMetering, status NullableString, streamMode string) *LiveEventSessionStatus {
	this := LiveEventSessionStatus{}
	this.Archive = archive
	this.CanManage = canManage
	this.Id = id
	this.Ingest = ingest
	this.Metering = metering
	this.Status = status
	this.StreamMode = streamMode
	return &this
}

// NewLiveEventSessionStatusWithDefaults instantiates a new LiveEventSessionStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLiveEventSessionStatusWithDefaults() *LiveEventSessionStatus {
	this := LiveEventSessionStatus{}
	return &this
}

// GetArchive returns the Archive field value
func (o *LiveEventSessionStatus) GetArchive() LiveEventSessionStatusArchive {
	if o == nil {
		var ret LiveEventSessionStatusArchive
		return ret
	}

	return o.Archive
}

// GetArchiveOk returns a tuple with the Archive field value
// and a boolean to check if the value has been set.
func (o *LiveEventSessionStatus) GetArchiveOk() (*LiveEventSessionStatusArchive, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Archive, true
}

// SetArchive sets field value
func (o *LiveEventSessionStatus) SetArchive(v LiveEventSessionStatusArchive) {
	o.Archive = v
}

// GetCanManage returns the CanManage field value
func (o *LiveEventSessionStatus) GetCanManage() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CanManage
}

// GetCanManageOk returns a tuple with the CanManage field value
// and a boolean to check if the value has been set.
func (o *LiveEventSessionStatus) GetCanManageOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CanManage, true
}

// SetCanManage sets field value
func (o *LiveEventSessionStatus) SetCanManage(v bool) {
	o.CanManage = v
}

// GetId returns the Id field value
func (o *LiveEventSessionStatus) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *LiveEventSessionStatus) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *LiveEventSessionStatus) SetId(v float32) {
	o.Id = v
}

// GetIngest returns the Ingest field value
func (o *LiveEventSessionStatus) GetIngest() LiveEventSessionStatusIngest {
	if o == nil {
		var ret LiveEventSessionStatusIngest
		return ret
	}

	return o.Ingest
}

// GetIngestOk returns a tuple with the Ingest field value
// and a boolean to check if the value has been set.
func (o *LiveEventSessionStatus) GetIngestOk() (*LiveEventSessionStatusIngest, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ingest, true
}

// SetIngest sets field value
func (o *LiveEventSessionStatus) SetIngest(v LiveEventSessionStatusIngest) {
	o.Ingest = v
}

// GetMetering returns the Metering field value
func (o *LiveEventSessionStatus) GetMetering() LiveEventSessionStatusMetering {
	if o == nil {
		var ret LiveEventSessionStatusMetering
		return ret
	}

	return o.Metering
}

// GetMeteringOk returns a tuple with the Metering field value
// and a boolean to check if the value has been set.
func (o *LiveEventSessionStatus) GetMeteringOk() (*LiveEventSessionStatusMetering, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metering, true
}

// SetMetering sets field value
func (o *LiveEventSessionStatus) SetMetering(v LiveEventSessionStatusMetering) {
	o.Metering = v
}

// GetStatus returns the Status field value
// If the value is explicit nil, the zero value for string will be returned
func (o *LiveEventSessionStatus) GetStatus() string {
	if o == nil || o.Status.Get() == nil {
		var ret string
		return ret
	}

	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LiveEventSessionStatus) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// SetStatus sets field value
func (o *LiveEventSessionStatus) SetStatus(v string) {
	o.Status.Set(&v)
}

// GetStreamMode returns the StreamMode field value
func (o *LiveEventSessionStatus) GetStreamMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StreamMode
}

// GetStreamModeOk returns a tuple with the StreamMode field value
// and a boolean to check if the value has been set.
func (o *LiveEventSessionStatus) GetStreamModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StreamMode, true
}

// SetStreamMode sets field value
func (o *LiveEventSessionStatus) SetStreamMode(v string) {
	o.StreamMode = v
}

func (o LiveEventSessionStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LiveEventSessionStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["archive"] = o.Archive
	toSerialize["can_manage"] = o.CanManage
	toSerialize["id"] = o.Id
	toSerialize["ingest"] = o.Ingest
	toSerialize["metering"] = o.Metering
	toSerialize["status"] = o.Status.Get()
	toSerialize["stream_mode"] = o.StreamMode
	return toSerialize, nil
}

type NullableLiveEventSessionStatus struct {
	value *LiveEventSessionStatus
	isSet bool
}

func (v NullableLiveEventSessionStatus) Get() *LiveEventSessionStatus {
	return v.value
}

func (v *NullableLiveEventSessionStatus) Set(val *LiveEventSessionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableLiveEventSessionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableLiveEventSessionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLiveEventSessionStatus(val *LiveEventSessionStatus) *NullableLiveEventSessionStatus {
	return &NullableLiveEventSessionStatus{value: val, isSet: true}
}

func (v NullableLiveEventSessionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLiveEventSessionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


