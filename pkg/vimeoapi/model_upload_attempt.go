/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the UploadAttempt type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UploadAttempt{}

// UploadAttempt struct for UploadAttempt
type UploadAttempt struct {
	Clip *Video `json:"clip,omitempty"`
	// The HTML upload form.
	Form *string `json:"form,omitempty"`
	// The ticket identifier string for the upload.
	TicketId string `json:"ticket_id"`
	// The upload URL.
	UploadLink string `json:"upload_link"`
	// The upload URI.
	Uri string `json:"uri"`
	User User `json:"user"`
}

// NewUploadAttempt instantiates a new UploadAttempt object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadAttempt(ticketId string, uploadLink string, uri string, user User) *UploadAttempt {
	this := UploadAttempt{}
	this.TicketId = ticketId
	this.UploadLink = uploadLink
	this.Uri = uri
	this.User = user
	return &this
}

// NewUploadAttemptWithDefaults instantiates a new UploadAttempt object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadAttemptWithDefaults() *UploadAttempt {
	this := UploadAttempt{}
	return &this
}

// GetClip returns the Clip field value if set, zero value otherwise.
func (o *UploadAttempt) GetClip() Video {
	if o == nil || IsNil(o.Clip) {
		var ret Video
		return ret
	}
	return *o.Clip
}

// GetClipOk returns a tuple with the Clip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadAttempt) GetClipOk() (*Video, bool) {
	if o == nil || IsNil(o.Clip) {
		return nil, false
	}
	return o.Clip, true
}

// HasClip returns a boolean if a field has been set.
func (o *UploadAttempt) HasClip() bool {
	if o != nil && !IsNil(o.Clip) {
		return true
	}

	return false
}

// SetClip gets a reference to the given Video and assigns it to the Clip field.
func (o *UploadAttempt) SetClip(v Video) {
	o.Clip = &v
}

// GetForm returns the Form field value if set, zero value otherwise.
func (o *UploadAttempt) GetForm() string {
	if o == nil || IsNil(o.Form) {
		var ret string
		return ret
	}
	return *o.Form
}

// GetFormOk returns a tuple with the Form field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadAttempt) GetFormOk() (*string, bool) {
	if o == nil || IsNil(o.Form) {
		return nil, false
	}
	return o.Form, true
}

// HasForm returns a boolean if a field has been set.
func (o *UploadAttempt) HasForm() bool {
	if o != nil && !IsNil(o.Form) {
		return true
	}

	return false
}

// SetForm gets a reference to the given string and assigns it to the Form field.
func (o *UploadAttempt) SetForm(v string) {
	o.Form = &v
}

// GetTicketId returns the TicketId field value
func (o *UploadAttempt) GetTicketId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TicketId
}

// GetTicketIdOk returns a tuple with the TicketId field value
// and a boolean to check if the value has been set.
func (o *UploadAttempt) GetTicketIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TicketId, true
}

// SetTicketId sets field value
func (o *UploadAttempt) SetTicketId(v string) {
	o.TicketId = v
}

// GetUploadLink returns the UploadLink field value
func (o *UploadAttempt) GetUploadLink() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UploadLink
}

// GetUploadLinkOk returns a tuple with the UploadLink field value
// and a boolean to check if the value has been set.
func (o *UploadAttempt) GetUploadLinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UploadLink, true
}

// SetUploadLink sets field value
func (o *UploadAttempt) SetUploadLink(v string) {
	o.UploadLink = v
}

// GetUri returns the Uri field value
func (o *UploadAttempt) GetUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uri
}

// GetUriOk returns a tuple with the Uri field value
// and a boolean to check if the value has been set.
func (o *UploadAttempt) GetUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uri, true
}

// SetUri sets field value
func (o *UploadAttempt) SetUri(v string) {
	o.Uri = v
}

// GetUser returns the User field value
func (o *UploadAttempt) GetUser() User {
	if o == nil {
		var ret User
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *UploadAttempt) GetUserOk() (*User, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *UploadAttempt) SetUser(v User) {
	o.User = v
}

func (o UploadAttempt) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UploadAttempt) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Clip) {
		toSerialize["clip"] = o.Clip
	}
	if !IsNil(o.Form) {
		toSerialize["form"] = o.Form
	}
	toSerialize["ticket_id"] = o.TicketId
	toSerialize["upload_link"] = o.UploadLink
	toSerialize["uri"] = o.Uri
	toSerialize["user"] = o.User
	return toSerialize, nil
}

type NullableUploadAttempt struct {
	value *UploadAttempt
	isSet bool
}

func (v NullableUploadAttempt) Get() *UploadAttempt {
	return v.value
}

func (v *NullableUploadAttempt) Set(val *UploadAttempt) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadAttempt) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadAttempt) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadAttempt(val *UploadAttempt) *NullableUploadAttempt {
	return &NullableUploadAttempt{value: val, isSet: true}
}

func (v NullableUploadAttempt) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadAttempt) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


