/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the LiveEventSessionStatusArchive type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LiveEventSessionStatusArchive{}

// LiveEventSessionStatusArchive Information about the archive data.
type LiveEventSessionStatusArchive struct {
	// The ID of the archived video.
	ClipId float32 `json:"clip_id"`
	// The status of the archive data.
	Status NullableFloat32 `json:"status"`
}

// NewLiveEventSessionStatusArchive instantiates a new LiveEventSessionStatusArchive object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLiveEventSessionStatusArchive(clipId float32, status NullableFloat32) *LiveEventSessionStatusArchive {
	this := LiveEventSessionStatusArchive{}
	this.ClipId = clipId
	this.Status = status
	return &this
}

// NewLiveEventSessionStatusArchiveWithDefaults instantiates a new LiveEventSessionStatusArchive object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLiveEventSessionStatusArchiveWithDefaults() *LiveEventSessionStatusArchive {
	this := LiveEventSessionStatusArchive{}
	return &this
}

// GetClipId returns the ClipId field value
func (o *LiveEventSessionStatusArchive) GetClipId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ClipId
}

// GetClipIdOk returns a tuple with the ClipId field value
// and a boolean to check if the value has been set.
func (o *LiveEventSessionStatusArchive) GetClipIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClipId, true
}

// SetClipId sets field value
func (o *LiveEventSessionStatusArchive) SetClipId(v float32) {
	o.ClipId = v
}

// GetStatus returns the Status field value
// If the value is explicit nil, the zero value for float32 will be returned
func (o *LiveEventSessionStatusArchive) GetStatus() float32 {
	if o == nil || o.Status.Get() == nil {
		var ret float32
		return ret
	}

	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LiveEventSessionStatusArchive) GetStatusOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// SetStatus sets field value
func (o *LiveEventSessionStatusArchive) SetStatus(v float32) {
	o.Status.Set(&v)
}

func (o LiveEventSessionStatusArchive) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LiveEventSessionStatusArchive) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["clip_id"] = o.ClipId
	toSerialize["status"] = o.Status.Get()
	return toSerialize, nil
}

type NullableLiveEventSessionStatusArchive struct {
	value *LiveEventSessionStatusArchive
	isSet bool
}

func (v NullableLiveEventSessionStatusArchive) Get() *LiveEventSessionStatusArchive {
	return v.value
}

func (v *NullableLiveEventSessionStatusArchive) Set(val *LiveEventSessionStatusArchive) {
	v.value = val
	v.isSet = true
}

func (v NullableLiveEventSessionStatusArchive) IsSet() bool {
	return v.isSet
}

func (v *NullableLiveEventSessionStatusArchive) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLiveEventSessionStatusArchive(val *LiveEventSessionStatusArchive) *NullableLiveEventSessionStatusArchive {
	return &NullableLiveEventSessionStatusArchive{value: val, isSet: true}
}

func (v NullableLiveEventSessionStatusArchive) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLiveEventSessionStatusArchive) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


