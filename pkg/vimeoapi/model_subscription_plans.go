/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SubscriptionPlans type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionPlans{}

// SubscriptionPlans struct for SubscriptionPlans
type SubscriptionPlans struct {
	Currency SubscriptionPlansCurrency `json:"currency"`
	Discount SubscriptionPlansDiscount `json:"discount"`
	// The SKU of the plan.
	Id float32 `json:"id"`
	Metadata SubscriptionPlansMetadata `json:"metadata"`
	// The name of the plan.
	Name string `json:"name"`
	Price SubscriptionPlansPrice `json:"price"`
	Promotion SubscriptionPlansPromotion `json:"promotion"`
	// The plan type.  Option descriptions:  * `advanced` - The plan type is Vimeo Advanced.  * `basic` - The plan type is Vimeo Basic.  * `business` - The plan type is Vimeo Business.  * `enterprise` - The plan type is Vimeo Enterprise.  * `free` - The plan type is Vimeo Free.  * `livePremium` - The plan type is Vimeo Premium.  * `ott` - The plan type is Vimeo OTT.  * `plus` - The plan type is Vimeo Plus.  * `pro` - The plan type is Vimeo Pro.  * `proUnlimited` - The plan type is Vimeo Pro Unlimited.  * `standard` - The plan type is Vimeo Standard.  * `starter` - The plan type is Vimeo Starter. 
	Tier string `json:"tier"`
	// The URI of the plan.
	Uri string `json:"uri"`
}

type _SubscriptionPlans SubscriptionPlans

// NewSubscriptionPlans instantiates a new SubscriptionPlans object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionPlans(currency SubscriptionPlansCurrency, discount SubscriptionPlansDiscount, id float32, metadata SubscriptionPlansMetadata, name string, price SubscriptionPlansPrice, promotion SubscriptionPlansPromotion, tier string, uri string) *SubscriptionPlans {
	this := SubscriptionPlans{}
	this.Currency = currency
	this.Discount = discount
	this.Id = id
	this.Metadata = metadata
	this.Name = name
	this.Price = price
	this.Promotion = promotion
	this.Tier = tier
	this.Uri = uri
	return &this
}

// NewSubscriptionPlansWithDefaults instantiates a new SubscriptionPlans object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionPlansWithDefaults() *SubscriptionPlans {
	this := SubscriptionPlans{}
	return &this
}

// GetCurrency returns the Currency field value
func (o *SubscriptionPlans) GetCurrency() SubscriptionPlansCurrency {
	if o == nil {
		var ret SubscriptionPlansCurrency
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *SubscriptionPlans) GetCurrencyOk() (*SubscriptionPlansCurrency, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *SubscriptionPlans) SetCurrency(v SubscriptionPlansCurrency) {
	o.Currency = v
}

// GetDiscount returns the Discount field value
func (o *SubscriptionPlans) GetDiscount() SubscriptionPlansDiscount {
	if o == nil {
		var ret SubscriptionPlansDiscount
		return ret
	}

	return o.Discount
}

// GetDiscountOk returns a tuple with the Discount field value
// and a boolean to check if the value has been set.
func (o *SubscriptionPlans) GetDiscountOk() (*SubscriptionPlansDiscount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Discount, true
}

// SetDiscount sets field value
func (o *SubscriptionPlans) SetDiscount(v SubscriptionPlansDiscount) {
	o.Discount = v
}

// GetId returns the Id field value
func (o *SubscriptionPlans) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SubscriptionPlans) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SubscriptionPlans) SetId(v float32) {
	o.Id = v
}

// GetMetadata returns the Metadata field value
func (o *SubscriptionPlans) GetMetadata() SubscriptionPlansMetadata {
	if o == nil {
		var ret SubscriptionPlansMetadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *SubscriptionPlans) GetMetadataOk() (*SubscriptionPlansMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *SubscriptionPlans) SetMetadata(v SubscriptionPlansMetadata) {
	o.Metadata = v
}

// GetName returns the Name field value
func (o *SubscriptionPlans) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SubscriptionPlans) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SubscriptionPlans) SetName(v string) {
	o.Name = v
}

// GetPrice returns the Price field value
func (o *SubscriptionPlans) GetPrice() SubscriptionPlansPrice {
	if o == nil {
		var ret SubscriptionPlansPrice
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *SubscriptionPlans) GetPriceOk() (*SubscriptionPlansPrice, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *SubscriptionPlans) SetPrice(v SubscriptionPlansPrice) {
	o.Price = v
}

// GetPromotion returns the Promotion field value
func (o *SubscriptionPlans) GetPromotion() SubscriptionPlansPromotion {
	if o == nil {
		var ret SubscriptionPlansPromotion
		return ret
	}

	return o.Promotion
}

// GetPromotionOk returns a tuple with the Promotion field value
// and a boolean to check if the value has been set.
func (o *SubscriptionPlans) GetPromotionOk() (*SubscriptionPlansPromotion, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Promotion, true
}

// SetPromotion sets field value
func (o *SubscriptionPlans) SetPromotion(v SubscriptionPlansPromotion) {
	o.Promotion = v
}

// GetTier returns the Tier field value
func (o *SubscriptionPlans) GetTier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Tier
}

// GetTierOk returns a tuple with the Tier field value
// and a boolean to check if the value has been set.
func (o *SubscriptionPlans) GetTierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tier, true
}

// SetTier sets field value
func (o *SubscriptionPlans) SetTier(v string) {
	o.Tier = v
}

// GetUri returns the Uri field value
func (o *SubscriptionPlans) GetUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uri
}

// GetUriOk returns a tuple with the Uri field value
// and a boolean to check if the value has been set.
func (o *SubscriptionPlans) GetUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uri, true
}

// SetUri sets field value
func (o *SubscriptionPlans) SetUri(v string) {
	o.Uri = v
}

func (o SubscriptionPlans) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionPlans) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["currency"] = o.Currency
	toSerialize["discount"] = o.Discount
	toSerialize["id"] = o.Id
	toSerialize["metadata"] = o.Metadata
	toSerialize["name"] = o.Name
	toSerialize["price"] = o.Price
	toSerialize["promotion"] = o.Promotion
	toSerialize["tier"] = o.Tier
	toSerialize["uri"] = o.Uri
	return toSerialize, nil
}

func (o *SubscriptionPlans) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"currency",
		"discount",
		"id",
		"metadata",
		"name",
		"price",
		"promotion",
		"tier",
		"uri",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubscriptionPlans := _SubscriptionPlans{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubscriptionPlans)

	if err != nil {
		return err
	}

	*o = SubscriptionPlans(varSubscriptionPlans)

	return err
}

type NullableSubscriptionPlans struct {
	value *SubscriptionPlans
	isSet bool
}

func (v NullableSubscriptionPlans) Get() *SubscriptionPlans {
	return v.value
}

func (v *NullableSubscriptionPlans) Set(val *SubscriptionPlans) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionPlans) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionPlans) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionPlans(val *SubscriptionPlans) *NullableSubscriptionPlans {
	return &NullableSubscriptionPlans{value: val, isSet: true}
}

func (v NullableSubscriptionPlans) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionPlans) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


