/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the SubscriptionPlansPromotionUri type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionPlansPromotionUri{}

// SubscriptionPlansPromotionUri Information about the URIs associated with the promotion.
type SubscriptionPlansPromotionUri struct {
	// The URI of the annual promotion.
	Annual *string `json:"annual,omitempty"`
	// The URI of the monthly promotion.
	Monthly *string `json:"monthly,omitempty"`
}

// NewSubscriptionPlansPromotionUri instantiates a new SubscriptionPlansPromotionUri object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionPlansPromotionUri() *SubscriptionPlansPromotionUri {
	this := SubscriptionPlansPromotionUri{}
	return &this
}

// NewSubscriptionPlansPromotionUriWithDefaults instantiates a new SubscriptionPlansPromotionUri object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionPlansPromotionUriWithDefaults() *SubscriptionPlansPromotionUri {
	this := SubscriptionPlansPromotionUri{}
	return &this
}

// GetAnnual returns the Annual field value if set, zero value otherwise.
func (o *SubscriptionPlansPromotionUri) GetAnnual() string {
	if o == nil || IsNil(o.Annual) {
		var ret string
		return ret
	}
	return *o.Annual
}

// GetAnnualOk returns a tuple with the Annual field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionPlansPromotionUri) GetAnnualOk() (*string, bool) {
	if o == nil || IsNil(o.Annual) {
		return nil, false
	}
	return o.Annual, true
}

// HasAnnual returns a boolean if a field has been set.
func (o *SubscriptionPlansPromotionUri) HasAnnual() bool {
	if o != nil && !IsNil(o.Annual) {
		return true
	}

	return false
}

// SetAnnual gets a reference to the given string and assigns it to the Annual field.
func (o *SubscriptionPlansPromotionUri) SetAnnual(v string) {
	o.Annual = &v
}

// GetMonthly returns the Monthly field value if set, zero value otherwise.
func (o *SubscriptionPlansPromotionUri) GetMonthly() string {
	if o == nil || IsNil(o.Monthly) {
		var ret string
		return ret
	}
	return *o.Monthly
}

// GetMonthlyOk returns a tuple with the Monthly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionPlansPromotionUri) GetMonthlyOk() (*string, bool) {
	if o == nil || IsNil(o.Monthly) {
		return nil, false
	}
	return o.Monthly, true
}

// HasMonthly returns a boolean if a field has been set.
func (o *SubscriptionPlansPromotionUri) HasMonthly() bool {
	if o != nil && !IsNil(o.Monthly) {
		return true
	}

	return false
}

// SetMonthly gets a reference to the given string and assigns it to the Monthly field.
func (o *SubscriptionPlansPromotionUri) SetMonthly(v string) {
	o.Monthly = &v
}

func (o SubscriptionPlansPromotionUri) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionPlansPromotionUri) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Annual) {
		toSerialize["annual"] = o.Annual
	}
	if !IsNil(o.Monthly) {
		toSerialize["monthly"] = o.Monthly
	}
	return toSerialize, nil
}

type NullableSubscriptionPlansPromotionUri struct {
	value *SubscriptionPlansPromotionUri
	isSet bool
}

func (v NullableSubscriptionPlansPromotionUri) Get() *SubscriptionPlansPromotionUri {
	return v.value
}

func (v *NullableSubscriptionPlansPromotionUri) Set(val *SubscriptionPlansPromotionUri) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionPlansPromotionUri) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionPlansPromotionUri) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionPlansPromotionUri(val *SubscriptionPlansPromotionUri) *NullableSubscriptionPlansPromotionUri {
	return &NullableSubscriptionPlansPromotionUri{value: val, isSet: true}
}

func (v NullableSubscriptionPlansPromotionUri) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionPlansPromotionUri) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


