/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EmbedSettingsTitle type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmbedSettingsTitle{}

// EmbedSettingsTitle A collection of information about the embeddable player's title bar.
type EmbedSettingsTitle struct {
	// How the embeddable player handles the video title.  Option descriptions:  * `hide` - The title is hidden.  * `show` - The title is shown.  * `user` - The title can be toggled to `show` or `hide` by the user. 
	Name string `json:"name"`
	// How the embeddable player handles the video owner's information.  Option descriptions:  * `hide` - The owner's information is hidden.  * `show` - The owner's information is shown.  * `user` - The owner's information can be toggled to `show` or `hide` by the user. 
	Owner string `json:"owner"`
	// How the embeddable player handles the video owner's portrait.  Option descriptions:  * `hide` - The owner's portrait is hidden  * `show` - The owner's portrait is shown.  * `user` - The owner's portrait can be toggled to `show` or `hide` by the user. 
	Portrait string `json:"portrait"`
}

type _EmbedSettingsTitle EmbedSettingsTitle

// NewEmbedSettingsTitle instantiates a new EmbedSettingsTitle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmbedSettingsTitle(name string, owner string, portrait string) *EmbedSettingsTitle {
	this := EmbedSettingsTitle{}
	this.Name = name
	this.Owner = owner
	this.Portrait = portrait
	return &this
}

// NewEmbedSettingsTitleWithDefaults instantiates a new EmbedSettingsTitle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmbedSettingsTitleWithDefaults() *EmbedSettingsTitle {
	this := EmbedSettingsTitle{}
	return &this
}

// GetName returns the Name field value
func (o *EmbedSettingsTitle) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EmbedSettingsTitle) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EmbedSettingsTitle) SetName(v string) {
	o.Name = v
}

// GetOwner returns the Owner field value
func (o *EmbedSettingsTitle) GetOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *EmbedSettingsTitle) GetOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *EmbedSettingsTitle) SetOwner(v string) {
	o.Owner = v
}

// GetPortrait returns the Portrait field value
func (o *EmbedSettingsTitle) GetPortrait() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Portrait
}

// GetPortraitOk returns a tuple with the Portrait field value
// and a boolean to check if the value has been set.
func (o *EmbedSettingsTitle) GetPortraitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Portrait, true
}

// SetPortrait sets field value
func (o *EmbedSettingsTitle) SetPortrait(v string) {
	o.Portrait = v
}

func (o EmbedSettingsTitle) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmbedSettingsTitle) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["owner"] = o.Owner
	toSerialize["portrait"] = o.Portrait
	return toSerialize, nil
}

func (o *EmbedSettingsTitle) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"owner",
		"portrait",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmbedSettingsTitle := _EmbedSettingsTitle{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEmbedSettingsTitle)

	if err != nil {
		return err
	}

	*o = EmbedSettingsTitle(varEmbedSettingsTitle)

	return err
}

type NullableEmbedSettingsTitle struct {
	value *EmbedSettingsTitle
	isSet bool
}

func (v NullableEmbedSettingsTitle) Get() *EmbedSettingsTitle {
	return v.value
}

func (v *NullableEmbedSettingsTitle) Set(val *EmbedSettingsTitle) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbedSettingsTitle) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbedSettingsTitle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbedSettingsTitle(val *EmbedSettingsTitle) *NullableEmbedSettingsTitle {
	return &NullableEmbedSettingsTitle{value: val, isSet: true}
}

func (v NullableEmbedSettingsTitle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbedSettingsTitle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


