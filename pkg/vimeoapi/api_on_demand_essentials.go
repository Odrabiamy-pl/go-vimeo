/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type OnDemandEssentialsAPI interface {

	/*
		CreateVod Create an On Demand page

		This method creates a new On Demand page for the specified user. To publish the page, use the [edit](https://developer.vimeo.com/api/reference/on-demand#edit_vod) method.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param userId The ID of the user.
		@return ApiCreateVodRequest
	*/
	CreateVod(ctx context.Context, userId int32) ApiCreateVodRequest

	// CreateVodExecute executes the request
	//  @return OnDemandPage
	CreateVodExecute(r ApiCreateVodRequest) (*OnDemandPage, *http.Response, error)

	/*
		CreateVodAlt1 Create an On Demand page

		This method creates a new On Demand page for the specified user. To publish the page, use the [edit](https://developer.vimeo.com/api/reference/on-demand#edit_vod) method.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiCreateVodAlt1Request
	*/
	CreateVodAlt1(ctx context.Context) ApiCreateVodAlt1Request

	// CreateVodAlt1Execute executes the request
	//  @return OnDemandPage
	CreateVodAlt1Execute(r ApiCreateVodAlt1Request) (*OnDemandPage, *http.Response, error)

	/*
		DeleteVodDraft Delete an On Demand page

		This method deletes the specified On Demand page.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param ondemandId The ID of the On Demand page.
		@return ApiDeleteVodDraftRequest
	*/
	DeleteVodDraft(ctx context.Context, ondemandId float32) ApiDeleteVodDraftRequest

	// DeleteVodDraftExecute executes the request
	DeleteVodDraftExecute(r ApiDeleteVodDraftRequest) (*http.Response, error)

	/*
		EditVod Edit an On Demand page

		This method edits the specified On Demand page. Use this method to enable preorders on the page or to publish the page.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param ondemandId The ID of the On Demand page.
		@return ApiEditVodRequest
	*/
	EditVod(ctx context.Context, ondemandId float32) ApiEditVodRequest

	// EditVodExecute executes the request
	//  @return OnDemandPage
	EditVodExecute(r ApiEditVodRequest) (*OnDemandPage, *http.Response, error)

	/*
		GetUserVods Get all the On Demand pages of the user

		This method returns every On Demand page belonging to the authenticated user.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param userId The ID of the user.
		@return ApiGetUserVodsRequest
	*/
	GetUserVods(ctx context.Context, userId int32) ApiGetUserVodsRequest

	// GetUserVodsExecute executes the request
	//  @return []OnDemandPage
	GetUserVodsExecute(r ApiGetUserVodsRequest) ([]OnDemandPage, *http.Response, error)

	/*
		GetUserVodsAlt1 Get all the On Demand pages of the user

		This method returns every On Demand page belonging to the authenticated user.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiGetUserVodsAlt1Request
	*/
	GetUserVodsAlt1(ctx context.Context) ApiGetUserVodsAlt1Request

	// GetUserVodsAlt1Execute executes the request
	//  @return []OnDemandPage
	GetUserVodsAlt1Execute(r ApiGetUserVodsAlt1Request) ([]OnDemandPage, *http.Response, error)

	/*
		GetVod Get a specific On Demand page

		This method returns the specified On Demand page.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param ondemandId The ID of the On Demand page.
		@return ApiGetVodRequest
	*/
	GetVod(ctx context.Context, ondemandId float32) ApiGetVodRequest

	// GetVodExecute executes the request
	//  @return OnDemandPage
	GetVodExecute(r ApiGetVodRequest) (*OnDemandPage, *http.Response, error)
}

// OnDemandEssentialsAPIService OnDemandEssentialsAPI service
type OnDemandEssentialsAPIService service

type ApiCreateVodRequest struct {
	ctx                  context.Context
	ApiService           OnDemandEssentialsAPI
	userId               int32
	createVodAlt1Request *CreateVodAlt1Request
}

func (r ApiCreateVodRequest) CreateVodAlt1Request(createVodAlt1Request CreateVodAlt1Request) ApiCreateVodRequest {
	r.createVodAlt1Request = &createVodAlt1Request
	return r
}

func (r ApiCreateVodRequest) Execute() (*OnDemandPage, *http.Response, error) {
	return r.ApiService.CreateVodExecute(r)
}

/*
CreateVod Create an On Demand page

This method creates a new On Demand page for the specified user. To publish the page, use the [edit](https://developer.vimeo.com/api/reference/on-demand#edit_vod) method.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId The ID of the user.
	@return ApiCreateVodRequest
*/
func (a *OnDemandEssentialsAPIService) CreateVod(ctx context.Context, userId int32) ApiCreateVodRequest {
	return ApiCreateVodRequest{
		ApiService: a,
		ctx:        ctx,
		userId:     userId,
	}
}

// Execute executes the request
//
//	@return OnDemandPage
func (a *OnDemandEssentialsAPIService) CreateVodExecute(r ApiCreateVodRequest) (*OnDemandPage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OnDemandPage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnDemandEssentialsAPIService.CreateVod")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/ondemand/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createVodAlt1Request == nil {
		return localVarReturnValue, nil, reportError("createVodAlt1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createVodAlt1Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateVodAlt1Request struct {
	ctx                  context.Context
	ApiService           OnDemandEssentialsAPI
	createVodAlt1Request *CreateVodAlt1Request
}

func (r ApiCreateVodAlt1Request) CreateVodAlt1Request(createVodAlt1Request CreateVodAlt1Request) ApiCreateVodAlt1Request {
	r.createVodAlt1Request = &createVodAlt1Request
	return r
}

func (r ApiCreateVodAlt1Request) Execute() (*OnDemandPage, *http.Response, error) {
	return r.ApiService.CreateVodAlt1Execute(r)
}

/*
CreateVodAlt1 Create an On Demand page

This method creates a new On Demand page for the specified user. To publish the page, use the [edit](https://developer.vimeo.com/api/reference/on-demand#edit_vod) method.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateVodAlt1Request
*/
func (a *OnDemandEssentialsAPIService) CreateVodAlt1(ctx context.Context) ApiCreateVodAlt1Request {
	return ApiCreateVodAlt1Request{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return OnDemandPage
func (a *OnDemandEssentialsAPIService) CreateVodAlt1Execute(r ApiCreateVodAlt1Request) (*OnDemandPage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OnDemandPage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnDemandEssentialsAPIService.CreateVodAlt1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/ondemand/pages"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createVodAlt1Request == nil {
		return localVarReturnValue, nil, reportError("createVodAlt1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createVodAlt1Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteVodDraftRequest struct {
	ctx        context.Context
	ApiService OnDemandEssentialsAPI
	ondemandId float32
}

func (r ApiDeleteVodDraftRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteVodDraftExecute(r)
}

/*
DeleteVodDraft Delete an On Demand page

This method deletes the specified On Demand page.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ondemandId The ID of the On Demand page.
	@return ApiDeleteVodDraftRequest
*/
func (a *OnDemandEssentialsAPIService) DeleteVodDraft(ctx context.Context, ondemandId float32) ApiDeleteVodDraftRequest {
	return ApiDeleteVodDraftRequest{
		ApiService: a,
		ctx:        ctx,
		ondemandId: ondemandId,
	}
}

// Execute executes the request
func (a *OnDemandEssentialsAPIService) DeleteVodDraftExecute(r ApiDeleteVodDraftRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnDemandEssentialsAPIService.DeleteVodDraft")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ondemand/pages/{ondemand_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"ondemand_id"+"}", url.PathEscape(parameterValueToString(r.ondemandId, "ondemandId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.ondemand.page+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEditVodRequest struct {
	ctx            context.Context
	ApiService     OnDemandEssentialsAPI
	ondemandId     float32
	editVodRequest *EditVodRequest
}

func (r ApiEditVodRequest) EditVodRequest(editVodRequest EditVodRequest) ApiEditVodRequest {
	r.editVodRequest = &editVodRequest
	return r
}

func (r ApiEditVodRequest) Execute() (*OnDemandPage, *http.Response, error) {
	return r.ApiService.EditVodExecute(r)
}

/*
EditVod Edit an On Demand page

This method edits the specified On Demand page. Use this method to enable preorders on the page or to publish the page.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ondemandId The ID of the On Demand page.
	@return ApiEditVodRequest
*/
func (a *OnDemandEssentialsAPIService) EditVod(ctx context.Context, ondemandId float32) ApiEditVodRequest {
	return ApiEditVodRequest{
		ApiService: a,
		ctx:        ctx,
		ondemandId: ondemandId,
	}
}

// Execute executes the request
//
//	@return OnDemandPage
func (a *OnDemandEssentialsAPIService) EditVodExecute(r ApiEditVodRequest) (*OnDemandPage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OnDemandPage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnDemandEssentialsAPIService.EditVod")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ondemand/pages/{ondemand_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"ondemand_id"+"}", url.PathEscape(parameterValueToString(r.ondemandId, "ondemandId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.vimeo.ondemand.page+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.ondemand.page+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.editVodRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetUserVodsRequest struct {
	ctx        context.Context
	ApiService OnDemandEssentialsAPI
	userId     int32
	direction  *string
	filter     *string
	page       *float32
	perPage    *float32
	sort       *string
}

// The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.
func (r ApiGetUserVodsRequest) Direction(direction string) ApiGetUserVodsRequest {
	r.direction = &direction
	return r
}

// The type of the page to return.  Option descriptions:  * &#x60;film&#x60; - The page type is a film.  * &#x60;series&#x60; - The page type is a series.
func (r ApiGetUserVodsRequest) Filter(filter string) ApiGetUserVodsRequest {
	r.filter = &filter
	return r
}

// The page number of the results to show.
func (r ApiGetUserVodsRequest) Page(page float32) ApiGetUserVodsRequest {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiGetUserVodsRequest) PerPage(perPage float32) ApiGetUserVodsRequest {
	r.perPage = &perPage
	return r
}

// The way to sort the results.  Option descriptions:  * &#x60;added&#x60; - Sort the results by most recently added page.  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;modified_time&#x60; - Sort the results by time of page modification.  * &#x60;name&#x60; - Sort the results by page name.  * &#x60;publish.time&#x60; - Sort the results by time of page publishing.  * &#x60;rating&#x60; - Sort the results by content rating.
func (r ApiGetUserVodsRequest) Sort(sort string) ApiGetUserVodsRequest {
	r.sort = &sort
	return r
}

func (r ApiGetUserVodsRequest) Execute() ([]OnDemandPage, *http.Response, error) {
	return r.ApiService.GetUserVodsExecute(r)
}

/*
GetUserVods Get all the On Demand pages of the user

This method returns every On Demand page belonging to the authenticated user.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId The ID of the user.
	@return ApiGetUserVodsRequest
*/
func (a *OnDemandEssentialsAPIService) GetUserVods(ctx context.Context, userId int32) ApiGetUserVodsRequest {
	return ApiGetUserVodsRequest{
		ApiService: a,
		ctx:        ctx,
		userId:     userId,
	}
}

// Execute executes the request
//
//	@return []OnDemandPage
func (a *OnDemandEssentialsAPIService) GetUserVodsExecute(r ApiGetUserVodsRequest) ([]OnDemandPage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []OnDemandPage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnDemandEssentialsAPIService.GetUserVods")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/ondemand/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.ondemand.page+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetUserVodsAlt1Request struct {
	ctx        context.Context
	ApiService OnDemandEssentialsAPI
	direction  *string
	filter     *string
	page       *float32
	perPage    *float32
	sort       *string
}

// The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.
func (r ApiGetUserVodsAlt1Request) Direction(direction string) ApiGetUserVodsAlt1Request {
	r.direction = &direction
	return r
}

// The type of the page to return.  Option descriptions:  * &#x60;film&#x60; - The page type is a film.  * &#x60;series&#x60; - The page type is a series.
func (r ApiGetUserVodsAlt1Request) Filter(filter string) ApiGetUserVodsAlt1Request {
	r.filter = &filter
	return r
}

// The page number of the results to show.
func (r ApiGetUserVodsAlt1Request) Page(page float32) ApiGetUserVodsAlt1Request {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiGetUserVodsAlt1Request) PerPage(perPage float32) ApiGetUserVodsAlt1Request {
	r.perPage = &perPage
	return r
}

// The way to sort the results.  Option descriptions:  * &#x60;added&#x60; - Sort the results by most recently added page.  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;modified_time&#x60; - Sort the results by time of page modification.  * &#x60;name&#x60; - Sort the results by page name.  * &#x60;publish.time&#x60; - Sort the results by time of page publishing.  * &#x60;rating&#x60; - Sort the results by content rating.
func (r ApiGetUserVodsAlt1Request) Sort(sort string) ApiGetUserVodsAlt1Request {
	r.sort = &sort
	return r
}

func (r ApiGetUserVodsAlt1Request) Execute() ([]OnDemandPage, *http.Response, error) {
	return r.ApiService.GetUserVodsAlt1Execute(r)
}

/*
GetUserVodsAlt1 Get all the On Demand pages of the user

This method returns every On Demand page belonging to the authenticated user.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetUserVodsAlt1Request
*/
func (a *OnDemandEssentialsAPIService) GetUserVodsAlt1(ctx context.Context) ApiGetUserVodsAlt1Request {
	return ApiGetUserVodsAlt1Request{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []OnDemandPage
func (a *OnDemandEssentialsAPIService) GetUserVodsAlt1Execute(r ApiGetUserVodsAlt1Request) ([]OnDemandPage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []OnDemandPage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnDemandEssentialsAPIService.GetUserVodsAlt1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/ondemand/pages"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.ondemand.page+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetVodRequest struct {
	ctx        context.Context
	ApiService OnDemandEssentialsAPI
	ondemandId float32
}

func (r ApiGetVodRequest) Execute() (*OnDemandPage, *http.Response, error) {
	return r.ApiService.GetVodExecute(r)
}

/*
GetVod Get a specific On Demand page

This method returns the specified On Demand page.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ondemandId The ID of the On Demand page.
	@return ApiGetVodRequest
*/
func (a *OnDemandEssentialsAPIService) GetVod(ctx context.Context, ondemandId float32) ApiGetVodRequest {
	return ApiGetVodRequest{
		ApiService: a,
		ctx:        ctx,
		ondemandId: ondemandId,
	}
}

// Execute executes the request
//
//	@return OnDemandPage
func (a *OnDemandEssentialsAPIService) GetVodExecute(r ApiGetVodRequest) (*OnDemandPage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OnDemandPage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnDemandEssentialsAPIService.GetVod")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ondemand/pages/{ondemand_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"ondemand_id"+"}", url.PathEscape(parameterValueToString(r.ondemandId, "ondemandId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.ondemand.page+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
