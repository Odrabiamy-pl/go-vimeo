/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the WebinarPrivacy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebinarPrivacy{}

// WebinarPrivacy The initial privacy settings of the webinar.
type WebinarPrivacy struct {
	// The webinar's embed permission setting.  Option descriptions:  * `private` - The webinar can't be embedded on any domain.  * `public` - The webinar can be embedded on any domain.  * `whitelist` - The webinar can be embedded on whitelisted domains only. 
	Embed string `json:"embed"`
	// The general privacy setting for the webinar.  Option descriptions:  * `anybody` - Anyone can access the webinar. This privacy setting appears as `Public` on the Vimeo front end.  * `nobody` - Only the event owner can access the webinar. This privacy setting appears as `Private` on the Vimeo front end.  * `password` - Only those with the password can access the live event.  * `team` - Only members of the authenticated user's team can access the webinar. 
	View string `json:"view"`
}

// NewWebinarPrivacy instantiates a new WebinarPrivacy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebinarPrivacy(embed string, view string) *WebinarPrivacy {
	this := WebinarPrivacy{}
	this.Embed = embed
	this.View = view
	return &this
}

// NewWebinarPrivacyWithDefaults instantiates a new WebinarPrivacy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebinarPrivacyWithDefaults() *WebinarPrivacy {
	this := WebinarPrivacy{}
	return &this
}

// GetEmbed returns the Embed field value
func (o *WebinarPrivacy) GetEmbed() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Embed
}

// GetEmbedOk returns a tuple with the Embed field value
// and a boolean to check if the value has been set.
func (o *WebinarPrivacy) GetEmbedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Embed, true
}

// SetEmbed sets field value
func (o *WebinarPrivacy) SetEmbed(v string) {
	o.Embed = v
}

// GetView returns the View field value
func (o *WebinarPrivacy) GetView() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.View
}

// GetViewOk returns a tuple with the View field value
// and a boolean to check if the value has been set.
func (o *WebinarPrivacy) GetViewOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.View, true
}

// SetView sets field value
func (o *WebinarPrivacy) SetView(v string) {
	o.View = v
}

func (o WebinarPrivacy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebinarPrivacy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["embed"] = o.Embed
	toSerialize["view"] = o.View
	return toSerialize, nil
}

type NullableWebinarPrivacy struct {
	value *WebinarPrivacy
	isSet bool
}

func (v NullableWebinarPrivacy) Get() *WebinarPrivacy {
	return v.value
}

func (v *NullableWebinarPrivacy) Set(val *WebinarPrivacy) {
	v.value = val
	v.isSet = true
}

func (v NullableWebinarPrivacy) IsSet() bool {
	return v.isSet
}

func (v *NullableWebinarPrivacy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebinarPrivacy(val *WebinarPrivacy) *NullableWebinarPrivacy {
	return &NullableWebinarPrivacy{value: val, isSet: true}
}

func (v NullableWebinarPrivacy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebinarPrivacy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


