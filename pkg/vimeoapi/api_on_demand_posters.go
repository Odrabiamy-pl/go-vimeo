/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type OnDemandPostersAPI interface {

	/*
		AddVodPoster Add a poster to an On Demand page

		This method adds a poster image to the specified On Demand page. The authenticated user must be the owner of the page.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param ondemandId The ID of the On Demand page.
		@return ApiAddVodPosterRequest
	*/
	AddVodPoster(ctx context.Context, ondemandId float32) ApiAddVodPosterRequest

	// AddVodPosterExecute executes the request
	//  @return Picture
	AddVodPosterExecute(r ApiAddVodPosterRequest) (*Picture, *http.Response, error)

	/*
		EditVodPoster Edit a poster on an On Demand page

		This method edits a poster image on the specified On Demand page. The authenticated user must be the owner of the page.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param ondemandId The ID of the On Demand page.
		@param posterId The ID of the poster.
		@return ApiEditVodPosterRequest
	*/
	EditVodPoster(ctx context.Context, ondemandId float32, posterId float32) ApiEditVodPosterRequest

	// EditVodPosterExecute executes the request
	//  @return Picture
	EditVodPosterExecute(r ApiEditVodPosterRequest) (*Picture, *http.Response, error)

	/*
		GetVodPoster Get a specific poster on an On Demand page

		This method returns a single poster on the specified On Demand page.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param ondemandId The ID of the On Demand page.
		@param posterId The ID of the poster.
		@return ApiGetVodPosterRequest
	*/
	GetVodPoster(ctx context.Context, ondemandId float32, posterId float32) ApiGetVodPosterRequest

	// GetVodPosterExecute executes the request
	//  @return Picture
	GetVodPosterExecute(r ApiGetVodPosterRequest) (*Picture, *http.Response, error)

	/*
		GetVodPosters Get all the posters on an On Demand page

		This method returns every poster on the specified On Demand page.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param ondemandId The ID of the On Demand page.
		@return ApiGetVodPostersRequest
	*/
	GetVodPosters(ctx context.Context, ondemandId float32) ApiGetVodPostersRequest

	// GetVodPostersExecute executes the request
	//  @return []Picture
	GetVodPostersExecute(r ApiGetVodPostersRequest) ([]Picture, *http.Response, error)
}

// OnDemandPostersAPIService OnDemandPostersAPI service
type OnDemandPostersAPIService service

type ApiAddVodPosterRequest struct {
	ctx        context.Context
	ApiService OnDemandPostersAPI
	ondemandId float32
}

func (r ApiAddVodPosterRequest) Execute() (*Picture, *http.Response, error) {
	return r.ApiService.AddVodPosterExecute(r)
}

/*
AddVodPoster Add a poster to an On Demand page

This method adds a poster image to the specified On Demand page. The authenticated user must be the owner of the page.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ondemandId The ID of the On Demand page.
	@return ApiAddVodPosterRequest
*/
func (a *OnDemandPostersAPIService) AddVodPoster(ctx context.Context, ondemandId float32) ApiAddVodPosterRequest {
	return ApiAddVodPosterRequest{
		ApiService: a,
		ctx:        ctx,
		ondemandId: ondemandId,
	}
}

// Execute executes the request
//
//	@return Picture
func (a *OnDemandPostersAPIService) AddVodPosterExecute(r ApiAddVodPosterRequest) (*Picture, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Picture
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnDemandPostersAPIService.AddVodPoster")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ondemand/pages/{ondemand_id}/pictures"
	localVarPath = strings.Replace(localVarPath, "{"+"ondemand_id"+"}", url.PathEscape(parameterValueToString(r.ondemandId, "ondemandId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.picture+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEditVodPosterRequest struct {
	ctx                  context.Context
	ApiService           OnDemandPostersAPI
	ondemandId           float32
	posterId             float32
	editVodPosterRequest *EditVodPosterRequest
}

func (r ApiEditVodPosterRequest) EditVodPosterRequest(editVodPosterRequest EditVodPosterRequest) ApiEditVodPosterRequest {
	r.editVodPosterRequest = &editVodPosterRequest
	return r
}

func (r ApiEditVodPosterRequest) Execute() (*Picture, *http.Response, error) {
	return r.ApiService.EditVodPosterExecute(r)
}

/*
EditVodPoster Edit a poster on an On Demand page

This method edits a poster image on the specified On Demand page. The authenticated user must be the owner of the page.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ondemandId The ID of the On Demand page.
	@param posterId The ID of the poster.
	@return ApiEditVodPosterRequest
*/
func (a *OnDemandPostersAPIService) EditVodPoster(ctx context.Context, ondemandId float32, posterId float32) ApiEditVodPosterRequest {
	return ApiEditVodPosterRequest{
		ApiService: a,
		ctx:        ctx,
		ondemandId: ondemandId,
		posterId:   posterId,
	}
}

// Execute executes the request
//
//	@return Picture
func (a *OnDemandPostersAPIService) EditVodPosterExecute(r ApiEditVodPosterRequest) (*Picture, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Picture
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnDemandPostersAPIService.EditVodPoster")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ondemand/pages/{ondemand_id}/pictures/{poster_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"ondemand_id"+"}", url.PathEscape(parameterValueToString(r.ondemandId, "ondemandId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"poster_id"+"}", url.PathEscape(parameterValueToString(r.posterId, "posterId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.vimeo.picture+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.picture+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.editVodPosterRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetVodPosterRequest struct {
	ctx        context.Context
	ApiService OnDemandPostersAPI
	ondemandId float32
	posterId   float32
}

func (r ApiGetVodPosterRequest) Execute() (*Picture, *http.Response, error) {
	return r.ApiService.GetVodPosterExecute(r)
}

/*
GetVodPoster Get a specific poster on an On Demand page

This method returns a single poster on the specified On Demand page.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ondemandId The ID of the On Demand page.
	@param posterId The ID of the poster.
	@return ApiGetVodPosterRequest
*/
func (a *OnDemandPostersAPIService) GetVodPoster(ctx context.Context, ondemandId float32, posterId float32) ApiGetVodPosterRequest {
	return ApiGetVodPosterRequest{
		ApiService: a,
		ctx:        ctx,
		ondemandId: ondemandId,
		posterId:   posterId,
	}
}

// Execute executes the request
//
//	@return Picture
func (a *OnDemandPostersAPIService) GetVodPosterExecute(r ApiGetVodPosterRequest) (*Picture, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Picture
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnDemandPostersAPIService.GetVodPoster")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ondemand/pages/{ondemand_id}/pictures/{poster_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"ondemand_id"+"}", url.PathEscape(parameterValueToString(r.ondemandId, "ondemandId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"poster_id"+"}", url.PathEscape(parameterValueToString(r.posterId, "posterId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.picture+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetVodPostersRequest struct {
	ctx        context.Context
	ApiService OnDemandPostersAPI
	ondemandId float32
	page       *float32
	perPage    *float32
}

// The page number of the results to show.
func (r ApiGetVodPostersRequest) Page(page float32) ApiGetVodPostersRequest {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiGetVodPostersRequest) PerPage(perPage float32) ApiGetVodPostersRequest {
	r.perPage = &perPage
	return r
}

func (r ApiGetVodPostersRequest) Execute() ([]Picture, *http.Response, error) {
	return r.ApiService.GetVodPostersExecute(r)
}

/*
GetVodPosters Get all the posters on an On Demand page

This method returns every poster on the specified On Demand page.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ondemandId The ID of the On Demand page.
	@return ApiGetVodPostersRequest
*/
func (a *OnDemandPostersAPIService) GetVodPosters(ctx context.Context, ondemandId float32) ApiGetVodPostersRequest {
	return ApiGetVodPostersRequest{
		ApiService: a,
		ctx:        ctx,
		ondemandId: ondemandId,
	}
}

// Execute executes the request
//
//	@return []Picture
func (a *OnDemandPostersAPIService) GetVodPostersExecute(r ApiGetVodPostersRequest) ([]Picture, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Picture
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnDemandPostersAPIService.GetVodPosters")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ondemand/pages/{ondemand_id}/pictures"
	localVarPath = strings.Replace(localVarPath, "{"+"ondemand_id"+"}", url.PathEscape(parameterValueToString(r.ondemandId, "ondemandId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.picture+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
