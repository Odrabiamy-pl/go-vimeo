/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type UsersPicturesAPI interface {

	/*
			CreatePicture Add a picture to the user's account

			This method adds a portrait image to the authenticated user's Vimeo account. Send the binary data of the image file to the location that you receive
		from the **link** field in the response. For step-by-step instructions, see
		[Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail-step-3).

			@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			@param userId The ID of the user.
			@return ApiCreatePictureRequest
	*/
	CreatePicture(ctx context.Context, userId int32) ApiCreatePictureRequest

	// CreatePictureExecute executes the request
	//  @return Picture
	CreatePictureExecute(r ApiCreatePictureRequest) (*Picture, *http.Response, error)

	/*
			CreatePictureAlt1 Add a picture to the user's account

			This method adds a portrait image to the authenticated user's Vimeo account. Send the binary data of the image file to the location that you receive
		from the **link** field in the response. For step-by-step instructions, see
		[Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail-step-3).

			@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			@return ApiCreatePictureAlt1Request
	*/
	CreatePictureAlt1(ctx context.Context) ApiCreatePictureAlt1Request

	// CreatePictureAlt1Execute executes the request
	//  @return Picture
	CreatePictureAlt1Execute(r ApiCreatePictureAlt1Request) (*Picture, *http.Response, error)

	/*
		DeletePicture Delete a picture from the user's account

		This method removes the specified portrait image from the authenticated user's Vimeo account.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param portraitsetId The ID of the picture.
		@param userId The ID of the user.
		@return ApiDeletePictureRequest
	*/
	DeletePicture(ctx context.Context, portraitsetId float32, userId int32) ApiDeletePictureRequest

	// DeletePictureExecute executes the request
	DeletePictureExecute(r ApiDeletePictureRequest) (*http.Response, error)

	/*
		DeletePictureAlt1 Delete a picture from the user's account

		This method removes the specified portrait image from the authenticated user's Vimeo account.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param portraitsetId The ID of the picture.
		@return ApiDeletePictureAlt1Request
	*/
	DeletePictureAlt1(ctx context.Context, portraitsetId float32) ApiDeletePictureAlt1Request

	// DeletePictureAlt1Execute executes the request
	DeletePictureAlt1Execute(r ApiDeletePictureAlt1Request) (*http.Response, error)

	/*
		EditPicture Edit a picture in the user's account

		This method edits the specified portrait image belonging to the authenticated user.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param portraitsetId The ID of the picture.
		@param userId The ID of the user.
		@return ApiEditPictureRequest
	*/
	EditPicture(ctx context.Context, portraitsetId float32, userId int32) ApiEditPictureRequest

	// EditPictureExecute executes the request
	//  @return Picture
	EditPictureExecute(r ApiEditPictureRequest) (*Picture, *http.Response, error)

	/*
		EditPictureAlt1 Edit a picture in the user's account

		This method edits the specified portrait image belonging to the authenticated user.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param portraitsetId The ID of the picture.
		@return ApiEditPictureAlt1Request
	*/
	EditPictureAlt1(ctx context.Context, portraitsetId float32) ApiEditPictureAlt1Request

	// EditPictureAlt1Execute executes the request
	//  @return Picture
	EditPictureAlt1Execute(r ApiEditPictureAlt1Request) (*Picture, *http.Response, error)

	/*
		GetPicture Get a specific picture that belongs to the user

		This method returns a single portrait image belonging to the authenticated user.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param portraitsetId The ID of the picture.
		@param userId The ID of the user.
		@return ApiGetPictureRequest
	*/
	GetPicture(ctx context.Context, portraitsetId float32, userId int32) ApiGetPictureRequest

	// GetPictureExecute executes the request
	//  @return Picture
	GetPictureExecute(r ApiGetPictureRequest) (*Picture, *http.Response, error)

	/*
		GetPictureAlt1 Get a specific picture that belongs to the user

		This method returns a single portrait image belonging to the authenticated user.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param portraitsetId The ID of the picture.
		@return ApiGetPictureAlt1Request
	*/
	GetPictureAlt1(ctx context.Context, portraitsetId float32) ApiGetPictureAlt1Request

	// GetPictureAlt1Execute executes the request
	//  @return Picture
	GetPictureAlt1Execute(r ApiGetPictureAlt1Request) (*Picture, *http.Response, error)

	/*
		GetPictures Get all the pictures that belong to the user

		This method returns every portrait image belonging to the authenticated user.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param userId The ID of the user.
		@return ApiGetPicturesRequest
	*/
	GetPictures(ctx context.Context, userId int32) ApiGetPicturesRequest

	// GetPicturesExecute executes the request
	//  @return []Picture
	GetPicturesExecute(r ApiGetPicturesRequest) ([]Picture, *http.Response, error)

	/*
		GetPicturesAlt1 Get all the pictures that belong to the user

		This method returns every portrait image belonging to the authenticated user.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiGetPicturesAlt1Request
	*/
	GetPicturesAlt1(ctx context.Context) ApiGetPicturesAlt1Request

	// GetPicturesAlt1Execute executes the request
	//  @return []Picture
	GetPicturesAlt1Execute(r ApiGetPicturesAlt1Request) ([]Picture, *http.Response, error)
}

// UsersPicturesAPIService UsersPicturesAPI service
type UsersPicturesAPIService service

type ApiCreatePictureRequest struct {
	ctx        context.Context
	ApiService UsersPicturesAPI
	userId     int32
}

func (r ApiCreatePictureRequest) Execute() (*Picture, *http.Response, error) {
	return r.ApiService.CreatePictureExecute(r)
}

/*
CreatePicture Add a picture to the user's account

This method adds a portrait image to the authenticated user's Vimeo account. Send the binary data of the image file to the location that you receive
from the **link** field in the response. For step-by-step instructions, see
[Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail-step-3).

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId The ID of the user.
	@return ApiCreatePictureRequest
*/
func (a *UsersPicturesAPIService) CreatePicture(ctx context.Context, userId int32) ApiCreatePictureRequest {
	return ApiCreatePictureRequest{
		ApiService: a,
		ctx:        ctx,
		userId:     userId,
	}
}

// Execute executes the request
//
//	@return Picture
func (a *UsersPicturesAPIService) CreatePictureExecute(r ApiCreatePictureRequest) (*Picture, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Picture
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersPicturesAPIService.CreatePicture")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/pictures"
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.picture+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreatePictureAlt1Request struct {
	ctx        context.Context
	ApiService UsersPicturesAPI
}

func (r ApiCreatePictureAlt1Request) Execute() (*Picture, *http.Response, error) {
	return r.ApiService.CreatePictureAlt1Execute(r)
}

/*
CreatePictureAlt1 Add a picture to the user's account

This method adds a portrait image to the authenticated user's Vimeo account. Send the binary data of the image file to the location that you receive
from the **link** field in the response. For step-by-step instructions, see
[Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail-step-3).

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreatePictureAlt1Request
*/
func (a *UsersPicturesAPIService) CreatePictureAlt1(ctx context.Context) ApiCreatePictureAlt1Request {
	return ApiCreatePictureAlt1Request{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Picture
func (a *UsersPicturesAPIService) CreatePictureAlt1Execute(r ApiCreatePictureAlt1Request) (*Picture, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Picture
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersPicturesAPIService.CreatePictureAlt1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/pictures"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.picture+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeletePictureRequest struct {
	ctx           context.Context
	ApiService    UsersPicturesAPI
	portraitsetId float32
	userId        int32
}

func (r ApiDeletePictureRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeletePictureExecute(r)
}

/*
DeletePicture Delete a picture from the user's account

This method removes the specified portrait image from the authenticated user's Vimeo account.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param portraitsetId The ID of the picture.
	@param userId The ID of the user.
	@return ApiDeletePictureRequest
*/
func (a *UsersPicturesAPIService) DeletePicture(ctx context.Context, portraitsetId float32, userId int32) ApiDeletePictureRequest {
	return ApiDeletePictureRequest{
		ApiService:    a,
		ctx:           ctx,
		portraitsetId: portraitsetId,
		userId:        userId,
	}
}

// Execute executes the request
func (a *UsersPicturesAPIService) DeletePictureExecute(r ApiDeletePictureRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersPicturesAPIService.DeletePicture")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/pictures/{portraitset_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"portraitset_id"+"}", url.PathEscape(parameterValueToString(r.portraitsetId, "portraitsetId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeletePictureAlt1Request struct {
	ctx           context.Context
	ApiService    UsersPicturesAPI
	portraitsetId float32
}

func (r ApiDeletePictureAlt1Request) Execute() (*http.Response, error) {
	return r.ApiService.DeletePictureAlt1Execute(r)
}

/*
DeletePictureAlt1 Delete a picture from the user's account

This method removes the specified portrait image from the authenticated user's Vimeo account.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param portraitsetId The ID of the picture.
	@return ApiDeletePictureAlt1Request
*/
func (a *UsersPicturesAPIService) DeletePictureAlt1(ctx context.Context, portraitsetId float32) ApiDeletePictureAlt1Request {
	return ApiDeletePictureAlt1Request{
		ApiService:    a,
		ctx:           ctx,
		portraitsetId: portraitsetId,
	}
}

// Execute executes the request
func (a *UsersPicturesAPIService) DeletePictureAlt1Execute(r ApiDeletePictureAlt1Request) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersPicturesAPIService.DeletePictureAlt1")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/pictures/{portraitset_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"portraitset_id"+"}", url.PathEscape(parameterValueToString(r.portraitsetId, "portraitsetId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEditPictureRequest struct {
	ctx                    context.Context
	ApiService             UsersPicturesAPI
	portraitsetId          float32
	userId                 int32
	editPictureAlt1Request *EditPictureAlt1Request
}

func (r ApiEditPictureRequest) EditPictureAlt1Request(editPictureAlt1Request EditPictureAlt1Request) ApiEditPictureRequest {
	r.editPictureAlt1Request = &editPictureAlt1Request
	return r
}

func (r ApiEditPictureRequest) Execute() (*Picture, *http.Response, error) {
	return r.ApiService.EditPictureExecute(r)
}

/*
EditPicture Edit a picture in the user's account

This method edits the specified portrait image belonging to the authenticated user.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param portraitsetId The ID of the picture.
	@param userId The ID of the user.
	@return ApiEditPictureRequest
*/
func (a *UsersPicturesAPIService) EditPicture(ctx context.Context, portraitsetId float32, userId int32) ApiEditPictureRequest {
	return ApiEditPictureRequest{
		ApiService:    a,
		ctx:           ctx,
		portraitsetId: portraitsetId,
		userId:        userId,
	}
}

// Execute executes the request
//
//	@return Picture
func (a *UsersPicturesAPIService) EditPictureExecute(r ApiEditPictureRequest) (*Picture, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Picture
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersPicturesAPIService.EditPicture")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/pictures/{portraitset_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"portraitset_id"+"}", url.PathEscape(parameterValueToString(r.portraitsetId, "portraitsetId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.vimeo.picture+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.picture+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.editPictureAlt1Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEditPictureAlt1Request struct {
	ctx                    context.Context
	ApiService             UsersPicturesAPI
	portraitsetId          float32
	editPictureAlt1Request *EditPictureAlt1Request
}

func (r ApiEditPictureAlt1Request) EditPictureAlt1Request(editPictureAlt1Request EditPictureAlt1Request) ApiEditPictureAlt1Request {
	r.editPictureAlt1Request = &editPictureAlt1Request
	return r
}

func (r ApiEditPictureAlt1Request) Execute() (*Picture, *http.Response, error) {
	return r.ApiService.EditPictureAlt1Execute(r)
}

/*
EditPictureAlt1 Edit a picture in the user's account

This method edits the specified portrait image belonging to the authenticated user.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param portraitsetId The ID of the picture.
	@return ApiEditPictureAlt1Request
*/
func (a *UsersPicturesAPIService) EditPictureAlt1(ctx context.Context, portraitsetId float32) ApiEditPictureAlt1Request {
	return ApiEditPictureAlt1Request{
		ApiService:    a,
		ctx:           ctx,
		portraitsetId: portraitsetId,
	}
}

// Execute executes the request
//
//	@return Picture
func (a *UsersPicturesAPIService) EditPictureAlt1Execute(r ApiEditPictureAlt1Request) (*Picture, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Picture
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersPicturesAPIService.EditPictureAlt1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/pictures/{portraitset_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"portraitset_id"+"}", url.PathEscape(parameterValueToString(r.portraitsetId, "portraitsetId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.vimeo.picture+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.picture+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.editPictureAlt1Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPictureRequest struct {
	ctx           context.Context
	ApiService    UsersPicturesAPI
	portraitsetId float32
	userId        int32
}

func (r ApiGetPictureRequest) Execute() (*Picture, *http.Response, error) {
	return r.ApiService.GetPictureExecute(r)
}

/*
GetPicture Get a specific picture that belongs to the user

This method returns a single portrait image belonging to the authenticated user.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param portraitsetId The ID of the picture.
	@param userId The ID of the user.
	@return ApiGetPictureRequest
*/
func (a *UsersPicturesAPIService) GetPicture(ctx context.Context, portraitsetId float32, userId int32) ApiGetPictureRequest {
	return ApiGetPictureRequest{
		ApiService:    a,
		ctx:           ctx,
		portraitsetId: portraitsetId,
		userId:        userId,
	}
}

// Execute executes the request
//
//	@return Picture
func (a *UsersPicturesAPIService) GetPictureExecute(r ApiGetPictureRequest) (*Picture, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Picture
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersPicturesAPIService.GetPicture")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/pictures/{portraitset_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"portraitset_id"+"}", url.PathEscape(parameterValueToString(r.portraitsetId, "portraitsetId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.picture+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPictureAlt1Request struct {
	ctx           context.Context
	ApiService    UsersPicturesAPI
	portraitsetId float32
}

func (r ApiGetPictureAlt1Request) Execute() (*Picture, *http.Response, error) {
	return r.ApiService.GetPictureAlt1Execute(r)
}

/*
GetPictureAlt1 Get a specific picture that belongs to the user

This method returns a single portrait image belonging to the authenticated user.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param portraitsetId The ID of the picture.
	@return ApiGetPictureAlt1Request
*/
func (a *UsersPicturesAPIService) GetPictureAlt1(ctx context.Context, portraitsetId float32) ApiGetPictureAlt1Request {
	return ApiGetPictureAlt1Request{
		ApiService:    a,
		ctx:           ctx,
		portraitsetId: portraitsetId,
	}
}

// Execute executes the request
//
//	@return Picture
func (a *UsersPicturesAPIService) GetPictureAlt1Execute(r ApiGetPictureAlt1Request) (*Picture, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Picture
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersPicturesAPIService.GetPictureAlt1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/pictures/{portraitset_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"portraitset_id"+"}", url.PathEscape(parameterValueToString(r.portraitsetId, "portraitsetId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.picture+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPicturesRequest struct {
	ctx        context.Context
	ApiService UsersPicturesAPI
	userId     int32
	page       *float32
	perPage    *float32
}

// The page number of the results to show.
func (r ApiGetPicturesRequest) Page(page float32) ApiGetPicturesRequest {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiGetPicturesRequest) PerPage(perPage float32) ApiGetPicturesRequest {
	r.perPage = &perPage
	return r
}

func (r ApiGetPicturesRequest) Execute() ([]Picture, *http.Response, error) {
	return r.ApiService.GetPicturesExecute(r)
}

/*
GetPictures Get all the pictures that belong to the user

This method returns every portrait image belonging to the authenticated user.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId The ID of the user.
	@return ApiGetPicturesRequest
*/
func (a *UsersPicturesAPIService) GetPictures(ctx context.Context, userId int32) ApiGetPicturesRequest {
	return ApiGetPicturesRequest{
		ApiService: a,
		ctx:        ctx,
		userId:     userId,
	}
}

// Execute executes the request
//
//	@return []Picture
func (a *UsersPicturesAPIService) GetPicturesExecute(r ApiGetPicturesRequest) ([]Picture, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Picture
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersPicturesAPIService.GetPictures")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/pictures"
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.picture+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPicturesAlt1Request struct {
	ctx        context.Context
	ApiService UsersPicturesAPI
	page       *float32
	perPage    *float32
}

// The page number of the results to show.
func (r ApiGetPicturesAlt1Request) Page(page float32) ApiGetPicturesAlt1Request {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiGetPicturesAlt1Request) PerPage(perPage float32) ApiGetPicturesAlt1Request {
	r.perPage = &perPage
	return r
}

func (r ApiGetPicturesAlt1Request) Execute() ([]Picture, *http.Response, error) {
	return r.ApiService.GetPicturesAlt1Execute(r)
}

/*
GetPicturesAlt1 Get all the pictures that belong to the user

This method returns every portrait image belonging to the authenticated user.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetPicturesAlt1Request
*/
func (a *UsersPicturesAPIService) GetPicturesAlt1(ctx context.Context) ApiGetPicturesAlt1Request {
	return ApiGetPicturesAlt1Request{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Picture
func (a *UsersPicturesAPIService) GetPicturesAlt1Execute(r ApiGetPicturesAlt1Request) ([]Picture, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Picture
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersPicturesAPIService.GetPicturesAlt1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/pictures"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.picture+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
