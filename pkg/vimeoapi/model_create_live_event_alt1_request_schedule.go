/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the CreateLiveEventAlt1RequestSchedule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateLiveEventAlt1RequestSchedule{}

// CreateLiveEventAlt1RequestSchedule Information about the time or times that the event is expected to be live.
type CreateLiveEventAlt1RequestSchedule struct {
	// The time in ISO 8601 format when the event is expected to be live, with the zero UTC offset `Z`. This parameter is required when **schedule.type** is `weekly`.
	DailyTime *string `json:"daily_time,omitempty"`
	// How often the event is expected to be live.  Option descriptions:  * `single` - The event is live one time only.  * `weekly` - The event is live on a weekly basis. 
	Type *string `json:"type,omitempty"`
	// A non-empty array of weekdays on which the event is expected to be live. Weekdays can range from 1 to 7, where 1 is Monday and 7 is Sunday. This parameter is required when **schedule.type** is `weekly`.
	Weekdays []string `json:"weekdays,omitempty"`
}

// NewCreateLiveEventAlt1RequestSchedule instantiates a new CreateLiveEventAlt1RequestSchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateLiveEventAlt1RequestSchedule() *CreateLiveEventAlt1RequestSchedule {
	this := CreateLiveEventAlt1RequestSchedule{}
	return &this
}

// NewCreateLiveEventAlt1RequestScheduleWithDefaults instantiates a new CreateLiveEventAlt1RequestSchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateLiveEventAlt1RequestScheduleWithDefaults() *CreateLiveEventAlt1RequestSchedule {
	this := CreateLiveEventAlt1RequestSchedule{}
	return &this
}

// GetDailyTime returns the DailyTime field value if set, zero value otherwise.
func (o *CreateLiveEventAlt1RequestSchedule) GetDailyTime() string {
	if o == nil || IsNil(o.DailyTime) {
		var ret string
		return ret
	}
	return *o.DailyTime
}

// GetDailyTimeOk returns a tuple with the DailyTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateLiveEventAlt1RequestSchedule) GetDailyTimeOk() (*string, bool) {
	if o == nil || IsNil(o.DailyTime) {
		return nil, false
	}
	return o.DailyTime, true
}

// HasDailyTime returns a boolean if a field has been set.
func (o *CreateLiveEventAlt1RequestSchedule) HasDailyTime() bool {
	if o != nil && !IsNil(o.DailyTime) {
		return true
	}

	return false
}

// SetDailyTime gets a reference to the given string and assigns it to the DailyTime field.
func (o *CreateLiveEventAlt1RequestSchedule) SetDailyTime(v string) {
	o.DailyTime = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CreateLiveEventAlt1RequestSchedule) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateLiveEventAlt1RequestSchedule) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CreateLiveEventAlt1RequestSchedule) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CreateLiveEventAlt1RequestSchedule) SetType(v string) {
	o.Type = &v
}

// GetWeekdays returns the Weekdays field value if set, zero value otherwise.
func (o *CreateLiveEventAlt1RequestSchedule) GetWeekdays() []string {
	if o == nil || IsNil(o.Weekdays) {
		var ret []string
		return ret
	}
	return o.Weekdays
}

// GetWeekdaysOk returns a tuple with the Weekdays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateLiveEventAlt1RequestSchedule) GetWeekdaysOk() ([]string, bool) {
	if o == nil || IsNil(o.Weekdays) {
		return nil, false
	}
	return o.Weekdays, true
}

// HasWeekdays returns a boolean if a field has been set.
func (o *CreateLiveEventAlt1RequestSchedule) HasWeekdays() bool {
	if o != nil && !IsNil(o.Weekdays) {
		return true
	}

	return false
}

// SetWeekdays gets a reference to the given []string and assigns it to the Weekdays field.
func (o *CreateLiveEventAlt1RequestSchedule) SetWeekdays(v []string) {
	o.Weekdays = v
}

func (o CreateLiveEventAlt1RequestSchedule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateLiveEventAlt1RequestSchedule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DailyTime) {
		toSerialize["daily_time"] = o.DailyTime
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Weekdays) {
		toSerialize["weekdays"] = o.Weekdays
	}
	return toSerialize, nil
}

type NullableCreateLiveEventAlt1RequestSchedule struct {
	value *CreateLiveEventAlt1RequestSchedule
	isSet bool
}

func (v NullableCreateLiveEventAlt1RequestSchedule) Get() *CreateLiveEventAlt1RequestSchedule {
	return v.value
}

func (v *NullableCreateLiveEventAlt1RequestSchedule) Set(val *CreateLiveEventAlt1RequestSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateLiveEventAlt1RequestSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateLiveEventAlt1RequestSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateLiveEventAlt1RequestSchedule(val *CreateLiveEventAlt1RequestSchedule) *NullableCreateLiveEventAlt1RequestSchedule {
	return &NullableCreateLiveEventAlt1RequestSchedule{value: val, isSet: true}
}

func (v NullableCreateLiveEventAlt1RequestSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateLiveEventAlt1RequestSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


