/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type OnDemandSeasonsAPI interface {

	/*
		GetVodSeason Get a specific season on an On Demand page

		This method returns a single season on the specified On Demand page.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param ondemandId The ID of the On Demand page.
		@param seasonId The ID of the season.
		@return ApiGetVodSeasonRequest
	*/
	GetVodSeason(ctx context.Context, ondemandId float32, seasonId float32) ApiGetVodSeasonRequest

	// GetVodSeasonExecute executes the request
	//  @return OnDemandSeason
	GetVodSeasonExecute(r ApiGetVodSeasonRequest) (*OnDemandSeason, *http.Response, error)

	/*
		GetVodSeasonVideos Get all the videos in a season on an On Demand page

		This method returns every video in the specified season on an On Demand page.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param ondemandId The ID of the On Demand page.
		@param seasonId The ID of the season.
		@return ApiGetVodSeasonVideosRequest
	*/
	GetVodSeasonVideos(ctx context.Context, ondemandId float32, seasonId float32) ApiGetVodSeasonVideosRequest

	// GetVodSeasonVideosExecute executes the request
	//  @return []Video
	GetVodSeasonVideosExecute(r ApiGetVodSeasonVideosRequest) ([]Video, *http.Response, error)

	/*
		GetVodSeasons Get all the seasons on an On Demand page

		This method returns every season on the specified On Demand page.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param ondemandId The ID of the On Demand page.
		@return ApiGetVodSeasonsRequest
	*/
	GetVodSeasons(ctx context.Context, ondemandId float32) ApiGetVodSeasonsRequest

	// GetVodSeasonsExecute executes the request
	//  @return []OnDemandSeason
	GetVodSeasonsExecute(r ApiGetVodSeasonsRequest) ([]OnDemandSeason, *http.Response, error)
}

// OnDemandSeasonsAPIService OnDemandSeasonsAPI service
type OnDemandSeasonsAPIService service

type ApiGetVodSeasonRequest struct {
	ctx        context.Context
	ApiService OnDemandSeasonsAPI
	ondemandId float32
	seasonId   float32
}

func (r ApiGetVodSeasonRequest) Execute() (*OnDemandSeason, *http.Response, error) {
	return r.ApiService.GetVodSeasonExecute(r)
}

/*
GetVodSeason Get a specific season on an On Demand page

This method returns a single season on the specified On Demand page.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ondemandId The ID of the On Demand page.
	@param seasonId The ID of the season.
	@return ApiGetVodSeasonRequest
*/
func (a *OnDemandSeasonsAPIService) GetVodSeason(ctx context.Context, ondemandId float32, seasonId float32) ApiGetVodSeasonRequest {
	return ApiGetVodSeasonRequest{
		ApiService: a,
		ctx:        ctx,
		ondemandId: ondemandId,
		seasonId:   seasonId,
	}
}

// Execute executes the request
//
//	@return OnDemandSeason
func (a *OnDemandSeasonsAPIService) GetVodSeasonExecute(r ApiGetVodSeasonRequest) (*OnDemandSeason, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OnDemandSeason
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnDemandSeasonsAPIService.GetVodSeason")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ondemand/pages/{ondemand_id}/seasons/{season_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"ondemand_id"+"}", url.PathEscape(parameterValueToString(r.ondemandId, "ondemandId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"season_id"+"}", url.PathEscape(parameterValueToString(r.seasonId, "seasonId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.ondemand.season+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetVodSeasonVideosRequest struct {
	ctx        context.Context
	ApiService OnDemandSeasonsAPI
	ondemandId float32
	seasonId   float32
	filter     *string
	page       *float32
	perPage    *float32
	sort       *string
}

// The attribute by which to filter the results.  Option descriptions:  * &#x60;viewable&#x60; - Filter by viewable videos.
func (r ApiGetVodSeasonVideosRequest) Filter(filter string) ApiGetVodSeasonVideosRequest {
	r.filter = &filter
	return r
}

// The page number of the results to show.
func (r ApiGetVodSeasonVideosRequest) Page(page float32) ApiGetVodSeasonVideosRequest {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiGetVodSeasonVideosRequest) PerPage(perPage float32) ApiGetVodSeasonVideosRequest {
	r.perPage = &perPage
	return r
}

// The way to sort the results.  Option descriptions:  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sorting method.  * &#x60;manual&#x60; - Sort the results manually.  * &#x60;name&#x60; - Sort the results by name.  * &#x60;purchase_time&#x60; - Sort the results by time of purchase.  * &#x60;release_date&#x60; - Sort the results by release date.
func (r ApiGetVodSeasonVideosRequest) Sort(sort string) ApiGetVodSeasonVideosRequest {
	r.sort = &sort
	return r
}

func (r ApiGetVodSeasonVideosRequest) Execute() ([]Video, *http.Response, error) {
	return r.ApiService.GetVodSeasonVideosExecute(r)
}

/*
GetVodSeasonVideos Get all the videos in a season on an On Demand page

This method returns every video in the specified season on an On Demand page.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ondemandId The ID of the On Demand page.
	@param seasonId The ID of the season.
	@return ApiGetVodSeasonVideosRequest
*/
func (a *OnDemandSeasonsAPIService) GetVodSeasonVideos(ctx context.Context, ondemandId float32, seasonId float32) ApiGetVodSeasonVideosRequest {
	return ApiGetVodSeasonVideosRequest{
		ApiService: a,
		ctx:        ctx,
		ondemandId: ondemandId,
		seasonId:   seasonId,
	}
}

// Execute executes the request
//
//	@return []Video
func (a *OnDemandSeasonsAPIService) GetVodSeasonVideosExecute(r ApiGetVodSeasonVideosRequest) ([]Video, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Video
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnDemandSeasonsAPIService.GetVodSeasonVideos")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ondemand/pages/{ondemand_id}/seasons/{season_id}/videos"
	localVarPath = strings.Replace(localVarPath, "{"+"ondemand_id"+"}", url.PathEscape(parameterValueToString(r.ondemandId, "ondemandId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"season_id"+"}", url.PathEscape(parameterValueToString(r.seasonId, "seasonId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.video+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetVodSeasonsRequest struct {
	ctx        context.Context
	ApiService OnDemandSeasonsAPI
	ondemandId float32
	direction  *string
	filter     *string
	page       *float32
	perPage    *float32
	sort       *string
}

// The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.
func (r ApiGetVodSeasonsRequest) Direction(direction string) ApiGetVodSeasonsRequest {
	r.direction = &direction
	return r
}

// The attribute by which to filter the results.  Option descriptions:  * &#x60;viewable&#x60; - Filter by viewable seasons.
func (r ApiGetVodSeasonsRequest) Filter(filter string) ApiGetVodSeasonsRequest {
	r.filter = &filter
	return r
}

// The page number of the results to show.
func (r ApiGetVodSeasonsRequest) Page(page float32) ApiGetVodSeasonsRequest {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiGetVodSeasonsRequest) PerPage(perPage float32) ApiGetVodSeasonsRequest {
	r.perPage = &perPage
	return r
}

// The way to sort the results.  Option descriptions:  * &#x60;date&#x60; - Sort the results by date.  * &#x60;manual&#x60; - Sort the results manually.
func (r ApiGetVodSeasonsRequest) Sort(sort string) ApiGetVodSeasonsRequest {
	r.sort = &sort
	return r
}

func (r ApiGetVodSeasonsRequest) Execute() ([]OnDemandSeason, *http.Response, error) {
	return r.ApiService.GetVodSeasonsExecute(r)
}

/*
GetVodSeasons Get all the seasons on an On Demand page

This method returns every season on the specified On Demand page.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ondemandId The ID of the On Demand page.
	@return ApiGetVodSeasonsRequest
*/
func (a *OnDemandSeasonsAPIService) GetVodSeasons(ctx context.Context, ondemandId float32) ApiGetVodSeasonsRequest {
	return ApiGetVodSeasonsRequest{
		ApiService: a,
		ctx:        ctx,
		ondemandId: ondemandId,
	}
}

// Execute executes the request
//
//	@return []OnDemandSeason
func (a *OnDemandSeasonsAPIService) GetVodSeasonsExecute(r ApiGetVodSeasonsRequest) ([]OnDemandSeason, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []OnDemandSeason
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnDemandSeasonsAPIService.GetVodSeasons")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ondemand/pages/{ondemand_id}/seasons"
	localVarPath = strings.Replace(localVarPath, "{"+"ondemand_id"+"}", url.PathEscape(parameterValueToString(r.ondemandId, "ondemandId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.ondemand.season+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
