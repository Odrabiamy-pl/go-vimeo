/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the CreateVideoVersionRequestUpload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateVideoVersionRequestUpload{}

// CreateVideoVersionRequestUpload struct for CreateVideoVersionRequestUpload
type CreateVideoVersionRequestUpload struct {
	// The approach by which to upload the version.  Option descriptions:  * `post` - Use the `post` method.  * `pull` - Use the `pull` method.  * `tus` - Use the `tus` method.
	Approach string `json:"approach"`
	// The public URL from which to download the version when **upload.approach** is `pull`. This URL must be valid for at least 24 hours.
	Link *string `json:"link,omitempty"`
	// The app's redirect URL when **upload.approach** is `post`.
	RedirectUrl *string `json:"redirect_url,omitempty"`
	// The upload size of the version.
	Size *string `json:"size,omitempty"`
}

// NewCreateVideoVersionRequestUpload instantiates a new CreateVideoVersionRequestUpload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateVideoVersionRequestUpload(approach string) *CreateVideoVersionRequestUpload {
	this := CreateVideoVersionRequestUpload{}
	this.Approach = approach
	return &this
}

// NewCreateVideoVersionRequestUploadWithDefaults instantiates a new CreateVideoVersionRequestUpload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateVideoVersionRequestUploadWithDefaults() *CreateVideoVersionRequestUpload {
	this := CreateVideoVersionRequestUpload{}
	return &this
}

// GetApproach returns the Approach field value
func (o *CreateVideoVersionRequestUpload) GetApproach() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Approach
}

// GetApproachOk returns a tuple with the Approach field value
// and a boolean to check if the value has been set.
func (o *CreateVideoVersionRequestUpload) GetApproachOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Approach, true
}

// SetApproach sets field value
func (o *CreateVideoVersionRequestUpload) SetApproach(v string) {
	o.Approach = v
}

// GetLink returns the Link field value if set, zero value otherwise.
func (o *CreateVideoVersionRequestUpload) GetLink() string {
	if o == nil || IsNil(o.Link) {
		var ret string
		return ret
	}
	return *o.Link
}

// GetLinkOk returns a tuple with the Link field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateVideoVersionRequestUpload) GetLinkOk() (*string, bool) {
	if o == nil || IsNil(o.Link) {
		return nil, false
	}
	return o.Link, true
}

// HasLink returns a boolean if a field has been set.
func (o *CreateVideoVersionRequestUpload) HasLink() bool {
	if o != nil && !IsNil(o.Link) {
		return true
	}

	return false
}

// SetLink gets a reference to the given string and assigns it to the Link field.
func (o *CreateVideoVersionRequestUpload) SetLink(v string) {
	o.Link = &v
}

// GetRedirectUrl returns the RedirectUrl field value if set, zero value otherwise.
func (o *CreateVideoVersionRequestUpload) GetRedirectUrl() string {
	if o == nil || IsNil(o.RedirectUrl) {
		var ret string
		return ret
	}
	return *o.RedirectUrl
}

// GetRedirectUrlOk returns a tuple with the RedirectUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateVideoVersionRequestUpload) GetRedirectUrlOk() (*string, bool) {
	if o == nil || IsNil(o.RedirectUrl) {
		return nil, false
	}
	return o.RedirectUrl, true
}

// HasRedirectUrl returns a boolean if a field has been set.
func (o *CreateVideoVersionRequestUpload) HasRedirectUrl() bool {
	if o != nil && !IsNil(o.RedirectUrl) {
		return true
	}

	return false
}

// SetRedirectUrl gets a reference to the given string and assigns it to the RedirectUrl field.
func (o *CreateVideoVersionRequestUpload) SetRedirectUrl(v string) {
	o.RedirectUrl = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *CreateVideoVersionRequestUpload) GetSize() string {
	if o == nil || IsNil(o.Size) {
		var ret string
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateVideoVersionRequestUpload) GetSizeOk() (*string, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *CreateVideoVersionRequestUpload) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given string and assigns it to the Size field.
func (o *CreateVideoVersionRequestUpload) SetSize(v string) {
	o.Size = &v
}

func (o CreateVideoVersionRequestUpload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateVideoVersionRequestUpload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["approach"] = o.Approach
	if !IsNil(o.Link) {
		toSerialize["link"] = o.Link
	}
	if !IsNil(o.RedirectUrl) {
		toSerialize["redirect_url"] = o.RedirectUrl
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	return toSerialize, nil
}

type NullableCreateVideoVersionRequestUpload struct {
	value *CreateVideoVersionRequestUpload
	isSet bool
}

func (v NullableCreateVideoVersionRequestUpload) Get() *CreateVideoVersionRequestUpload {
	return v.value
}

func (v *NullableCreateVideoVersionRequestUpload) Set(val *CreateVideoVersionRequestUpload) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateVideoVersionRequestUpload) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateVideoVersionRequestUpload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateVideoVersionRequestUpload(val *CreateVideoVersionRequestUpload) *NullableCreateVideoVersionRequestUpload {
	return &NullableCreateVideoVersionRequestUpload{value: val, isSet: true}
}

func (v NullableCreateVideoVersionRequestUpload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateVideoVersionRequestUpload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
