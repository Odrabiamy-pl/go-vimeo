/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the LiveEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LiveEvent{}

// LiveEvent struct for LiveEvent
type LiveEvent struct {
	// Information about the associated showcase.
	Album []string `json:"album"`
	// Whether the share link for the videos generated by streaming to the event is usable.
	AllowShareLink bool `json:"allow_share_link"`
	// An array of privacy settings supported for this event and the requesting user.
	AllowedPrivacies []string `json:"allowed_privacies"`
	// Whether the automated closed captions feature is enabled.
	AutoCcEnabled NullableBool `json:"auto_cc_enabled"`
	// A comma-separated list of keywords for enhancing the speech detection of automated closed captions.
	AutoCcKeywords NullableString `json:"auto_cc_keywords"`
	// The language of the automated closed captions.  Option descriptions:  * `de-DE` - The language is German.  * `en-US` - The language is English.  * `es-ES` - The language is Spanish.  * `fr-FR` - The language is French.  * `pt-BR` - The language is Portuguese. 
	AutoCcLanguage NullableString `json:"auto_cc_language"`
	// The amount of time remaining to the user to access the automated closed captions feature.
	AutoCcRemaining NullableFloat32 `json:"auto_cc_remaining"`
	// When the value of this field is `true`, the title for the next video in the event is generated based on the time of the stream and the **title** field of the event.
	AutomaticallyTitleStream bool `json:"automatically_title_stream"`
	// Whether to display live chat on the event page on Vimeo.
	ChatEnabled bool `json:"chat_enabled"`
	// The time in ISO 8601 format when the event was completed.
	CompletedOn string `json:"completed_on"`
	// The event's granular content ratings.  Option descriptions:  * `advertisement` - The event contains advertisements.  * `drugs` - The event contains drug or alcohol use.  * `language` - The event contains profanity or sexually suggestive content.  * `nudity` - The event contains nudity.  * `safe` - The event is safe for all audiences.  * `unrated` - The event hasn't been rated.  * `violence` - The event contains violence. 
	ContentRating []string `json:"content_rating"`
	// The time in ISO 8601 format when the event was created.
	CreatedTime string `json:"created_time"`
	// Whether the DVR feature is enabled.
	Dvr bool `json:"dvr"`
	EmailQuota LiveEventEmailQuota `json:"email_quota"`
	Embed LiveEventEmbed `json:"embed"`
	// Whether the event was created from a showcase.
	FromShowcase bool `json:"from_showcase"`
	// Whether the event was created from a webinar.
	FromWebinar *bool `json:"from_webinar,omitempty"`
	// The first video to be played in the playlist.
	HeadClip map[string]interface{} `json:"head_clip"`
	// The settings for the interaction tools.
	InteractionToolsSettings []LiveEventInteractionToolsSettingsInner `json:"interaction_tools_settings"`
	// The type of latency.  Option descriptions:  * `fail-safe` - The latency is in the failsafe range, with a delay of 60-75 seconds.  * `low` - The latency is low, with a delay of 5-7 seconds.  * `standard` - The latency is standard, with a delay of 15-20 seconds. 
	Latency string `json:"latency"`
	// The unique ID for the registered viewer.
	LeadUuid string `json:"lead_uuid"`
	// The URI to access the event on Vimeo.
	Link string `json:"link"`
	// A list of videos belonging to the event, including their video IDs and dates streamed.
	LiveClips []string `json:"live_clips"`
	// _This field is deprecated in favor of the following method:_ [Get all the destinations of a one-time live event](https://developer.vimeo.com/api/reference/live#get_one_time_event_destinations).
	LiveDestinations []string `json:"live_destinations"`
	// Whether the low-latency feature is enabled.
	LowLatency bool `json:"low_latency"`
	Metadata LiveEventMetadata `json:"metadata"`
	// The date in ISO 8601 format on which the next occurrence of the event is expected to be live.
	NextOccurrenceTime NullableString `json:"next_occurrence_time"`
	ParentFolder NullableLiveEventParentFolder `json:"parent_folder"`
	Pictures Picture `json:"pictures"`
	// The order in which the videos inside the event appear in the playlist.  Option descriptions:  * `added_first` - The videos appear according to when they were added to the event, with the most recently added first.  * `added_last` - The videos appear according to when they were added to the event, with the most recently added last.  * `alphabetical` - The videos appear alphabetically by their title.  * `arranged` - The videos appear as arranged by the owner of the event.  * `comments` - The videos appear according to their number of comments.  * `duration` - The videos appear in order of duration.  * `likes` - The videos appear according to their number of likes.  * `newest` - The videos appear in chronological order, with the newest first.  * `oldest` - The videos appear in chronological order, with the oldest first.  * `plays` - The videos appear according to their number of plays. 
	PlaylistSort string `json:"playlist_sort"`
	// The preferred streaming method.  Option descriptions:  * `browser` - Stream in the browser.  * `encoder` - Stream by the encoder. 
	PreferredStreamMethod string `json:"preferred_stream_method"`
	// The upstream RTMP link. Send your live content to this link to create a live video on the event.
	RtmpLink NullableString `json:"rtmp_link"`
	// Whether to preview the RTMP stream before the event goes live.
	RtmpPreview bool `json:"rtmp_preview"`
	// The upstream RTMPS link. Send your live content to this link to create a live video on the event.
	RtmpsLink NullableString `json:"rtmps_link"`
	Schedule LiveEventSchedule `json:"schedule"`
	// Whether the scheduled playback feature is enabled.
	ScheduledPlayback bool `json:"scheduled_playback"`
	// The status of the event.  Option descriptions:  * `ended` - The user ended the event.  * `started` - The user started the event. 
	Status NullableString `json:"status"`
	// The description of the next video streamed to the event.
	StreamDescription NullableString `json:"stream_description"`
	// The stream key used in conjunction with the RTMP and RTMPS links.
	StreamKey NullableString `json:"stream_key"`
	// The stream mode of the event.  Option descriptions:  * `live` - The stream is live playback.  * `record` - The stream is in record mode.  * `simulive` - The stream is scheduled media playback. 
	StreamMode string `json:"stream_mode"`
	// The password that anyone can use to access the videos generated by streaming to the event.
	StreamPassword NullableString `json:"stream_password"`
	StreamPrivacy LiveEventStreamPrivacy `json:"stream_privacy"`
	// The title of the next video streamed to the event. This field applies only when **automatically_title_stream** is `false`.
	StreamTitle string `json:"stream_title"`
	// The event's video. An event always has a video, which is either in a pre-live state (ready to be streamed to) or in a live state (which is currently being streamed to).
	StreamableClip map[string]interface{} `json:"streamable_clip"`
	// The time zone used in resolving the timestamps included in auto-generated video titles.
	TimeZone string `json:"time_zone"`
	// The title of the event. This field is also optionally used as the base title for videos created by streaming to the event.
	Title string `json:"title"`
	// Whether to ignore the time limit of the automated closed captions feature.
	UnlimitedAutoCc NullableBool `json:"unlimited_auto_cc"`
	// Whether 24/7 streaming is enabled for the event.
	UnlimitedDuration bool `json:"unlimited_duration"`
	// The event's canonical relative URI.
	Uri string `json:"uri"`
	User User `json:"user"`
	// The URI to access the event on Vimeo with or without an unlisted hash.
	ViewLink string `json:"view_link"`
	// Information about the associated webinar.
	Webinar []string `json:"webinar"`
}

// NewLiveEvent instantiates a new LiveEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLiveEvent(album []string, allowShareLink bool, allowedPrivacies []string, autoCcEnabled NullableBool, autoCcKeywords NullableString, autoCcLanguage NullableString, autoCcRemaining NullableFloat32, automaticallyTitleStream bool, chatEnabled bool, completedOn string, contentRating []string, createdTime string, dvr bool, emailQuota LiveEventEmailQuota, embed LiveEventEmbed, fromShowcase bool, headClip map[string]interface{}, interactionToolsSettings []LiveEventInteractionToolsSettingsInner, latency string, leadUuid string, link string, liveClips []string, liveDestinations []string, lowLatency bool, metadata LiveEventMetadata, nextOccurrenceTime NullableString, parentFolder NullableLiveEventParentFolder, pictures Picture, playlistSort string, preferredStreamMethod string, rtmpLink NullableString, rtmpPreview bool, rtmpsLink NullableString, schedule LiveEventSchedule, scheduledPlayback bool, status NullableString, streamDescription NullableString, streamKey NullableString, streamMode string, streamPassword NullableString, streamPrivacy LiveEventStreamPrivacy, streamTitle string, streamableClip map[string]interface{}, timeZone string, title string, unlimitedAutoCc NullableBool, unlimitedDuration bool, uri string, user User, viewLink string, webinar []string) *LiveEvent {
	this := LiveEvent{}
	this.Album = album
	this.AllowShareLink = allowShareLink
	this.AllowedPrivacies = allowedPrivacies
	this.AutoCcEnabled = autoCcEnabled
	this.AutoCcKeywords = autoCcKeywords
	this.AutoCcLanguage = autoCcLanguage
	this.AutoCcRemaining = autoCcRemaining
	this.AutomaticallyTitleStream = automaticallyTitleStream
	this.ChatEnabled = chatEnabled
	this.CompletedOn = completedOn
	this.ContentRating = contentRating
	this.CreatedTime = createdTime
	this.Dvr = dvr
	this.EmailQuota = emailQuota
	this.Embed = embed
	this.FromShowcase = fromShowcase
	this.HeadClip = headClip
	this.InteractionToolsSettings = interactionToolsSettings
	this.Latency = latency
	this.LeadUuid = leadUuid
	this.Link = link
	this.LiveClips = liveClips
	this.LiveDestinations = liveDestinations
	this.LowLatency = lowLatency
	this.Metadata = metadata
	this.NextOccurrenceTime = nextOccurrenceTime
	this.ParentFolder = parentFolder
	this.Pictures = pictures
	this.PlaylistSort = playlistSort
	this.PreferredStreamMethod = preferredStreamMethod
	this.RtmpLink = rtmpLink
	this.RtmpPreview = rtmpPreview
	this.RtmpsLink = rtmpsLink
	this.Schedule = schedule
	this.ScheduledPlayback = scheduledPlayback
	this.Status = status
	this.StreamDescription = streamDescription
	this.StreamKey = streamKey
	this.StreamMode = streamMode
	this.StreamPassword = streamPassword
	this.StreamPrivacy = streamPrivacy
	this.StreamTitle = streamTitle
	this.StreamableClip = streamableClip
	this.TimeZone = timeZone
	this.Title = title
	this.UnlimitedAutoCc = unlimitedAutoCc
	this.UnlimitedDuration = unlimitedDuration
	this.Uri = uri
	this.User = user
	this.ViewLink = viewLink
	this.Webinar = webinar
	return &this
}

// NewLiveEventWithDefaults instantiates a new LiveEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLiveEventWithDefaults() *LiveEvent {
	this := LiveEvent{}
	return &this
}

// GetAlbum returns the Album field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *LiveEvent) GetAlbum() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Album
}

// GetAlbumOk returns a tuple with the Album field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LiveEvent) GetAlbumOk() ([]string, bool) {
	if o == nil || IsNil(o.Album) {
		return nil, false
	}
	return o.Album, true
}

// SetAlbum sets field value
func (o *LiveEvent) SetAlbum(v []string) {
	o.Album = v
}

// GetAllowShareLink returns the AllowShareLink field value
func (o *LiveEvent) GetAllowShareLink() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowShareLink
}

// GetAllowShareLinkOk returns a tuple with the AllowShareLink field value
// and a boolean to check if the value has been set.
func (o *LiveEvent) GetAllowShareLinkOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllowShareLink, true
}

// SetAllowShareLink sets field value
func (o *LiveEvent) SetAllowShareLink(v bool) {
	o.AllowShareLink = v
}

// GetAllowedPrivacies returns the AllowedPrivacies field value
func (o *LiveEvent) GetAllowedPrivacies() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AllowedPrivacies
}

// GetAllowedPrivaciesOk returns a tuple with the AllowedPrivacies field value
// and a boolean to check if the value has been set.
func (o *LiveEvent) GetAllowedPrivaciesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllowedPrivacies, true
}

// SetAllowedPrivacies sets field value
func (o *LiveEvent) SetAllowedPrivacies(v []string) {
	o.AllowedPrivacies = v
}

// GetAutoCcEnabled returns the AutoCcEnabled field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *LiveEvent) GetAutoCcEnabled() bool {
	if o == nil || o.AutoCcEnabled.Get() == nil {
		var ret bool
		return ret
	}

	return *o.AutoCcEnabled.Get()
}

// GetAutoCcEnabledOk returns a tuple with the AutoCcEnabled field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LiveEvent) GetAutoCcEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AutoCcEnabled.Get(), o.AutoCcEnabled.IsSet()
}

// SetAutoCcEnabled sets field value
func (o *LiveEvent) SetAutoCcEnabled(v bool) {
	o.AutoCcEnabled.Set(&v)
}

// GetAutoCcKeywords returns the AutoCcKeywords field value
// If the value is explicit nil, the zero value for string will be returned
func (o *LiveEvent) GetAutoCcKeywords() string {
	if o == nil || o.AutoCcKeywords.Get() == nil {
		var ret string
		return ret
	}

	return *o.AutoCcKeywords.Get()
}

// GetAutoCcKeywordsOk returns a tuple with the AutoCcKeywords field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LiveEvent) GetAutoCcKeywordsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AutoCcKeywords.Get(), o.AutoCcKeywords.IsSet()
}

// SetAutoCcKeywords sets field value
func (o *LiveEvent) SetAutoCcKeywords(v string) {
	o.AutoCcKeywords.Set(&v)
}

// GetAutoCcLanguage returns the AutoCcLanguage field value
// If the value is explicit nil, the zero value for string will be returned
func (o *LiveEvent) GetAutoCcLanguage() string {
	if o == nil || o.AutoCcLanguage.Get() == nil {
		var ret string
		return ret
	}

	return *o.AutoCcLanguage.Get()
}

// GetAutoCcLanguageOk returns a tuple with the AutoCcLanguage field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LiveEvent) GetAutoCcLanguageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AutoCcLanguage.Get(), o.AutoCcLanguage.IsSet()
}

// SetAutoCcLanguage sets field value
func (o *LiveEvent) SetAutoCcLanguage(v string) {
	o.AutoCcLanguage.Set(&v)
}

// GetAutoCcRemaining returns the AutoCcRemaining field value
// If the value is explicit nil, the zero value for float32 will be returned
func (o *LiveEvent) GetAutoCcRemaining() float32 {
	if o == nil || o.AutoCcRemaining.Get() == nil {
		var ret float32
		return ret
	}

	return *o.AutoCcRemaining.Get()
}

// GetAutoCcRemainingOk returns a tuple with the AutoCcRemaining field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LiveEvent) GetAutoCcRemainingOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AutoCcRemaining.Get(), o.AutoCcRemaining.IsSet()
}

// SetAutoCcRemaining sets field value
func (o *LiveEvent) SetAutoCcRemaining(v float32) {
	o.AutoCcRemaining.Set(&v)
}

// GetAutomaticallyTitleStream returns the AutomaticallyTitleStream field value
func (o *LiveEvent) GetAutomaticallyTitleStream() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AutomaticallyTitleStream
}

// GetAutomaticallyTitleStreamOk returns a tuple with the AutomaticallyTitleStream field value
// and a boolean to check if the value has been set.
func (o *LiveEvent) GetAutomaticallyTitleStreamOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AutomaticallyTitleStream, true
}

// SetAutomaticallyTitleStream sets field value
func (o *LiveEvent) SetAutomaticallyTitleStream(v bool) {
	o.AutomaticallyTitleStream = v
}

// GetChatEnabled returns the ChatEnabled field value
func (o *LiveEvent) GetChatEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ChatEnabled
}

// GetChatEnabledOk returns a tuple with the ChatEnabled field value
// and a boolean to check if the value has been set.
func (o *LiveEvent) GetChatEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChatEnabled, true
}

// SetChatEnabled sets field value
func (o *LiveEvent) SetChatEnabled(v bool) {
	o.ChatEnabled = v
}

// GetCompletedOn returns the CompletedOn field value
func (o *LiveEvent) GetCompletedOn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CompletedOn
}

// GetCompletedOnOk returns a tuple with the CompletedOn field value
// and a boolean to check if the value has been set.
func (o *LiveEvent) GetCompletedOnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompletedOn, true
}

// SetCompletedOn sets field value
func (o *LiveEvent) SetCompletedOn(v string) {
	o.CompletedOn = v
}

// GetContentRating returns the ContentRating field value
func (o *LiveEvent) GetContentRating() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ContentRating
}

// GetContentRatingOk returns a tuple with the ContentRating field value
// and a boolean to check if the value has been set.
func (o *LiveEvent) GetContentRatingOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContentRating, true
}

// SetContentRating sets field value
func (o *LiveEvent) SetContentRating(v []string) {
	o.ContentRating = v
}

// GetCreatedTime returns the CreatedTime field value
func (o *LiveEvent) GetCreatedTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value
// and a boolean to check if the value has been set.
func (o *LiveEvent) GetCreatedTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTime, true
}

// SetCreatedTime sets field value
func (o *LiveEvent) SetCreatedTime(v string) {
	o.CreatedTime = v
}

// GetDvr returns the Dvr field value
func (o *LiveEvent) GetDvr() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Dvr
}

// GetDvrOk returns a tuple with the Dvr field value
// and a boolean to check if the value has been set.
func (o *LiveEvent) GetDvrOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dvr, true
}

// SetDvr sets field value
func (o *LiveEvent) SetDvr(v bool) {
	o.Dvr = v
}

// GetEmailQuota returns the EmailQuota field value
func (o *LiveEvent) GetEmailQuota() LiveEventEmailQuota {
	if o == nil {
		var ret LiveEventEmailQuota
		return ret
	}

	return o.EmailQuota
}

// GetEmailQuotaOk returns a tuple with the EmailQuota field value
// and a boolean to check if the value has been set.
func (o *LiveEvent) GetEmailQuotaOk() (*LiveEventEmailQuota, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EmailQuota, true
}

// SetEmailQuota sets field value
func (o *LiveEvent) SetEmailQuota(v LiveEventEmailQuota) {
	o.EmailQuota = v
}

// GetEmbed returns the Embed field value
func (o *LiveEvent) GetEmbed() LiveEventEmbed {
	if o == nil {
		var ret LiveEventEmbed
		return ret
	}

	return o.Embed
}

// GetEmbedOk returns a tuple with the Embed field value
// and a boolean to check if the value has been set.
func (o *LiveEvent) GetEmbedOk() (*LiveEventEmbed, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Embed, true
}

// SetEmbed sets field value
func (o *LiveEvent) SetEmbed(v LiveEventEmbed) {
	o.Embed = v
}

// GetFromShowcase returns the FromShowcase field value
func (o *LiveEvent) GetFromShowcase() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.FromShowcase
}

// GetFromShowcaseOk returns a tuple with the FromShowcase field value
// and a boolean to check if the value has been set.
func (o *LiveEvent) GetFromShowcaseOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromShowcase, true
}

// SetFromShowcase sets field value
func (o *LiveEvent) SetFromShowcase(v bool) {
	o.FromShowcase = v
}

// GetFromWebinar returns the FromWebinar field value if set, zero value otherwise.
func (o *LiveEvent) GetFromWebinar() bool {
	if o == nil || IsNil(o.FromWebinar) {
		var ret bool
		return ret
	}
	return *o.FromWebinar
}

// GetFromWebinarOk returns a tuple with the FromWebinar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LiveEvent) GetFromWebinarOk() (*bool, bool) {
	if o == nil || IsNil(o.FromWebinar) {
		return nil, false
	}
	return o.FromWebinar, true
}

// HasFromWebinar returns a boolean if a field has been set.
func (o *LiveEvent) HasFromWebinar() bool {
	if o != nil && !IsNil(o.FromWebinar) {
		return true
	}

	return false
}

// SetFromWebinar gets a reference to the given bool and assigns it to the FromWebinar field.
func (o *LiveEvent) SetFromWebinar(v bool) {
	o.FromWebinar = &v
}

// GetHeadClip returns the HeadClip field value
// If the value is explicit nil, the zero value for map[string]interface{} will be returned
func (o *LiveEvent) GetHeadClip() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.HeadClip
}

// GetHeadClipOk returns a tuple with the HeadClip field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LiveEvent) GetHeadClipOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.HeadClip) {
		return map[string]interface{}{}, false
	}
	return o.HeadClip, true
}

// SetHeadClip sets field value
func (o *LiveEvent) SetHeadClip(v map[string]interface{}) {
	o.HeadClip = v
}

// GetInteractionToolsSettings returns the InteractionToolsSettings field value
// If the value is explicit nil, the zero value for []LiveEventInteractionToolsSettingsInner will be returned
func (o *LiveEvent) GetInteractionToolsSettings() []LiveEventInteractionToolsSettingsInner {
	if o == nil {
		var ret []LiveEventInteractionToolsSettingsInner
		return ret
	}

	return o.InteractionToolsSettings
}

// GetInteractionToolsSettingsOk returns a tuple with the InteractionToolsSettings field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LiveEvent) GetInteractionToolsSettingsOk() ([]LiveEventInteractionToolsSettingsInner, bool) {
	if o == nil || IsNil(o.InteractionToolsSettings) {
		return nil, false
	}
	return o.InteractionToolsSettings, true
}

// SetInteractionToolsSettings sets field value
func (o *LiveEvent) SetInteractionToolsSettings(v []LiveEventInteractionToolsSettingsInner) {
	o.InteractionToolsSettings = v
}

// GetLatency returns the Latency field value
func (o *LiveEvent) GetLatency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Latency
}

// GetLatencyOk returns a tuple with the Latency field value
// and a boolean to check if the value has been set.
func (o *LiveEvent) GetLatencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Latency, true
}

// SetLatency sets field value
func (o *LiveEvent) SetLatency(v string) {
	o.Latency = v
}

// GetLeadUuid returns the LeadUuid field value
func (o *LiveEvent) GetLeadUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LeadUuid
}

// GetLeadUuidOk returns a tuple with the LeadUuid field value
// and a boolean to check if the value has been set.
func (o *LiveEvent) GetLeadUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LeadUuid, true
}

// SetLeadUuid sets field value
func (o *LiveEvent) SetLeadUuid(v string) {
	o.LeadUuid = v
}

// GetLink returns the Link field value
func (o *LiveEvent) GetLink() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Link
}

// GetLinkOk returns a tuple with the Link field value
// and a boolean to check if the value has been set.
func (o *LiveEvent) GetLinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Link, true
}

// SetLink sets field value
func (o *LiveEvent) SetLink(v string) {
	o.Link = v
}

// GetLiveClips returns the LiveClips field value
func (o *LiveEvent) GetLiveClips() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.LiveClips
}

// GetLiveClipsOk returns a tuple with the LiveClips field value
// and a boolean to check if the value has been set.
func (o *LiveEvent) GetLiveClipsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LiveClips, true
}

// SetLiveClips sets field value
func (o *LiveEvent) SetLiveClips(v []string) {
	o.LiveClips = v
}

// GetLiveDestinations returns the LiveDestinations field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *LiveEvent) GetLiveDestinations() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.LiveDestinations
}

// GetLiveDestinationsOk returns a tuple with the LiveDestinations field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LiveEvent) GetLiveDestinationsOk() ([]string, bool) {
	if o == nil || IsNil(o.LiveDestinations) {
		return nil, false
	}
	return o.LiveDestinations, true
}

// SetLiveDestinations sets field value
func (o *LiveEvent) SetLiveDestinations(v []string) {
	o.LiveDestinations = v
}

// GetLowLatency returns the LowLatency field value
func (o *LiveEvent) GetLowLatency() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.LowLatency
}

// GetLowLatencyOk returns a tuple with the LowLatency field value
// and a boolean to check if the value has been set.
func (o *LiveEvent) GetLowLatencyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LowLatency, true
}

// SetLowLatency sets field value
func (o *LiveEvent) SetLowLatency(v bool) {
	o.LowLatency = v
}

// GetMetadata returns the Metadata field value
func (o *LiveEvent) GetMetadata() LiveEventMetadata {
	if o == nil {
		var ret LiveEventMetadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *LiveEvent) GetMetadataOk() (*LiveEventMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *LiveEvent) SetMetadata(v LiveEventMetadata) {
	o.Metadata = v
}

// GetNextOccurrenceTime returns the NextOccurrenceTime field value
// If the value is explicit nil, the zero value for string will be returned
func (o *LiveEvent) GetNextOccurrenceTime() string {
	if o == nil || o.NextOccurrenceTime.Get() == nil {
		var ret string
		return ret
	}

	return *o.NextOccurrenceTime.Get()
}

// GetNextOccurrenceTimeOk returns a tuple with the NextOccurrenceTime field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LiveEvent) GetNextOccurrenceTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NextOccurrenceTime.Get(), o.NextOccurrenceTime.IsSet()
}

// SetNextOccurrenceTime sets field value
func (o *LiveEvent) SetNextOccurrenceTime(v string) {
	o.NextOccurrenceTime.Set(&v)
}

// GetParentFolder returns the ParentFolder field value
// If the value is explicit nil, the zero value for LiveEventParentFolder will be returned
func (o *LiveEvent) GetParentFolder() LiveEventParentFolder {
	if o == nil || o.ParentFolder.Get() == nil {
		var ret LiveEventParentFolder
		return ret
	}

	return *o.ParentFolder.Get()
}

// GetParentFolderOk returns a tuple with the ParentFolder field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LiveEvent) GetParentFolderOk() (*LiveEventParentFolder, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentFolder.Get(), o.ParentFolder.IsSet()
}

// SetParentFolder sets field value
func (o *LiveEvent) SetParentFolder(v LiveEventParentFolder) {
	o.ParentFolder.Set(&v)
}

// GetPictures returns the Pictures field value
func (o *LiveEvent) GetPictures() Picture {
	if o == nil {
		var ret Picture
		return ret
	}

	return o.Pictures
}

// GetPicturesOk returns a tuple with the Pictures field value
// and a boolean to check if the value has been set.
func (o *LiveEvent) GetPicturesOk() (*Picture, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pictures, true
}

// SetPictures sets field value
func (o *LiveEvent) SetPictures(v Picture) {
	o.Pictures = v
}

// GetPlaylistSort returns the PlaylistSort field value
func (o *LiveEvent) GetPlaylistSort() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PlaylistSort
}

// GetPlaylistSortOk returns a tuple with the PlaylistSort field value
// and a boolean to check if the value has been set.
func (o *LiveEvent) GetPlaylistSortOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlaylistSort, true
}

// SetPlaylistSort sets field value
func (o *LiveEvent) SetPlaylistSort(v string) {
	o.PlaylistSort = v
}

// GetPreferredStreamMethod returns the PreferredStreamMethod field value
func (o *LiveEvent) GetPreferredStreamMethod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PreferredStreamMethod
}

// GetPreferredStreamMethodOk returns a tuple with the PreferredStreamMethod field value
// and a boolean to check if the value has been set.
func (o *LiveEvent) GetPreferredStreamMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PreferredStreamMethod, true
}

// SetPreferredStreamMethod sets field value
func (o *LiveEvent) SetPreferredStreamMethod(v string) {
	o.PreferredStreamMethod = v
}

// GetRtmpLink returns the RtmpLink field value
// If the value is explicit nil, the zero value for string will be returned
func (o *LiveEvent) GetRtmpLink() string {
	if o == nil || o.RtmpLink.Get() == nil {
		var ret string
		return ret
	}

	return *o.RtmpLink.Get()
}

// GetRtmpLinkOk returns a tuple with the RtmpLink field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LiveEvent) GetRtmpLinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RtmpLink.Get(), o.RtmpLink.IsSet()
}

// SetRtmpLink sets field value
func (o *LiveEvent) SetRtmpLink(v string) {
	o.RtmpLink.Set(&v)
}

// GetRtmpPreview returns the RtmpPreview field value
func (o *LiveEvent) GetRtmpPreview() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RtmpPreview
}

// GetRtmpPreviewOk returns a tuple with the RtmpPreview field value
// and a boolean to check if the value has been set.
func (o *LiveEvent) GetRtmpPreviewOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RtmpPreview, true
}

// SetRtmpPreview sets field value
func (o *LiveEvent) SetRtmpPreview(v bool) {
	o.RtmpPreview = v
}

// GetRtmpsLink returns the RtmpsLink field value
// If the value is explicit nil, the zero value for string will be returned
func (o *LiveEvent) GetRtmpsLink() string {
	if o == nil || o.RtmpsLink.Get() == nil {
		var ret string
		return ret
	}

	return *o.RtmpsLink.Get()
}

// GetRtmpsLinkOk returns a tuple with the RtmpsLink field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LiveEvent) GetRtmpsLinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RtmpsLink.Get(), o.RtmpsLink.IsSet()
}

// SetRtmpsLink sets field value
func (o *LiveEvent) SetRtmpsLink(v string) {
	o.RtmpsLink.Set(&v)
}

// GetSchedule returns the Schedule field value
func (o *LiveEvent) GetSchedule() LiveEventSchedule {
	if o == nil {
		var ret LiveEventSchedule
		return ret
	}

	return o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value
// and a boolean to check if the value has been set.
func (o *LiveEvent) GetScheduleOk() (*LiveEventSchedule, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Schedule, true
}

// SetSchedule sets field value
func (o *LiveEvent) SetSchedule(v LiveEventSchedule) {
	o.Schedule = v
}

// GetScheduledPlayback returns the ScheduledPlayback field value
func (o *LiveEvent) GetScheduledPlayback() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ScheduledPlayback
}

// GetScheduledPlaybackOk returns a tuple with the ScheduledPlayback field value
// and a boolean to check if the value has been set.
func (o *LiveEvent) GetScheduledPlaybackOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScheduledPlayback, true
}

// SetScheduledPlayback sets field value
func (o *LiveEvent) SetScheduledPlayback(v bool) {
	o.ScheduledPlayback = v
}

// GetStatus returns the Status field value
// If the value is explicit nil, the zero value for string will be returned
func (o *LiveEvent) GetStatus() string {
	if o == nil || o.Status.Get() == nil {
		var ret string
		return ret
	}

	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LiveEvent) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// SetStatus sets field value
func (o *LiveEvent) SetStatus(v string) {
	o.Status.Set(&v)
}

// GetStreamDescription returns the StreamDescription field value
// If the value is explicit nil, the zero value for string will be returned
func (o *LiveEvent) GetStreamDescription() string {
	if o == nil || o.StreamDescription.Get() == nil {
		var ret string
		return ret
	}

	return *o.StreamDescription.Get()
}

// GetStreamDescriptionOk returns a tuple with the StreamDescription field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LiveEvent) GetStreamDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StreamDescription.Get(), o.StreamDescription.IsSet()
}

// SetStreamDescription sets field value
func (o *LiveEvent) SetStreamDescription(v string) {
	o.StreamDescription.Set(&v)
}

// GetStreamKey returns the StreamKey field value
// If the value is explicit nil, the zero value for string will be returned
func (o *LiveEvent) GetStreamKey() string {
	if o == nil || o.StreamKey.Get() == nil {
		var ret string
		return ret
	}

	return *o.StreamKey.Get()
}

// GetStreamKeyOk returns a tuple with the StreamKey field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LiveEvent) GetStreamKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StreamKey.Get(), o.StreamKey.IsSet()
}

// SetStreamKey sets field value
func (o *LiveEvent) SetStreamKey(v string) {
	o.StreamKey.Set(&v)
}

// GetStreamMode returns the StreamMode field value
func (o *LiveEvent) GetStreamMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StreamMode
}

// GetStreamModeOk returns a tuple with the StreamMode field value
// and a boolean to check if the value has been set.
func (o *LiveEvent) GetStreamModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StreamMode, true
}

// SetStreamMode sets field value
func (o *LiveEvent) SetStreamMode(v string) {
	o.StreamMode = v
}

// GetStreamPassword returns the StreamPassword field value
// If the value is explicit nil, the zero value for string will be returned
func (o *LiveEvent) GetStreamPassword() string {
	if o == nil || o.StreamPassword.Get() == nil {
		var ret string
		return ret
	}

	return *o.StreamPassword.Get()
}

// GetStreamPasswordOk returns a tuple with the StreamPassword field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LiveEvent) GetStreamPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StreamPassword.Get(), o.StreamPassword.IsSet()
}

// SetStreamPassword sets field value
func (o *LiveEvent) SetStreamPassword(v string) {
	o.StreamPassword.Set(&v)
}

// GetStreamPrivacy returns the StreamPrivacy field value
func (o *LiveEvent) GetStreamPrivacy() LiveEventStreamPrivacy {
	if o == nil {
		var ret LiveEventStreamPrivacy
		return ret
	}

	return o.StreamPrivacy
}

// GetStreamPrivacyOk returns a tuple with the StreamPrivacy field value
// and a boolean to check if the value has been set.
func (o *LiveEvent) GetStreamPrivacyOk() (*LiveEventStreamPrivacy, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StreamPrivacy, true
}

// SetStreamPrivacy sets field value
func (o *LiveEvent) SetStreamPrivacy(v LiveEventStreamPrivacy) {
	o.StreamPrivacy = v
}

// GetStreamTitle returns the StreamTitle field value
func (o *LiveEvent) GetStreamTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StreamTitle
}

// GetStreamTitleOk returns a tuple with the StreamTitle field value
// and a boolean to check if the value has been set.
func (o *LiveEvent) GetStreamTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StreamTitle, true
}

// SetStreamTitle sets field value
func (o *LiveEvent) SetStreamTitle(v string) {
	o.StreamTitle = v
}

// GetStreamableClip returns the StreamableClip field value
// If the value is explicit nil, the zero value for map[string]interface{} will be returned
func (o *LiveEvent) GetStreamableClip() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.StreamableClip
}

// GetStreamableClipOk returns a tuple with the StreamableClip field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LiveEvent) GetStreamableClipOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.StreamableClip) {
		return map[string]interface{}{}, false
	}
	return o.StreamableClip, true
}

// SetStreamableClip sets field value
func (o *LiveEvent) SetStreamableClip(v map[string]interface{}) {
	o.StreamableClip = v
}

// GetTimeZone returns the TimeZone field value
func (o *LiveEvent) GetTimeZone() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimeZone
}

// GetTimeZoneOk returns a tuple with the TimeZone field value
// and a boolean to check if the value has been set.
func (o *LiveEvent) GetTimeZoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeZone, true
}

// SetTimeZone sets field value
func (o *LiveEvent) SetTimeZone(v string) {
	o.TimeZone = v
}

// GetTitle returns the Title field value
func (o *LiveEvent) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *LiveEvent) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *LiveEvent) SetTitle(v string) {
	o.Title = v
}

// GetUnlimitedAutoCc returns the UnlimitedAutoCc field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *LiveEvent) GetUnlimitedAutoCc() bool {
	if o == nil || o.UnlimitedAutoCc.Get() == nil {
		var ret bool
		return ret
	}

	return *o.UnlimitedAutoCc.Get()
}

// GetUnlimitedAutoCcOk returns a tuple with the UnlimitedAutoCc field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LiveEvent) GetUnlimitedAutoCcOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnlimitedAutoCc.Get(), o.UnlimitedAutoCc.IsSet()
}

// SetUnlimitedAutoCc sets field value
func (o *LiveEvent) SetUnlimitedAutoCc(v bool) {
	o.UnlimitedAutoCc.Set(&v)
}

// GetUnlimitedDuration returns the UnlimitedDuration field value
func (o *LiveEvent) GetUnlimitedDuration() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.UnlimitedDuration
}

// GetUnlimitedDurationOk returns a tuple with the UnlimitedDuration field value
// and a boolean to check if the value has been set.
func (o *LiveEvent) GetUnlimitedDurationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UnlimitedDuration, true
}

// SetUnlimitedDuration sets field value
func (o *LiveEvent) SetUnlimitedDuration(v bool) {
	o.UnlimitedDuration = v
}

// GetUri returns the Uri field value
func (o *LiveEvent) GetUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uri
}

// GetUriOk returns a tuple with the Uri field value
// and a boolean to check if the value has been set.
func (o *LiveEvent) GetUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uri, true
}

// SetUri sets field value
func (o *LiveEvent) SetUri(v string) {
	o.Uri = v
}

// GetUser returns the User field value
func (o *LiveEvent) GetUser() User {
	if o == nil {
		var ret User
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *LiveEvent) GetUserOk() (*User, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *LiveEvent) SetUser(v User) {
	o.User = v
}

// GetViewLink returns the ViewLink field value
func (o *LiveEvent) GetViewLink() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ViewLink
}

// GetViewLinkOk returns a tuple with the ViewLink field value
// and a boolean to check if the value has been set.
func (o *LiveEvent) GetViewLinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ViewLink, true
}

// SetViewLink sets field value
func (o *LiveEvent) SetViewLink(v string) {
	o.ViewLink = v
}

// GetWebinar returns the Webinar field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *LiveEvent) GetWebinar() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Webinar
}

// GetWebinarOk returns a tuple with the Webinar field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LiveEvent) GetWebinarOk() ([]string, bool) {
	if o == nil || IsNil(o.Webinar) {
		return nil, false
	}
	return o.Webinar, true
}

// SetWebinar sets field value
func (o *LiveEvent) SetWebinar(v []string) {
	o.Webinar = v
}

func (o LiveEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LiveEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Album != nil {
		toSerialize["album"] = o.Album
	}
	toSerialize["allow_share_link"] = o.AllowShareLink
	toSerialize["allowed_privacies"] = o.AllowedPrivacies
	toSerialize["auto_cc_enabled"] = o.AutoCcEnabled.Get()
	toSerialize["auto_cc_keywords"] = o.AutoCcKeywords.Get()
	toSerialize["auto_cc_language"] = o.AutoCcLanguage.Get()
	toSerialize["auto_cc_remaining"] = o.AutoCcRemaining.Get()
	toSerialize["automatically_title_stream"] = o.AutomaticallyTitleStream
	toSerialize["chat_enabled"] = o.ChatEnabled
	toSerialize["completed_on"] = o.CompletedOn
	toSerialize["content_rating"] = o.ContentRating
	toSerialize["created_time"] = o.CreatedTime
	toSerialize["dvr"] = o.Dvr
	toSerialize["email_quota"] = o.EmailQuota
	toSerialize["embed"] = o.Embed
	toSerialize["from_showcase"] = o.FromShowcase
	if !IsNil(o.FromWebinar) {
		toSerialize["from_webinar"] = o.FromWebinar
	}
	if o.HeadClip != nil {
		toSerialize["head_clip"] = o.HeadClip
	}
	if o.InteractionToolsSettings != nil {
		toSerialize["interaction_tools_settings"] = o.InteractionToolsSettings
	}
	toSerialize["latency"] = o.Latency
	toSerialize["lead_uuid"] = o.LeadUuid
	toSerialize["link"] = o.Link
	toSerialize["live_clips"] = o.LiveClips
	if o.LiveDestinations != nil {
		toSerialize["live_destinations"] = o.LiveDestinations
	}
	toSerialize["low_latency"] = o.LowLatency
	toSerialize["metadata"] = o.Metadata
	toSerialize["next_occurrence_time"] = o.NextOccurrenceTime.Get()
	toSerialize["parent_folder"] = o.ParentFolder.Get()
	toSerialize["pictures"] = o.Pictures
	toSerialize["playlist_sort"] = o.PlaylistSort
	toSerialize["preferred_stream_method"] = o.PreferredStreamMethod
	toSerialize["rtmp_link"] = o.RtmpLink.Get()
	toSerialize["rtmp_preview"] = o.RtmpPreview
	toSerialize["rtmps_link"] = o.RtmpsLink.Get()
	toSerialize["schedule"] = o.Schedule
	toSerialize["scheduled_playback"] = o.ScheduledPlayback
	toSerialize["status"] = o.Status.Get()
	toSerialize["stream_description"] = o.StreamDescription.Get()
	toSerialize["stream_key"] = o.StreamKey.Get()
	toSerialize["stream_mode"] = o.StreamMode
	toSerialize["stream_password"] = o.StreamPassword.Get()
	toSerialize["stream_privacy"] = o.StreamPrivacy
	toSerialize["stream_title"] = o.StreamTitle
	if o.StreamableClip != nil {
		toSerialize["streamable_clip"] = o.StreamableClip
	}
	toSerialize["time_zone"] = o.TimeZone
	toSerialize["title"] = o.Title
	toSerialize["unlimited_auto_cc"] = o.UnlimitedAutoCc.Get()
	toSerialize["unlimited_duration"] = o.UnlimitedDuration
	toSerialize["uri"] = o.Uri
	toSerialize["user"] = o.User
	toSerialize["view_link"] = o.ViewLink
	if o.Webinar != nil {
		toSerialize["webinar"] = o.Webinar
	}
	return toSerialize, nil
}

type NullableLiveEvent struct {
	value *LiveEvent
	isSet bool
}

func (v NullableLiveEvent) Get() *LiveEvent {
	return v.value
}

func (v *NullableLiveEvent) Set(val *LiveEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableLiveEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableLiveEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLiveEvent(val *LiveEvent) *NullableLiveEvent {
	return &NullableLiveEvent{value: val, isSet: true}
}

func (v NullableLiveEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLiveEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


