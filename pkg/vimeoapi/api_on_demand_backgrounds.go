/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type OnDemandBackgroundsAPI interface {

	/*
	CreateVodBackground Add a background to an On Demand page

	This method adds a background image to the specified On Demand page. The authenticated user must be the owner of the page.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ondemandId The ID of the On Demand page.
	@return ApiCreateVodBackgroundRequest
	*/
	CreateVodBackground(ctx context.Context, ondemandId float32) ApiCreateVodBackgroundRequest

	// CreateVodBackgroundExecute executes the request
	//  @return Picture
	CreateVodBackgroundExecute(r ApiCreateVodBackgroundRequest) (*Picture, *http.Response, error)

	/*
	DeleteVodBackground Delete a background on an On Demand page

	This method deletes the specified background image on an On Demand page. The authenticated user must be the owner of the page.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param backgroundId The ID of the background image.
	@param ondemandId The ID of the On Demand page.
	@return ApiDeleteVodBackgroundRequest
	*/
	DeleteVodBackground(ctx context.Context, backgroundId float32, ondemandId float32) ApiDeleteVodBackgroundRequest

	// DeleteVodBackgroundExecute executes the request
	DeleteVodBackgroundExecute(r ApiDeleteVodBackgroundRequest) (*http.Response, error)

	/*
	EditVodBackground Edit a background on an On Demand page

	This method edits the specified background image on an On Demand page. The authenticated user must be the owner of the page.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param backgroundId The ID of the background image.
	@param ondemandId The ID of the On Demand page.
	@return ApiEditVodBackgroundRequest
	*/
	EditVodBackground(ctx context.Context, backgroundId float32, ondemandId float32) ApiEditVodBackgroundRequest

	// EditVodBackgroundExecute executes the request
	//  @return Picture
	EditVodBackgroundExecute(r ApiEditVodBackgroundRequest) (*Picture, *http.Response, error)

	/*
	GetVodBackground Get a specific background on an On Demand page

	This method returns a single background image on the specified On Demand page. The authenticated user must be the owner of the page.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param backgroundId The ID of the background image.
	@param ondemandId The ID of the On Demand page.
	@return ApiGetVodBackgroundRequest
	*/
	GetVodBackground(ctx context.Context, backgroundId float32, ondemandId float32) ApiGetVodBackgroundRequest

	// GetVodBackgroundExecute executes the request
	//  @return Picture
	GetVodBackgroundExecute(r ApiGetVodBackgroundRequest) (*Picture, *http.Response, error)

	/*
	GetVodBackgrounds Get all the backgrounds on an On Demand page

	This method returns every background image on the specified On Demand page. The authenticated user must be the owner of the page.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ondemandId The ID of the On Demand page.
	@return ApiGetVodBackgroundsRequest
	*/
	GetVodBackgrounds(ctx context.Context, ondemandId float32) ApiGetVodBackgroundsRequest

	// GetVodBackgroundsExecute executes the request
	//  @return []Picture
	GetVodBackgroundsExecute(r ApiGetVodBackgroundsRequest) ([]Picture, *http.Response, error)
}

// OnDemandBackgroundsAPIService OnDemandBackgroundsAPI service
type OnDemandBackgroundsAPIService service

type ApiCreateVodBackgroundRequest struct {
	ctx context.Context
	ApiService OnDemandBackgroundsAPI
	ondemandId float32
}

func (r ApiCreateVodBackgroundRequest) Execute() (*Picture, *http.Response, error) {
	return r.ApiService.CreateVodBackgroundExecute(r)
}

/*
CreateVodBackground Add a background to an On Demand page

This method adds a background image to the specified On Demand page. The authenticated user must be the owner of the page.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ondemandId The ID of the On Demand page.
 @return ApiCreateVodBackgroundRequest
*/
func (a *OnDemandBackgroundsAPIService) CreateVodBackground(ctx context.Context, ondemandId float32) ApiCreateVodBackgroundRequest {
	return ApiCreateVodBackgroundRequest{
		ApiService: a,
		ctx: ctx,
		ondemandId: ondemandId,
	}
}

// Execute executes the request
//  @return Picture
func (a *OnDemandBackgroundsAPIService) CreateVodBackgroundExecute(r ApiCreateVodBackgroundRequest) (*Picture, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Picture
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnDemandBackgroundsAPIService.CreateVodBackground")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ondemand/pages/{ondemand_id}/backgrounds"
	localVarPath = strings.Replace(localVarPath, "{"+"ondemand_id"+"}", url.PathEscape(parameterValueToString(r.ondemandId, "ondemandId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.picture+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteVodBackgroundRequest struct {
	ctx context.Context
	ApiService OnDemandBackgroundsAPI
	backgroundId float32
	ondemandId float32
}

func (r ApiDeleteVodBackgroundRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteVodBackgroundExecute(r)
}

/*
DeleteVodBackground Delete a background on an On Demand page

This method deletes the specified background image on an On Demand page. The authenticated user must be the owner of the page.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param backgroundId The ID of the background image.
 @param ondemandId The ID of the On Demand page.
 @return ApiDeleteVodBackgroundRequest
*/
func (a *OnDemandBackgroundsAPIService) DeleteVodBackground(ctx context.Context, backgroundId float32, ondemandId float32) ApiDeleteVodBackgroundRequest {
	return ApiDeleteVodBackgroundRequest{
		ApiService: a,
		ctx: ctx,
		backgroundId: backgroundId,
		ondemandId: ondemandId,
	}
}

// Execute executes the request
func (a *OnDemandBackgroundsAPIService) DeleteVodBackgroundExecute(r ApiDeleteVodBackgroundRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnDemandBackgroundsAPIService.DeleteVodBackground")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ondemand/pages/{ondemand_id}/backgrounds/{background_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"background_id"+"}", url.PathEscape(parameterValueToString(r.backgroundId, "backgroundId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ondemand_id"+"}", url.PathEscape(parameterValueToString(r.ondemandId, "ondemandId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.picture+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEditVodBackgroundRequest struct {
	ctx context.Context
	ApiService OnDemandBackgroundsAPI
	backgroundId float32
	ondemandId float32
	editVodBackgroundRequest *EditVodBackgroundRequest
}

func (r ApiEditVodBackgroundRequest) EditVodBackgroundRequest(editVodBackgroundRequest EditVodBackgroundRequest) ApiEditVodBackgroundRequest {
	r.editVodBackgroundRequest = &editVodBackgroundRequest
	return r
}

func (r ApiEditVodBackgroundRequest) Execute() (*Picture, *http.Response, error) {
	return r.ApiService.EditVodBackgroundExecute(r)
}

/*
EditVodBackground Edit a background on an On Demand page

This method edits the specified background image on an On Demand page. The authenticated user must be the owner of the page.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param backgroundId The ID of the background image.
 @param ondemandId The ID of the On Demand page.
 @return ApiEditVodBackgroundRequest
*/
func (a *OnDemandBackgroundsAPIService) EditVodBackground(ctx context.Context, backgroundId float32, ondemandId float32) ApiEditVodBackgroundRequest {
	return ApiEditVodBackgroundRequest{
		ApiService: a,
		ctx: ctx,
		backgroundId: backgroundId,
		ondemandId: ondemandId,
	}
}

// Execute executes the request
//  @return Picture
func (a *OnDemandBackgroundsAPIService) EditVodBackgroundExecute(r ApiEditVodBackgroundRequest) (*Picture, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Picture
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnDemandBackgroundsAPIService.EditVodBackground")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ondemand/pages/{ondemand_id}/backgrounds/{background_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"background_id"+"}", url.PathEscape(parameterValueToString(r.backgroundId, "backgroundId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ondemand_id"+"}", url.PathEscape(parameterValueToString(r.ondemandId, "ondemandId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.vimeo.picture+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.picture+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.editVodBackgroundRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetVodBackgroundRequest struct {
	ctx context.Context
	ApiService OnDemandBackgroundsAPI
	backgroundId float32
	ondemandId float32
}

func (r ApiGetVodBackgroundRequest) Execute() (*Picture, *http.Response, error) {
	return r.ApiService.GetVodBackgroundExecute(r)
}

/*
GetVodBackground Get a specific background on an On Demand page

This method returns a single background image on the specified On Demand page. The authenticated user must be the owner of the page.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param backgroundId The ID of the background image.
 @param ondemandId The ID of the On Demand page.
 @return ApiGetVodBackgroundRequest
*/
func (a *OnDemandBackgroundsAPIService) GetVodBackground(ctx context.Context, backgroundId float32, ondemandId float32) ApiGetVodBackgroundRequest {
	return ApiGetVodBackgroundRequest{
		ApiService: a,
		ctx: ctx,
		backgroundId: backgroundId,
		ondemandId: ondemandId,
	}
}

// Execute executes the request
//  @return Picture
func (a *OnDemandBackgroundsAPIService) GetVodBackgroundExecute(r ApiGetVodBackgroundRequest) (*Picture, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Picture
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnDemandBackgroundsAPIService.GetVodBackground")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ondemand/pages/{ondemand_id}/backgrounds/{background_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"background_id"+"}", url.PathEscape(parameterValueToString(r.backgroundId, "backgroundId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ondemand_id"+"}", url.PathEscape(parameterValueToString(r.ondemandId, "ondemandId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.picture+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetVodBackgroundsRequest struct {
	ctx context.Context
	ApiService OnDemandBackgroundsAPI
	ondemandId float32
	page *float32
	perPage *float32
}

// The page number of the results to show.
func (r ApiGetVodBackgroundsRequest) Page(page float32) ApiGetVodBackgroundsRequest {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiGetVodBackgroundsRequest) PerPage(perPage float32) ApiGetVodBackgroundsRequest {
	r.perPage = &perPage
	return r
}

func (r ApiGetVodBackgroundsRequest) Execute() ([]Picture, *http.Response, error) {
	return r.ApiService.GetVodBackgroundsExecute(r)
}

/*
GetVodBackgrounds Get all the backgrounds on an On Demand page

This method returns every background image on the specified On Demand page. The authenticated user must be the owner of the page.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ondemandId The ID of the On Demand page.
 @return ApiGetVodBackgroundsRequest
*/
func (a *OnDemandBackgroundsAPIService) GetVodBackgrounds(ctx context.Context, ondemandId float32) ApiGetVodBackgroundsRequest {
	return ApiGetVodBackgroundsRequest{
		ApiService: a,
		ctx: ctx,
		ondemandId: ondemandId,
	}
}

// Execute executes the request
//  @return []Picture
func (a *OnDemandBackgroundsAPIService) GetVodBackgroundsExecute(r ApiGetVodBackgroundsRequest) ([]Picture, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Picture
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnDemandBackgroundsAPIService.GetVodBackgrounds")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ondemand/pages/{ondemand_id}/backgrounds"
	localVarPath = strings.Replace(localVarPath, "{"+"ondemand_id"+"}", url.PathEscape(parameterValueToString(r.ondemandId, "ondemandId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.picture+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
