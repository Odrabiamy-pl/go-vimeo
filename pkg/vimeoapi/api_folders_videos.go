/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type FoldersVideosAPI interface {

	/*
	AddVideoToProject Add a video to a folder

	This method adds a single video to the specified folder. The authenticated user must be the owner of the folder.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param projectId The ID of the folder.
	@param userId The ID of the user.
	@param videoId The ID of the video.
	@return ApiAddVideoToProjectRequest
	*/
	AddVideoToProject(ctx context.Context, projectId float32, userId float32, videoId float32) ApiAddVideoToProjectRequest

	// AddVideoToProjectExecute executes the request
	AddVideoToProjectExecute(r ApiAddVideoToProjectRequest) (*http.Response, error)

	/*
	AddVideoToProjectAlt1 Add a video to a folder

	This method adds a single video to the specified folder. The authenticated user must be the owner of the folder.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param projectId The ID of the folder.
	@param videoId The ID of the video.
	@return ApiAddVideoToProjectAlt1Request
	*/
	AddVideoToProjectAlt1(ctx context.Context, projectId float32, videoId float32) ApiAddVideoToProjectAlt1Request

	// AddVideoToProjectAlt1Execute executes the request
	AddVideoToProjectAlt1Execute(r ApiAddVideoToProjectAlt1Request) (*http.Response, error)

	/*
	AddVideosToProject Add a list of videos to a folder

	This method adds multiple videos to the specified folder. The authenticated user must be the owner of the folder.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param projectId The ID of the folder.
	@param userId The ID of the user.
	@return ApiAddVideosToProjectRequest
	*/
	AddVideosToProject(ctx context.Context, projectId float32, userId float32) ApiAddVideosToProjectRequest

	// AddVideosToProjectExecute executes the request
	AddVideosToProjectExecute(r ApiAddVideosToProjectRequest) (*http.Response, error)

	/*
	AddVideosToProjectAlt1 Add a list of videos to a folder

	This method adds multiple videos to the specified folder. The authenticated user must be the owner of the folder.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param projectId The ID of the folder.
	@return ApiAddVideosToProjectAlt1Request
	*/
	AddVideosToProjectAlt1(ctx context.Context, projectId float32) ApiAddVideosToProjectAlt1Request

	// AddVideosToProjectAlt1Execute executes the request
	AddVideosToProjectAlt1Execute(r ApiAddVideosToProjectAlt1Request) (*http.Response, error)

	/*
	GetProjectVideos Get all the videos in a folder

	This method returns all the videos that belong to the specified folder.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param projectId The ID of the folder.
	@param userId The ID of the user.
	@return ApiGetProjectVideosRequest
	*/
	GetProjectVideos(ctx context.Context, projectId float32, userId float32) ApiGetProjectVideosRequest

	// GetProjectVideosExecute executes the request
	//  @return []Video
	GetProjectVideosExecute(r ApiGetProjectVideosRequest) ([]Video, *http.Response, error)

	/*
	GetProjectVideosAlt1 Get all the videos in a folder

	This method returns all the videos that belong to the specified folder.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param projectId The ID of the folder.
	@return ApiGetProjectVideosAlt1Request
	*/
	GetProjectVideosAlt1(ctx context.Context, projectId float32) ApiGetProjectVideosAlt1Request

	// GetProjectVideosAlt1Execute executes the request
	//  @return []Video
	GetProjectVideosAlt1Execute(r ApiGetProjectVideosAlt1Request) ([]Video, *http.Response, error)

	/*
	RemoveVideoFromProject Remove a video from a folder

	This method removes a single video from the specified folder. Please note that this doesn't delete the video itself.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param projectId The ID of the folder.
	@param userId The ID of the user.
	@param videoId The ID of the video.
	@return ApiRemoveVideoFromProjectRequest
	*/
	RemoveVideoFromProject(ctx context.Context, projectId float32, userId float32, videoId float32) ApiRemoveVideoFromProjectRequest

	// RemoveVideoFromProjectExecute executes the request
	RemoveVideoFromProjectExecute(r ApiRemoveVideoFromProjectRequest) (*http.Response, error)

	/*
	RemoveVideoFromProjectAlt1 Remove a video from a folder

	This method removes a single video from the specified folder. Please note that this doesn't delete the video itself.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param projectId The ID of the folder.
	@param videoId The ID of the video.
	@return ApiRemoveVideoFromProjectAlt1Request
	*/
	RemoveVideoFromProjectAlt1(ctx context.Context, projectId float32, videoId float32) ApiRemoveVideoFromProjectAlt1Request

	// RemoveVideoFromProjectAlt1Execute executes the request
	RemoveVideoFromProjectAlt1Execute(r ApiRemoveVideoFromProjectAlt1Request) (*http.Response, error)

	/*
	RemoveVideosFromProject Remove a list of videos from a folder

	This method removes multiple videos from the specified folder. The authenticated user must be the owner of the folder.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param projectId The ID of the folder.
	@param userId The ID of the user.
	@return ApiRemoveVideosFromProjectRequest
	*/
	RemoveVideosFromProject(ctx context.Context, projectId float32, userId float32) ApiRemoveVideosFromProjectRequest

	// RemoveVideosFromProjectExecute executes the request
	RemoveVideosFromProjectExecute(r ApiRemoveVideosFromProjectRequest) (*http.Response, error)

	/*
	RemoveVideosFromProjectAlt1 Remove a list of videos from a folder

	This method removes multiple videos from the specified folder. The authenticated user must be the owner of the folder.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param projectId The ID of the folder.
	@return ApiRemoveVideosFromProjectAlt1Request
	*/
	RemoveVideosFromProjectAlt1(ctx context.Context, projectId float32) ApiRemoveVideosFromProjectAlt1Request

	// RemoveVideosFromProjectAlt1Execute executes the request
	RemoveVideosFromProjectAlt1Execute(r ApiRemoveVideosFromProjectAlt1Request) (*http.Response, error)
}

// FoldersVideosAPIService FoldersVideosAPI service
type FoldersVideosAPIService service

type ApiAddVideoToProjectRequest struct {
	ctx context.Context
	ApiService FoldersVideosAPI
	projectId float32
	userId float32
	videoId float32
}

func (r ApiAddVideoToProjectRequest) Execute() (*http.Response, error) {
	return r.ApiService.AddVideoToProjectExecute(r)
}

/*
AddVideoToProject Add a video to a folder

This method adds a single video to the specified folder. The authenticated user must be the owner of the folder.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId The ID of the folder.
 @param userId The ID of the user.
 @param videoId The ID of the video.
 @return ApiAddVideoToProjectRequest
*/
func (a *FoldersVideosAPIService) AddVideoToProject(ctx context.Context, projectId float32, userId float32, videoId float32) ApiAddVideoToProjectRequest {
	return ApiAddVideoToProjectRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		userId: userId,
		videoId: videoId,
	}
}

// Execute executes the request
func (a *FoldersVideosAPIService) AddVideoToProjectExecute(r ApiAddVideoToProjectRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FoldersVideosAPIService.AddVideoToProject")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/projects/{project_id}/videos/{video_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAddVideoToProjectAlt1Request struct {
	ctx context.Context
	ApiService FoldersVideosAPI
	projectId float32
	videoId float32
}

func (r ApiAddVideoToProjectAlt1Request) Execute() (*http.Response, error) {
	return r.ApiService.AddVideoToProjectAlt1Execute(r)
}

/*
AddVideoToProjectAlt1 Add a video to a folder

This method adds a single video to the specified folder. The authenticated user must be the owner of the folder.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId The ID of the folder.
 @param videoId The ID of the video.
 @return ApiAddVideoToProjectAlt1Request
*/
func (a *FoldersVideosAPIService) AddVideoToProjectAlt1(ctx context.Context, projectId float32, videoId float32) ApiAddVideoToProjectAlt1Request {
	return ApiAddVideoToProjectAlt1Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		videoId: videoId,
	}
}

// Execute executes the request
func (a *FoldersVideosAPIService) AddVideoToProjectAlt1Execute(r ApiAddVideoToProjectAlt1Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FoldersVideosAPIService.AddVideoToProjectAlt1")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/projects/{project_id}/videos/{video_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAddVideosToProjectRequest struct {
	ctx context.Context
	ApiService FoldersVideosAPI
	projectId float32
	userId float32
	uris *string
}

// A comma-separated list of video URIs to add.
func (r ApiAddVideosToProjectRequest) Uris(uris string) ApiAddVideosToProjectRequest {
	r.uris = &uris
	return r
}

func (r ApiAddVideosToProjectRequest) Execute() (*http.Response, error) {
	return r.ApiService.AddVideosToProjectExecute(r)
}

/*
AddVideosToProject Add a list of videos to a folder

This method adds multiple videos to the specified folder. The authenticated user must be the owner of the folder.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId The ID of the folder.
 @param userId The ID of the user.
 @return ApiAddVideosToProjectRequest
*/
func (a *FoldersVideosAPIService) AddVideosToProject(ctx context.Context, projectId float32, userId float32) ApiAddVideosToProjectRequest {
	return ApiAddVideosToProjectRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		userId: userId,
	}
}

// Execute executes the request
func (a *FoldersVideosAPIService) AddVideosToProjectExecute(r ApiAddVideosToProjectRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FoldersVideosAPIService.AddVideosToProject")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/projects/{project_id}/videos"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.uris == nil {
		return nil, reportError("uris is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "uris", r.uris, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAddVideosToProjectAlt1Request struct {
	ctx context.Context
	ApiService FoldersVideosAPI
	projectId float32
	uris *string
}

// A comma-separated list of video URIs to add.
func (r ApiAddVideosToProjectAlt1Request) Uris(uris string) ApiAddVideosToProjectAlt1Request {
	r.uris = &uris
	return r
}

func (r ApiAddVideosToProjectAlt1Request) Execute() (*http.Response, error) {
	return r.ApiService.AddVideosToProjectAlt1Execute(r)
}

/*
AddVideosToProjectAlt1 Add a list of videos to a folder

This method adds multiple videos to the specified folder. The authenticated user must be the owner of the folder.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId The ID of the folder.
 @return ApiAddVideosToProjectAlt1Request
*/
func (a *FoldersVideosAPIService) AddVideosToProjectAlt1(ctx context.Context, projectId float32) ApiAddVideosToProjectAlt1Request {
	return ApiAddVideosToProjectAlt1Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
func (a *FoldersVideosAPIService) AddVideosToProjectAlt1Execute(r ApiAddVideosToProjectAlt1Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FoldersVideosAPIService.AddVideosToProjectAlt1")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/projects/{project_id}/videos"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.uris == nil {
		return nil, reportError("uris is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "uris", r.uris, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProjectVideosRequest struct {
	ctx context.Context
	ApiService FoldersVideosAPI
	projectId float32
	userId float32
	direction *string
	filterTag *string
	filterTagAllOf *string
	filterTagExclude *string
	includeSubfolders *bool
	page *float32
	perPage *float32
	query *string
	queryFields *string
	sort *string
}

// The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
func (r ApiGetProjectVideosRequest) Direction(direction string) ApiGetProjectVideosRequest {
	r.direction = &direction
	return r
}

// A comma-separated list of tags to filter on. All results must include at least one of these tags. The use of this parameter triggers a search.
func (r ApiGetProjectVideosRequest) FilterTag(filterTag string) ApiGetProjectVideosRequest {
	r.filterTag = &filterTag
	return r
}

// A comma-separated list of tags to filter on. All results must include all of these tags. The use of this parameter triggers a search.
func (r ApiGetProjectVideosRequest) FilterTagAllOf(filterTagAllOf string) ApiGetProjectVideosRequest {
	r.filterTagAllOf = &filterTagAllOf
	return r
}

// A comma-separated list of tags to exclude. The use of this parameter triggers a search.
func (r ApiGetProjectVideosRequest) FilterTagExclude(filterTagExclude string) ApiGetProjectVideosRequest {
	r.filterTagExclude = &filterTagExclude
	return r
}

// Whether to include subfolders.
func (r ApiGetProjectVideosRequest) IncludeSubfolders(includeSubfolders bool) ApiGetProjectVideosRequest {
	r.includeSubfolders = &includeSubfolders
	return r
}

// The page number of the results to show.
func (r ApiGetProjectVideosRequest) Page(page float32) ApiGetProjectVideosRequest {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiGetProjectVideosRequest) PerPage(perPage float32) ApiGetProjectVideosRequest {
	r.perPage = &perPage
	return r
}

// The search query to use to filter the results.
func (r ApiGetProjectVideosRequest) Query(query string) ApiGetProjectVideosRequest {
	r.query = &query
	return r
}

// A comma-separated list of fields to query over. The default value is &#x60;title,description,chapters,tags&#x60;.
func (r ApiGetProjectVideosRequest) QueryFields(queryFields string) ApiGetProjectVideosRequest {
	r.queryFields = &queryFields
	return r
}

// The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sort order.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by the date of the last user action. 
func (r ApiGetProjectVideosRequest) Sort(sort string) ApiGetProjectVideosRequest {
	r.sort = &sort
	return r
}

func (r ApiGetProjectVideosRequest) Execute() ([]Video, *http.Response, error) {
	return r.ApiService.GetProjectVideosExecute(r)
}

/*
GetProjectVideos Get all the videos in a folder

This method returns all the videos that belong to the specified folder.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId The ID of the folder.
 @param userId The ID of the user.
 @return ApiGetProjectVideosRequest
*/
func (a *FoldersVideosAPIService) GetProjectVideos(ctx context.Context, projectId float32, userId float32) ApiGetProjectVideosRequest {
	return ApiGetProjectVideosRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		userId: userId,
	}
}

// Execute executes the request
//  @return []Video
func (a *FoldersVideosAPIService) GetProjectVideosExecute(r ApiGetProjectVideosRequest) ([]Video, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Video
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FoldersVideosAPIService.GetProjectVideos")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/projects/{project_id}/videos"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.filterTag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter_tag", r.filterTag, "")
	}
	if r.filterTagAllOf != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter_tag_all_of", r.filterTagAllOf, "")
	}
	if r.filterTagExclude != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter_tag_exclude", r.filterTagExclude, "")
	}
	if r.includeSubfolders != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_subfolders", r.includeSubfolders, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	if r.query != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "query", r.query, "")
	}
	if r.queryFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "query_fields", r.queryFields, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectVideosAlt1Request struct {
	ctx context.Context
	ApiService FoldersVideosAPI
	projectId float32
	direction *string
	filterTag *string
	filterTagAllOf *string
	filterTagExclude *string
	includeSubfolders *bool
	page *float32
	perPage *float32
	query *string
	queryFields *string
	sort *string
}

// The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
func (r ApiGetProjectVideosAlt1Request) Direction(direction string) ApiGetProjectVideosAlt1Request {
	r.direction = &direction
	return r
}

// A comma-separated list of tags to filter on. All results must include at least one of these tags. The use of this parameter triggers a search.
func (r ApiGetProjectVideosAlt1Request) FilterTag(filterTag string) ApiGetProjectVideosAlt1Request {
	r.filterTag = &filterTag
	return r
}

// A comma-separated list of tags to filter on. All results must include all of these tags. The use of this parameter triggers a search.
func (r ApiGetProjectVideosAlt1Request) FilterTagAllOf(filterTagAllOf string) ApiGetProjectVideosAlt1Request {
	r.filterTagAllOf = &filterTagAllOf
	return r
}

// A comma-separated list of tags to exclude. The use of this parameter triggers a search.
func (r ApiGetProjectVideosAlt1Request) FilterTagExclude(filterTagExclude string) ApiGetProjectVideosAlt1Request {
	r.filterTagExclude = &filterTagExclude
	return r
}

// Whether to include subfolders.
func (r ApiGetProjectVideosAlt1Request) IncludeSubfolders(includeSubfolders bool) ApiGetProjectVideosAlt1Request {
	r.includeSubfolders = &includeSubfolders
	return r
}

// The page number of the results to show.
func (r ApiGetProjectVideosAlt1Request) Page(page float32) ApiGetProjectVideosAlt1Request {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiGetProjectVideosAlt1Request) PerPage(perPage float32) ApiGetProjectVideosAlt1Request {
	r.perPage = &perPage
	return r
}

// The search query to use to filter the results.
func (r ApiGetProjectVideosAlt1Request) Query(query string) ApiGetProjectVideosAlt1Request {
	r.query = &query
	return r
}

// A comma-separated list of fields to query over. The default value is &#x60;title,description,chapters,tags&#x60;.
func (r ApiGetProjectVideosAlt1Request) QueryFields(queryFields string) ApiGetProjectVideosAlt1Request {
	r.queryFields = &queryFields
	return r
}

// The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sort order.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by the date of the last user action. 
func (r ApiGetProjectVideosAlt1Request) Sort(sort string) ApiGetProjectVideosAlt1Request {
	r.sort = &sort
	return r
}

func (r ApiGetProjectVideosAlt1Request) Execute() ([]Video, *http.Response, error) {
	return r.ApiService.GetProjectVideosAlt1Execute(r)
}

/*
GetProjectVideosAlt1 Get all the videos in a folder

This method returns all the videos that belong to the specified folder.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId The ID of the folder.
 @return ApiGetProjectVideosAlt1Request
*/
func (a *FoldersVideosAPIService) GetProjectVideosAlt1(ctx context.Context, projectId float32) ApiGetProjectVideosAlt1Request {
	return ApiGetProjectVideosAlt1Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return []Video
func (a *FoldersVideosAPIService) GetProjectVideosAlt1Execute(r ApiGetProjectVideosAlt1Request) ([]Video, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Video
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FoldersVideosAPIService.GetProjectVideosAlt1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/projects/{project_id}/videos"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.filterTag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter_tag", r.filterTag, "")
	}
	if r.filterTagAllOf != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter_tag_all_of", r.filterTagAllOf, "")
	}
	if r.filterTagExclude != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter_tag_exclude", r.filterTagExclude, "")
	}
	if r.includeSubfolders != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_subfolders", r.includeSubfolders, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	if r.query != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "query", r.query, "")
	}
	if r.queryFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "query_fields", r.queryFields, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRemoveVideoFromProjectRequest struct {
	ctx context.Context
	ApiService FoldersVideosAPI
	projectId float32
	userId float32
	videoId float32
}

func (r ApiRemoveVideoFromProjectRequest) Execute() (*http.Response, error) {
	return r.ApiService.RemoveVideoFromProjectExecute(r)
}

/*
RemoveVideoFromProject Remove a video from a folder

This method removes a single video from the specified folder. Please note that this doesn't delete the video itself.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId The ID of the folder.
 @param userId The ID of the user.
 @param videoId The ID of the video.
 @return ApiRemoveVideoFromProjectRequest
*/
func (a *FoldersVideosAPIService) RemoveVideoFromProject(ctx context.Context, projectId float32, userId float32, videoId float32) ApiRemoveVideoFromProjectRequest {
	return ApiRemoveVideoFromProjectRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		userId: userId,
		videoId: videoId,
	}
}

// Execute executes the request
func (a *FoldersVideosAPIService) RemoveVideoFromProjectExecute(r ApiRemoveVideoFromProjectRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FoldersVideosAPIService.RemoveVideoFromProject")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/projects/{project_id}/videos/{video_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiRemoveVideoFromProjectAlt1Request struct {
	ctx context.Context
	ApiService FoldersVideosAPI
	projectId float32
	videoId float32
}

func (r ApiRemoveVideoFromProjectAlt1Request) Execute() (*http.Response, error) {
	return r.ApiService.RemoveVideoFromProjectAlt1Execute(r)
}

/*
RemoveVideoFromProjectAlt1 Remove a video from a folder

This method removes a single video from the specified folder. Please note that this doesn't delete the video itself.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId The ID of the folder.
 @param videoId The ID of the video.
 @return ApiRemoveVideoFromProjectAlt1Request
*/
func (a *FoldersVideosAPIService) RemoveVideoFromProjectAlt1(ctx context.Context, projectId float32, videoId float32) ApiRemoveVideoFromProjectAlt1Request {
	return ApiRemoveVideoFromProjectAlt1Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		videoId: videoId,
	}
}

// Execute executes the request
func (a *FoldersVideosAPIService) RemoveVideoFromProjectAlt1Execute(r ApiRemoveVideoFromProjectAlt1Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FoldersVideosAPIService.RemoveVideoFromProjectAlt1")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/projects/{project_id}/videos/{video_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiRemoveVideosFromProjectRequest struct {
	ctx context.Context
	ApiService FoldersVideosAPI
	projectId float32
	userId float32
	uris *string
	shouldDeleteClips *bool
}

// A comma-separated list of the video URIs to remove.
func (r ApiRemoveVideosFromProjectRequest) Uris(uris string) ApiRemoveVideosFromProjectRequest {
	r.uris = &uris
	return r
}

// Whether to delete the videos when removing them from the folder.
func (r ApiRemoveVideosFromProjectRequest) ShouldDeleteClips(shouldDeleteClips bool) ApiRemoveVideosFromProjectRequest {
	r.shouldDeleteClips = &shouldDeleteClips
	return r
}

func (r ApiRemoveVideosFromProjectRequest) Execute() (*http.Response, error) {
	return r.ApiService.RemoveVideosFromProjectExecute(r)
}

/*
RemoveVideosFromProject Remove a list of videos from a folder

This method removes multiple videos from the specified folder. The authenticated user must be the owner of the folder.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId The ID of the folder.
 @param userId The ID of the user.
 @return ApiRemoveVideosFromProjectRequest
*/
func (a *FoldersVideosAPIService) RemoveVideosFromProject(ctx context.Context, projectId float32, userId float32) ApiRemoveVideosFromProjectRequest {
	return ApiRemoveVideosFromProjectRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		userId: userId,
	}
}

// Execute executes the request
func (a *FoldersVideosAPIService) RemoveVideosFromProjectExecute(r ApiRemoveVideosFromProjectRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FoldersVideosAPIService.RemoveVideosFromProject")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/projects/{project_id}/videos"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.uris == nil {
		return nil, reportError("uris is required and must be specified")
	}

	if r.shouldDeleteClips != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "should_delete_clips", r.shouldDeleteClips, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "uris", r.uris, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiRemoveVideosFromProjectAlt1Request struct {
	ctx context.Context
	ApiService FoldersVideosAPI
	projectId float32
	uris *string
	shouldDeleteClips *bool
}

// A comma-separated list of the video URIs to remove.
func (r ApiRemoveVideosFromProjectAlt1Request) Uris(uris string) ApiRemoveVideosFromProjectAlt1Request {
	r.uris = &uris
	return r
}

// Whether to delete the videos when removing them from the folder.
func (r ApiRemoveVideosFromProjectAlt1Request) ShouldDeleteClips(shouldDeleteClips bool) ApiRemoveVideosFromProjectAlt1Request {
	r.shouldDeleteClips = &shouldDeleteClips
	return r
}

func (r ApiRemoveVideosFromProjectAlt1Request) Execute() (*http.Response, error) {
	return r.ApiService.RemoveVideosFromProjectAlt1Execute(r)
}

/*
RemoveVideosFromProjectAlt1 Remove a list of videos from a folder

This method removes multiple videos from the specified folder. The authenticated user must be the owner of the folder.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId The ID of the folder.
 @return ApiRemoveVideosFromProjectAlt1Request
*/
func (a *FoldersVideosAPIService) RemoveVideosFromProjectAlt1(ctx context.Context, projectId float32) ApiRemoveVideosFromProjectAlt1Request {
	return ApiRemoveVideosFromProjectAlt1Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
func (a *FoldersVideosAPIService) RemoveVideosFromProjectAlt1Execute(r ApiRemoveVideosFromProjectAlt1Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FoldersVideosAPIService.RemoveVideosFromProjectAlt1")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/projects/{project_id}/videos"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.uris == nil {
		return nil, reportError("uris is required and must be specified")
	}

	if r.shouldDeleteClips != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "should_delete_clips", r.shouldDeleteClips, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "uris", r.uris, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
