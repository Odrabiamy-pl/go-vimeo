/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the WebinarRegistrationData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebinarRegistrationData{}

// WebinarRegistrationData Registration data about the webinar owner.
type WebinarRegistrationData struct {
	// The maximum number of registrants permitted to attend the webinar.
	Capping float32 `json:"capping"`
	// Whether the number of registrants is unlimited.
	IsUnlimited bool `json:"is_unlimited"`
	// The minimum number of registrants to trigger the 80% capping email.
	LowerLimit float32 `json:"lower_limit"`
	// The number of registrants who have signed up for the webinar.
	Total float32 `json:"total"`
	// The maximum number of registrants to trigger the 100% capping email.
	UpperLimit float32 `json:"upper_limit"`
}

// NewWebinarRegistrationData instantiates a new WebinarRegistrationData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebinarRegistrationData(capping float32, isUnlimited bool, lowerLimit float32, total float32, upperLimit float32) *WebinarRegistrationData {
	this := WebinarRegistrationData{}
	this.Capping = capping
	this.IsUnlimited = isUnlimited
	this.LowerLimit = lowerLimit
	this.Total = total
	this.UpperLimit = upperLimit
	return &this
}

// NewWebinarRegistrationDataWithDefaults instantiates a new WebinarRegistrationData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebinarRegistrationDataWithDefaults() *WebinarRegistrationData {
	this := WebinarRegistrationData{}
	return &this
}

// GetCapping returns the Capping field value
func (o *WebinarRegistrationData) GetCapping() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Capping
}

// GetCappingOk returns a tuple with the Capping field value
// and a boolean to check if the value has been set.
func (o *WebinarRegistrationData) GetCappingOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Capping, true
}

// SetCapping sets field value
func (o *WebinarRegistrationData) SetCapping(v float32) {
	o.Capping = v
}

// GetIsUnlimited returns the IsUnlimited field value
func (o *WebinarRegistrationData) GetIsUnlimited() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsUnlimited
}

// GetIsUnlimitedOk returns a tuple with the IsUnlimited field value
// and a boolean to check if the value has been set.
func (o *WebinarRegistrationData) GetIsUnlimitedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsUnlimited, true
}

// SetIsUnlimited sets field value
func (o *WebinarRegistrationData) SetIsUnlimited(v bool) {
	o.IsUnlimited = v
}

// GetLowerLimit returns the LowerLimit field value
func (o *WebinarRegistrationData) GetLowerLimit() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.LowerLimit
}

// GetLowerLimitOk returns a tuple with the LowerLimit field value
// and a boolean to check if the value has been set.
func (o *WebinarRegistrationData) GetLowerLimitOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LowerLimit, true
}

// SetLowerLimit sets field value
func (o *WebinarRegistrationData) SetLowerLimit(v float32) {
	o.LowerLimit = v
}

// GetTotal returns the Total field value
func (o *WebinarRegistrationData) GetTotal() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *WebinarRegistrationData) GetTotalOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *WebinarRegistrationData) SetTotal(v float32) {
	o.Total = v
}

// GetUpperLimit returns the UpperLimit field value
func (o *WebinarRegistrationData) GetUpperLimit() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.UpperLimit
}

// GetUpperLimitOk returns a tuple with the UpperLimit field value
// and a boolean to check if the value has been set.
func (o *WebinarRegistrationData) GetUpperLimitOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpperLimit, true
}

// SetUpperLimit sets field value
func (o *WebinarRegistrationData) SetUpperLimit(v float32) {
	o.UpperLimit = v
}

func (o WebinarRegistrationData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebinarRegistrationData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["capping"] = o.Capping
	toSerialize["is_unlimited"] = o.IsUnlimited
	toSerialize["lower_limit"] = o.LowerLimit
	toSerialize["total"] = o.Total
	toSerialize["upper_limit"] = o.UpperLimit
	return toSerialize, nil
}

type NullableWebinarRegistrationData struct {
	value *WebinarRegistrationData
	isSet bool
}

func (v NullableWebinarRegistrationData) Get() *WebinarRegistrationData {
	return v.value
}

func (v *NullableWebinarRegistrationData) Set(val *WebinarRegistrationData) {
	v.value = val
	v.isSet = true
}

func (v NullableWebinarRegistrationData) IsSet() bool {
	return v.isSet
}

func (v *NullableWebinarRegistrationData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebinarRegistrationData(val *WebinarRegistrationData) *NullableWebinarRegistrationData {
	return &NullableWebinarRegistrationData{value: val, isSet: true}
}

func (v NullableWebinarRegistrationData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebinarRegistrationData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


