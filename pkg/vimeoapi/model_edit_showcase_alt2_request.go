/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the EditShowcaseAlt2Request type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EditShowcaseAlt2Request{}

// EditShowcaseAlt2Request struct for EditShowcaseAlt2Request
type EditShowcaseAlt2Request struct {
	// The hexadecimal code for the color of the player buttons and showcase controls.
	BrandColor *string `json:"brand_color,omitempty"`
	// The description of the showcase.
	Description *string `json:"description,omitempty"`
	// The custom domain of the showcase.
	Domain NullableString `json:"domain,omitempty"`
	// Whether to hide Vimeo navigation when displaying the showcase.
	HideNav *bool `json:"hide_nav,omitempty"`
	// Whether to include the upcoming event in the showcase.
	HideUpcoming *bool `json:"hide_upcoming,omitempty"`
	// The type of layout for presenting the showcase.  Option descriptions:  * `grid` - The videos appear in a grid.  * `player` - The videos appear in the player. 
	Layout *string `json:"layout,omitempty"`
	// The name of the showcase.
	Name *string `json:"name,omitempty"`
	// The showcase's password. This field is required only when **privacy** is `password`.
	Password *string `json:"password,omitempty"`
	// The privacy level of the showcase.  Option descriptions:  * `anybody` - Anyone can access the showcase, either on Vimeo or through an embed.  * `embed_only` - The showcase doesn't appear on Vimeo, but it can be embedded on other sites.  * `nobody` - No one can access the showcase, including the authenticated user.  * `password` - Only people with the password can access the showcase.  * `team` - Only members of the authenticated user's team can access the showcase.  * `unlisted` - The showcase can't be accessed if the URL omits its unlisted hash. 
	Privacy *string `json:"privacy,omitempty"`
	// Whether showcase videos use the review mode URL.
	ReviewMode *bool `json:"review_mode,omitempty"`
	// The default sort order of the videos as they appear in the showcase.  Option descriptions:  * `added_first` - The videos appear according to when they were added to the showcase, with the most recently added first.  * `added_last` - The videos appear according to when they were added to the showcase, with the most recently added last.  * `alphabetical` - The videos appear alphabetically by their title.  * `arranged` - The videos appear as arranged by the owner of the showcase.  * `comments` - The videos appear according to their number of comments.  * `likes` - The videos appear according to their number of likes.  * `newest` - The videos appear in chronological order with the newest first.  * `oldest` - The videos appear in chronological order with the oldest first.  * `plays` - The videos appear according to their number of plays. 
	Sort *string `json:"sort,omitempty"`
	// The color theme of the showcase.  Option descriptions:  * `dark` - The showcase uses the dark theme.  * `standard` - The showcase uses the standard theme. 
	Theme *string `json:"theme,omitempty"`
	// The custom Vimeo URL of the showcase.
	Url NullableString `json:"url,omitempty"`
	// Whether the user has opted for a custom domain for their showcase.
	UseCustomDomain *bool `json:"use_custom_domain,omitempty"`
}

// NewEditShowcaseAlt2Request instantiates a new EditShowcaseAlt2Request object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditShowcaseAlt2Request() *EditShowcaseAlt2Request {
	this := EditShowcaseAlt2Request{}
	return &this
}

// NewEditShowcaseAlt2RequestWithDefaults instantiates a new EditShowcaseAlt2Request object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditShowcaseAlt2RequestWithDefaults() *EditShowcaseAlt2Request {
	this := EditShowcaseAlt2Request{}
	return &this
}

// GetBrandColor returns the BrandColor field value if set, zero value otherwise.
func (o *EditShowcaseAlt2Request) GetBrandColor() string {
	if o == nil || IsNil(o.BrandColor) {
		var ret string
		return ret
	}
	return *o.BrandColor
}

// GetBrandColorOk returns a tuple with the BrandColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditShowcaseAlt2Request) GetBrandColorOk() (*string, bool) {
	if o == nil || IsNil(o.BrandColor) {
		return nil, false
	}
	return o.BrandColor, true
}

// HasBrandColor returns a boolean if a field has been set.
func (o *EditShowcaseAlt2Request) HasBrandColor() bool {
	if o != nil && !IsNil(o.BrandColor) {
		return true
	}

	return false
}

// SetBrandColor gets a reference to the given string and assigns it to the BrandColor field.
func (o *EditShowcaseAlt2Request) SetBrandColor(v string) {
	o.BrandColor = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EditShowcaseAlt2Request) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditShowcaseAlt2Request) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EditShowcaseAlt2Request) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EditShowcaseAlt2Request) SetDescription(v string) {
	o.Description = &v
}

// GetDomain returns the Domain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EditShowcaseAlt2Request) GetDomain() string {
	if o == nil || IsNil(o.Domain.Get()) {
		var ret string
		return ret
	}
	return *o.Domain.Get()
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EditShowcaseAlt2Request) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Domain.Get(), o.Domain.IsSet()
}

// HasDomain returns a boolean if a field has been set.
func (o *EditShowcaseAlt2Request) HasDomain() bool {
	if o != nil && o.Domain.IsSet() {
		return true
	}

	return false
}

// SetDomain gets a reference to the given NullableString and assigns it to the Domain field.
func (o *EditShowcaseAlt2Request) SetDomain(v string) {
	o.Domain.Set(&v)
}
// SetDomainNil sets the value for Domain to be an explicit nil
func (o *EditShowcaseAlt2Request) SetDomainNil() {
	o.Domain.Set(nil)
}

// UnsetDomain ensures that no value is present for Domain, not even an explicit nil
func (o *EditShowcaseAlt2Request) UnsetDomain() {
	o.Domain.Unset()
}

// GetHideNav returns the HideNav field value if set, zero value otherwise.
func (o *EditShowcaseAlt2Request) GetHideNav() bool {
	if o == nil || IsNil(o.HideNav) {
		var ret bool
		return ret
	}
	return *o.HideNav
}

// GetHideNavOk returns a tuple with the HideNav field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditShowcaseAlt2Request) GetHideNavOk() (*bool, bool) {
	if o == nil || IsNil(o.HideNav) {
		return nil, false
	}
	return o.HideNav, true
}

// HasHideNav returns a boolean if a field has been set.
func (o *EditShowcaseAlt2Request) HasHideNav() bool {
	if o != nil && !IsNil(o.HideNav) {
		return true
	}

	return false
}

// SetHideNav gets a reference to the given bool and assigns it to the HideNav field.
func (o *EditShowcaseAlt2Request) SetHideNav(v bool) {
	o.HideNav = &v
}

// GetHideUpcoming returns the HideUpcoming field value if set, zero value otherwise.
func (o *EditShowcaseAlt2Request) GetHideUpcoming() bool {
	if o == nil || IsNil(o.HideUpcoming) {
		var ret bool
		return ret
	}
	return *o.HideUpcoming
}

// GetHideUpcomingOk returns a tuple with the HideUpcoming field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditShowcaseAlt2Request) GetHideUpcomingOk() (*bool, bool) {
	if o == nil || IsNil(o.HideUpcoming) {
		return nil, false
	}
	return o.HideUpcoming, true
}

// HasHideUpcoming returns a boolean if a field has been set.
func (o *EditShowcaseAlt2Request) HasHideUpcoming() bool {
	if o != nil && !IsNil(o.HideUpcoming) {
		return true
	}

	return false
}

// SetHideUpcoming gets a reference to the given bool and assigns it to the HideUpcoming field.
func (o *EditShowcaseAlt2Request) SetHideUpcoming(v bool) {
	o.HideUpcoming = &v
}

// GetLayout returns the Layout field value if set, zero value otherwise.
func (o *EditShowcaseAlt2Request) GetLayout() string {
	if o == nil || IsNil(o.Layout) {
		var ret string
		return ret
	}
	return *o.Layout
}

// GetLayoutOk returns a tuple with the Layout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditShowcaseAlt2Request) GetLayoutOk() (*string, bool) {
	if o == nil || IsNil(o.Layout) {
		return nil, false
	}
	return o.Layout, true
}

// HasLayout returns a boolean if a field has been set.
func (o *EditShowcaseAlt2Request) HasLayout() bool {
	if o != nil && !IsNil(o.Layout) {
		return true
	}

	return false
}

// SetLayout gets a reference to the given string and assigns it to the Layout field.
func (o *EditShowcaseAlt2Request) SetLayout(v string) {
	o.Layout = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EditShowcaseAlt2Request) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditShowcaseAlt2Request) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EditShowcaseAlt2Request) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EditShowcaseAlt2Request) SetName(v string) {
	o.Name = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *EditShowcaseAlt2Request) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditShowcaseAlt2Request) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *EditShowcaseAlt2Request) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *EditShowcaseAlt2Request) SetPassword(v string) {
	o.Password = &v
}

// GetPrivacy returns the Privacy field value if set, zero value otherwise.
func (o *EditShowcaseAlt2Request) GetPrivacy() string {
	if o == nil || IsNil(o.Privacy) {
		var ret string
		return ret
	}
	return *o.Privacy
}

// GetPrivacyOk returns a tuple with the Privacy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditShowcaseAlt2Request) GetPrivacyOk() (*string, bool) {
	if o == nil || IsNil(o.Privacy) {
		return nil, false
	}
	return o.Privacy, true
}

// HasPrivacy returns a boolean if a field has been set.
func (o *EditShowcaseAlt2Request) HasPrivacy() bool {
	if o != nil && !IsNil(o.Privacy) {
		return true
	}

	return false
}

// SetPrivacy gets a reference to the given string and assigns it to the Privacy field.
func (o *EditShowcaseAlt2Request) SetPrivacy(v string) {
	o.Privacy = &v
}

// GetReviewMode returns the ReviewMode field value if set, zero value otherwise.
func (o *EditShowcaseAlt2Request) GetReviewMode() bool {
	if o == nil || IsNil(o.ReviewMode) {
		var ret bool
		return ret
	}
	return *o.ReviewMode
}

// GetReviewModeOk returns a tuple with the ReviewMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditShowcaseAlt2Request) GetReviewModeOk() (*bool, bool) {
	if o == nil || IsNil(o.ReviewMode) {
		return nil, false
	}
	return o.ReviewMode, true
}

// HasReviewMode returns a boolean if a field has been set.
func (o *EditShowcaseAlt2Request) HasReviewMode() bool {
	if o != nil && !IsNil(o.ReviewMode) {
		return true
	}

	return false
}

// SetReviewMode gets a reference to the given bool and assigns it to the ReviewMode field.
func (o *EditShowcaseAlt2Request) SetReviewMode(v bool) {
	o.ReviewMode = &v
}

// GetSort returns the Sort field value if set, zero value otherwise.
func (o *EditShowcaseAlt2Request) GetSort() string {
	if o == nil || IsNil(o.Sort) {
		var ret string
		return ret
	}
	return *o.Sort
}

// GetSortOk returns a tuple with the Sort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditShowcaseAlt2Request) GetSortOk() (*string, bool) {
	if o == nil || IsNil(o.Sort) {
		return nil, false
	}
	return o.Sort, true
}

// HasSort returns a boolean if a field has been set.
func (o *EditShowcaseAlt2Request) HasSort() bool {
	if o != nil && !IsNil(o.Sort) {
		return true
	}

	return false
}

// SetSort gets a reference to the given string and assigns it to the Sort field.
func (o *EditShowcaseAlt2Request) SetSort(v string) {
	o.Sort = &v
}

// GetTheme returns the Theme field value if set, zero value otherwise.
func (o *EditShowcaseAlt2Request) GetTheme() string {
	if o == nil || IsNil(o.Theme) {
		var ret string
		return ret
	}
	return *o.Theme
}

// GetThemeOk returns a tuple with the Theme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditShowcaseAlt2Request) GetThemeOk() (*string, bool) {
	if o == nil || IsNil(o.Theme) {
		return nil, false
	}
	return o.Theme, true
}

// HasTheme returns a boolean if a field has been set.
func (o *EditShowcaseAlt2Request) HasTheme() bool {
	if o != nil && !IsNil(o.Theme) {
		return true
	}

	return false
}

// SetTheme gets a reference to the given string and assigns it to the Theme field.
func (o *EditShowcaseAlt2Request) SetTheme(v string) {
	o.Theme = &v
}

// GetUrl returns the Url field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EditShowcaseAlt2Request) GetUrl() string {
	if o == nil || IsNil(o.Url.Get()) {
		var ret string
		return ret
	}
	return *o.Url.Get()
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EditShowcaseAlt2Request) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Url.Get(), o.Url.IsSet()
}

// HasUrl returns a boolean if a field has been set.
func (o *EditShowcaseAlt2Request) HasUrl() bool {
	if o != nil && o.Url.IsSet() {
		return true
	}

	return false
}

// SetUrl gets a reference to the given NullableString and assigns it to the Url field.
func (o *EditShowcaseAlt2Request) SetUrl(v string) {
	o.Url.Set(&v)
}
// SetUrlNil sets the value for Url to be an explicit nil
func (o *EditShowcaseAlt2Request) SetUrlNil() {
	o.Url.Set(nil)
}

// UnsetUrl ensures that no value is present for Url, not even an explicit nil
func (o *EditShowcaseAlt2Request) UnsetUrl() {
	o.Url.Unset()
}

// GetUseCustomDomain returns the UseCustomDomain field value if set, zero value otherwise.
func (o *EditShowcaseAlt2Request) GetUseCustomDomain() bool {
	if o == nil || IsNil(o.UseCustomDomain) {
		var ret bool
		return ret
	}
	return *o.UseCustomDomain
}

// GetUseCustomDomainOk returns a tuple with the UseCustomDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditShowcaseAlt2Request) GetUseCustomDomainOk() (*bool, bool) {
	if o == nil || IsNil(o.UseCustomDomain) {
		return nil, false
	}
	return o.UseCustomDomain, true
}

// HasUseCustomDomain returns a boolean if a field has been set.
func (o *EditShowcaseAlt2Request) HasUseCustomDomain() bool {
	if o != nil && !IsNil(o.UseCustomDomain) {
		return true
	}

	return false
}

// SetUseCustomDomain gets a reference to the given bool and assigns it to the UseCustomDomain field.
func (o *EditShowcaseAlt2Request) SetUseCustomDomain(v bool) {
	o.UseCustomDomain = &v
}

func (o EditShowcaseAlt2Request) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EditShowcaseAlt2Request) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BrandColor) {
		toSerialize["brand_color"] = o.BrandColor
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if o.Domain.IsSet() {
		toSerialize["domain"] = o.Domain.Get()
	}
	if !IsNil(o.HideNav) {
		toSerialize["hide_nav"] = o.HideNav
	}
	if !IsNil(o.HideUpcoming) {
		toSerialize["hide_upcoming"] = o.HideUpcoming
	}
	if !IsNil(o.Layout) {
		toSerialize["layout"] = o.Layout
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.Privacy) {
		toSerialize["privacy"] = o.Privacy
	}
	if !IsNil(o.ReviewMode) {
		toSerialize["review_mode"] = o.ReviewMode
	}
	if !IsNil(o.Sort) {
		toSerialize["sort"] = o.Sort
	}
	if !IsNil(o.Theme) {
		toSerialize["theme"] = o.Theme
	}
	if o.Url.IsSet() {
		toSerialize["url"] = o.Url.Get()
	}
	if !IsNil(o.UseCustomDomain) {
		toSerialize["use_custom_domain"] = o.UseCustomDomain
	}
	return toSerialize, nil
}

type NullableEditShowcaseAlt2Request struct {
	value *EditShowcaseAlt2Request
	isSet bool
}

func (v NullableEditShowcaseAlt2Request) Get() *EditShowcaseAlt2Request {
	return v.value
}

func (v *NullableEditShowcaseAlt2Request) Set(val *EditShowcaseAlt2Request) {
	v.value = val
	v.isSet = true
}

func (v NullableEditShowcaseAlt2Request) IsSet() bool {
	return v.isSet
}

func (v *NullableEditShowcaseAlt2Request) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditShowcaseAlt2Request(val *EditShowcaseAlt2Request) *NullableEditShowcaseAlt2Request {
	return &NullableEditShowcaseAlt2Request{value: val, isSet: true}
}

func (v NullableEditShowcaseAlt2Request) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditShowcaseAlt2Request) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


