/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type VideosCreditsAPI interface {

	/*
		AddVideoCredit Credit a user in a video

		This method adds a user credit to the specified video.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param videoId The ID of the video.
		@return ApiAddVideoCreditRequest
	*/
	AddVideoCredit(ctx context.Context, videoId int32) ApiAddVideoCreditRequest

	// AddVideoCreditExecute executes the request
	//  @return Credit
	AddVideoCreditExecute(r ApiAddVideoCreditRequest) (*Credit, *http.Response, error)

	/*
		AddVideoCreditAlt1 Credit a user in a video

		This method adds a user credit to the specified video.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param channelId The ID of the channel.
		@param videoId The ID of the video.
		@return ApiAddVideoCreditAlt1Request
	*/
	AddVideoCreditAlt1(ctx context.Context, channelId float32, videoId int32) ApiAddVideoCreditAlt1Request

	// AddVideoCreditAlt1Execute executes the request
	//  @return Credit
	AddVideoCreditAlt1Execute(r ApiAddVideoCreditAlt1Request) (*Credit, *http.Response, error)

	/*
		AvailableUsers Get users who can be credited on a video

		This method returns the users who can be credited on the specified video.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param videoId The ID of the video.
		@return ApiAvailableUsersRequest
	*/
	AvailableUsers(ctx context.Context, videoId int32) ApiAvailableUsersRequest

	// AvailableUsersExecute executes the request
	//  @return []User
	AvailableUsersExecute(r ApiAvailableUsersRequest) ([]User, *http.Response, error)

	/*
		DeleteVideoCredit Delete the credit for a user in a video

		This method deletes the specified user credit from a video. The authenticated user must be the creator of the credit or the credited user.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param creditId The ID of the credit.
		@param videoId The ID of the video.
		@return ApiDeleteVideoCreditRequest
	*/
	DeleteVideoCredit(ctx context.Context, creditId float32, videoId int32) ApiDeleteVideoCreditRequest

	// DeleteVideoCreditExecute executes the request
	DeleteVideoCreditExecute(r ApiDeleteVideoCreditRequest) (*http.Response, error)

	/*
		EditVideoCredit Edit the credit for a user in a video

		This method edits the specified user credit in a video.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param creditId The ID of the credit.
		@param videoId The ID of the video.
		@return ApiEditVideoCreditRequest
	*/
	EditVideoCredit(ctx context.Context, creditId float32, videoId int32) ApiEditVideoCreditRequest

	// EditVideoCreditExecute executes the request
	//  @return Credit
	EditVideoCreditExecute(r ApiEditVideoCreditRequest) (*Credit, *http.Response, error)

	/*
		GetVideoCredit Get a specific credited user in a video

		This method returns a single credited user in a video.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param creditId The ID of the credit.
		@param videoId The ID of the video.
		@return ApiGetVideoCreditRequest
	*/
	GetVideoCredit(ctx context.Context, creditId float32, videoId int32) ApiGetVideoCreditRequest

	// GetVideoCreditExecute executes the request
	//  @return Credit
	GetVideoCreditExecute(r ApiGetVideoCreditRequest) (*Credit, *http.Response, error)

	/*
		GetVideoCredits Get all the credited users in a video

		This method returns every credited user in a video.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param videoId The ID of the video.
		@return ApiGetVideoCreditsRequest
	*/
	GetVideoCredits(ctx context.Context, videoId int32) ApiGetVideoCreditsRequest

	// GetVideoCreditsExecute executes the request
	//  @return []Credit
	GetVideoCreditsExecute(r ApiGetVideoCreditsRequest) ([]Credit, *http.Response, error)

	/*
		GetVideoCreditsAlt1 Get all the credited users in a video

		This method returns every credited user in a video.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param channelId The ID of the channel.
		@param videoId The ID of the video.
		@return ApiGetVideoCreditsAlt1Request
	*/
	GetVideoCreditsAlt1(ctx context.Context, channelId float32, videoId int32) ApiGetVideoCreditsAlt1Request

	// GetVideoCreditsAlt1Execute executes the request
	//  @return []Credit
	GetVideoCreditsAlt1Execute(r ApiGetVideoCreditsAlt1Request) ([]Credit, *http.Response, error)
}

// VideosCreditsAPIService VideosCreditsAPI service
type VideosCreditsAPIService service

type ApiAddVideoCreditRequest struct {
	ctx                       context.Context
	ApiService                VideosCreditsAPI
	videoId                   int32
	addVideoCreditAlt1Request *AddVideoCreditAlt1Request
}

func (r ApiAddVideoCreditRequest) AddVideoCreditAlt1Request(addVideoCreditAlt1Request AddVideoCreditAlt1Request) ApiAddVideoCreditRequest {
	r.addVideoCreditAlt1Request = &addVideoCreditAlt1Request
	return r
}

func (r ApiAddVideoCreditRequest) Execute() (*Credit, *http.Response, error) {
	return r.ApiService.AddVideoCreditExecute(r)
}

/*
AddVideoCredit Credit a user in a video

This method adds a user credit to the specified video.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param videoId The ID of the video.
	@return ApiAddVideoCreditRequest
*/
func (a *VideosCreditsAPIService) AddVideoCredit(ctx context.Context, videoId int32) ApiAddVideoCreditRequest {
	return ApiAddVideoCreditRequest{
		ApiService: a,
		ctx:        ctx,
		videoId:    videoId,
	}
}

// Execute executes the request
//
//	@return Credit
func (a *VideosCreditsAPIService) AddVideoCreditExecute(r ApiAddVideoCreditRequest) (*Credit, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Credit
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosCreditsAPIService.AddVideoCredit")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos/{video_id}/credits"
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addVideoCreditAlt1Request == nil {
		return localVarReturnValue, nil, reportError("addVideoCreditAlt1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.vimeo.credit+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.credit+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addVideoCreditAlt1Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAddVideoCreditAlt1Request struct {
	ctx                       context.Context
	ApiService                VideosCreditsAPI
	channelId                 float32
	videoId                   int32
	addVideoCreditAlt1Request *AddVideoCreditAlt1Request
}

func (r ApiAddVideoCreditAlt1Request) AddVideoCreditAlt1Request(addVideoCreditAlt1Request AddVideoCreditAlt1Request) ApiAddVideoCreditAlt1Request {
	r.addVideoCreditAlt1Request = &addVideoCreditAlt1Request
	return r
}

func (r ApiAddVideoCreditAlt1Request) Execute() (*Credit, *http.Response, error) {
	return r.ApiService.AddVideoCreditAlt1Execute(r)
}

/*
AddVideoCreditAlt1 Credit a user in a video

This method adds a user credit to the specified video.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param channelId The ID of the channel.
	@param videoId The ID of the video.
	@return ApiAddVideoCreditAlt1Request
*/
func (a *VideosCreditsAPIService) AddVideoCreditAlt1(ctx context.Context, channelId float32, videoId int32) ApiAddVideoCreditAlt1Request {
	return ApiAddVideoCreditAlt1Request{
		ApiService: a,
		ctx:        ctx,
		channelId:  channelId,
		videoId:    videoId,
	}
}

// Execute executes the request
//
//	@return Credit
func (a *VideosCreditsAPIService) AddVideoCreditAlt1Execute(r ApiAddVideoCreditAlt1Request) (*Credit, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Credit
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosCreditsAPIService.AddVideoCreditAlt1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/channels/{channel_id}/videos/{video_id}/credits"
	localVarPath = strings.Replace(localVarPath, "{"+"channel_id"+"}", url.PathEscape(parameterValueToString(r.channelId, "channelId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addVideoCreditAlt1Request == nil {
		return localVarReturnValue, nil, reportError("addVideoCreditAlt1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.vimeo.credit+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.credit+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addVideoCreditAlt1Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAvailableUsersRequest struct {
	ctx        context.Context
	ApiService VideosCreditsAPI
	videoId    int32
	direction  *string
	page       *float32
	perPage    *float32
	query      *string
	sort       *string
}

// The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.
func (r ApiAvailableUsersRequest) Direction(direction string) ApiAvailableUsersRequest {
	r.direction = &direction
	return r
}

// The page number of the results to show.
func (r ApiAvailableUsersRequest) Page(page float32) ApiAvailableUsersRequest {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiAvailableUsersRequest) PerPage(perPage float32) ApiAvailableUsersRequest {
	r.perPage = &perPage
	return r
}

// The search query to use to filter the results.
func (r ApiAvailableUsersRequest) Query(query string) ApiAvailableUsersRequest {
	r.query = &query
	return r
}

// The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date followed.
func (r ApiAvailableUsersRequest) Sort(sort string) ApiAvailableUsersRequest {
	r.sort = &sort
	return r
}

func (r ApiAvailableUsersRequest) Execute() ([]User, *http.Response, error) {
	return r.ApiService.AvailableUsersExecute(r)
}

/*
AvailableUsers Get users who can be credited on a video

This method returns the users who can be credited on the specified video.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param videoId The ID of the video.
	@return ApiAvailableUsersRequest
*/
func (a *VideosCreditsAPIService) AvailableUsers(ctx context.Context, videoId int32) ApiAvailableUsersRequest {
	return ApiAvailableUsersRequest{
		ApiService: a,
		ctx:        ctx,
		videoId:    videoId,
	}
}

// Execute executes the request
//
//	@return []User
func (a *VideosCreditsAPIService) AvailableUsersExecute(r ApiAvailableUsersRequest) ([]User, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []User
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosCreditsAPIService.AvailableUsers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos/{video_id}/credits/available_users"
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	if r.query != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "query", r.query, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.user+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteVideoCreditRequest struct {
	ctx        context.Context
	ApiService VideosCreditsAPI
	creditId   float32
	videoId    int32
}

func (r ApiDeleteVideoCreditRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteVideoCreditExecute(r)
}

/*
DeleteVideoCredit Delete the credit for a user in a video

This method deletes the specified user credit from a video. The authenticated user must be the creator of the credit or the credited user.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param creditId The ID of the credit.
	@param videoId The ID of the video.
	@return ApiDeleteVideoCreditRequest
*/
func (a *VideosCreditsAPIService) DeleteVideoCredit(ctx context.Context, creditId float32, videoId int32) ApiDeleteVideoCreditRequest {
	return ApiDeleteVideoCreditRequest{
		ApiService: a,
		ctx:        ctx,
		creditId:   creditId,
		videoId:    videoId,
	}
}

// Execute executes the request
func (a *VideosCreditsAPIService) DeleteVideoCreditExecute(r ApiDeleteVideoCreditRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosCreditsAPIService.DeleteVideoCredit")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos/{video_id}/credits/{credit_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"credit_id"+"}", url.PathEscape(parameterValueToString(r.creditId, "creditId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEditVideoCreditRequest struct {
	ctx                    context.Context
	ApiService             VideosCreditsAPI
	creditId               float32
	videoId                int32
	editVideoCreditRequest *EditVideoCreditRequest
}

func (r ApiEditVideoCreditRequest) EditVideoCreditRequest(editVideoCreditRequest EditVideoCreditRequest) ApiEditVideoCreditRequest {
	r.editVideoCreditRequest = &editVideoCreditRequest
	return r
}

func (r ApiEditVideoCreditRequest) Execute() (*Credit, *http.Response, error) {
	return r.ApiService.EditVideoCreditExecute(r)
}

/*
EditVideoCredit Edit the credit for a user in a video

This method edits the specified user credit in a video.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param creditId The ID of the credit.
	@param videoId The ID of the video.
	@return ApiEditVideoCreditRequest
*/
func (a *VideosCreditsAPIService) EditVideoCredit(ctx context.Context, creditId float32, videoId int32) ApiEditVideoCreditRequest {
	return ApiEditVideoCreditRequest{
		ApiService: a,
		ctx:        ctx,
		creditId:   creditId,
		videoId:    videoId,
	}
}

// Execute executes the request
//
//	@return Credit
func (a *VideosCreditsAPIService) EditVideoCreditExecute(r ApiEditVideoCreditRequest) (*Credit, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Credit
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosCreditsAPIService.EditVideoCredit")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos/{video_id}/credits/{credit_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"credit_id"+"}", url.PathEscape(parameterValueToString(r.creditId, "creditId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.vimeo.credit+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.credit+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.editVideoCreditRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetVideoCreditRequest struct {
	ctx        context.Context
	ApiService VideosCreditsAPI
	creditId   float32
	videoId    int32
}

func (r ApiGetVideoCreditRequest) Execute() (*Credit, *http.Response, error) {
	return r.ApiService.GetVideoCreditExecute(r)
}

/*
GetVideoCredit Get a specific credited user in a video

This method returns a single credited user in a video.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param creditId The ID of the credit.
	@param videoId The ID of the video.
	@return ApiGetVideoCreditRequest
*/
func (a *VideosCreditsAPIService) GetVideoCredit(ctx context.Context, creditId float32, videoId int32) ApiGetVideoCreditRequest {
	return ApiGetVideoCreditRequest{
		ApiService: a,
		ctx:        ctx,
		creditId:   creditId,
		videoId:    videoId,
	}
}

// Execute executes the request
//
//	@return Credit
func (a *VideosCreditsAPIService) GetVideoCreditExecute(r ApiGetVideoCreditRequest) (*Credit, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Credit
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosCreditsAPIService.GetVideoCredit")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos/{video_id}/credits/{credit_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"credit_id"+"}", url.PathEscape(parameterValueToString(r.creditId, "creditId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.credit+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetVideoCreditsRequest struct {
	ctx        context.Context
	ApiService VideosCreditsAPI
	videoId    int32
	direction  *string
	page       *float32
	perPage    *float32
	query      *string
	sort       *string
}

// The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.
func (r ApiGetVideoCreditsRequest) Direction(direction string) ApiGetVideoCreditsRequest {
	r.direction = &direction
	return r
}

// The page number of the results to show.
func (r ApiGetVideoCreditsRequest) Page(page float32) ApiGetVideoCreditsRequest {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiGetVideoCreditsRequest) PerPage(perPage float32) ApiGetVideoCreditsRequest {
	r.perPage = &perPage
	return r
}

// The search query to use to filter the results.
func (r ApiGetVideoCreditsRequest) Query(query string) ApiGetVideoCreditsRequest {
	r.query = &query
	return r
}

// The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.
func (r ApiGetVideoCreditsRequest) Sort(sort string) ApiGetVideoCreditsRequest {
	r.sort = &sort
	return r
}

func (r ApiGetVideoCreditsRequest) Execute() ([]Credit, *http.Response, error) {
	return r.ApiService.GetVideoCreditsExecute(r)
}

/*
GetVideoCredits Get all the credited users in a video

This method returns every credited user in a video.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param videoId The ID of the video.
	@return ApiGetVideoCreditsRequest
*/
func (a *VideosCreditsAPIService) GetVideoCredits(ctx context.Context, videoId int32) ApiGetVideoCreditsRequest {
	return ApiGetVideoCreditsRequest{
		ApiService: a,
		ctx:        ctx,
		videoId:    videoId,
	}
}

// Execute executes the request
//
//	@return []Credit
func (a *VideosCreditsAPIService) GetVideoCreditsExecute(r ApiGetVideoCreditsRequest) ([]Credit, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Credit
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosCreditsAPIService.GetVideoCredits")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos/{video_id}/credits"
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	if r.query != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "query", r.query, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.credit+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetVideoCreditsAlt1Request struct {
	ctx        context.Context
	ApiService VideosCreditsAPI
	channelId  float32
	videoId    int32
	direction  *string
	page       *float32
	perPage    *float32
	query      *string
	sort       *string
}

// The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.
func (r ApiGetVideoCreditsAlt1Request) Direction(direction string) ApiGetVideoCreditsAlt1Request {
	r.direction = &direction
	return r
}

// The page number of the results to show.
func (r ApiGetVideoCreditsAlt1Request) Page(page float32) ApiGetVideoCreditsAlt1Request {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiGetVideoCreditsAlt1Request) PerPage(perPage float32) ApiGetVideoCreditsAlt1Request {
	r.perPage = &perPage
	return r
}

// The search query to use to filter the results.
func (r ApiGetVideoCreditsAlt1Request) Query(query string) ApiGetVideoCreditsAlt1Request {
	r.query = &query
	return r
}

// The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.
func (r ApiGetVideoCreditsAlt1Request) Sort(sort string) ApiGetVideoCreditsAlt1Request {
	r.sort = &sort
	return r
}

func (r ApiGetVideoCreditsAlt1Request) Execute() ([]Credit, *http.Response, error) {
	return r.ApiService.GetVideoCreditsAlt1Execute(r)
}

/*
GetVideoCreditsAlt1 Get all the credited users in a video

This method returns every credited user in a video.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param channelId The ID of the channel.
	@param videoId The ID of the video.
	@return ApiGetVideoCreditsAlt1Request
*/
func (a *VideosCreditsAPIService) GetVideoCreditsAlt1(ctx context.Context, channelId float32, videoId int32) ApiGetVideoCreditsAlt1Request {
	return ApiGetVideoCreditsAlt1Request{
		ApiService: a,
		ctx:        ctx,
		channelId:  channelId,
		videoId:    videoId,
	}
}

// Execute executes the request
//
//	@return []Credit
func (a *VideosCreditsAPIService) GetVideoCreditsAlt1Execute(r ApiGetVideoCreditsAlt1Request) ([]Credit, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Credit
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosCreditsAPIService.GetVideoCreditsAlt1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/channels/{channel_id}/videos/{video_id}/credits"
	localVarPath = strings.Replace(localVarPath, "{"+"channel_id"+"}", url.PathEscape(parameterValueToString(r.channelId, "channelId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	if r.query != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "query", r.query, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.credit+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
