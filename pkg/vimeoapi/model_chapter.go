/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the Chapter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Chapter{}

// Chapter struct for Chapter
type Chapter struct {
	// The URI of the active thumbnail.
	ActiveThumbnailUri *string `json:"active_thumbnail_uri,omitempty"`
	// The thumbnails associated with the video chapter.
	Thumbnails []Picture `json:"thumbnails"`
	// The timecode of the chapter in seconds from the start of the video.
	Timecode NullableFloat32 `json:"timecode"`
	// The title of the chapter.
	Title NullableString `json:"title"`
	// The relative URI of the chapter.
	Uri string `json:"uri"`
}

// NewChapter instantiates a new Chapter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChapter(thumbnails []Picture, timecode NullableFloat32, title NullableString, uri string) *Chapter {
	this := Chapter{}
	this.Thumbnails = thumbnails
	this.Timecode = timecode
	this.Title = title
	this.Uri = uri
	return &this
}

// NewChapterWithDefaults instantiates a new Chapter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChapterWithDefaults() *Chapter {
	this := Chapter{}
	return &this
}

// GetActiveThumbnailUri returns the ActiveThumbnailUri field value if set, zero value otherwise.
func (o *Chapter) GetActiveThumbnailUri() string {
	if o == nil || IsNil(o.ActiveThumbnailUri) {
		var ret string
		return ret
	}
	return *o.ActiveThumbnailUri
}

// GetActiveThumbnailUriOk returns a tuple with the ActiveThumbnailUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Chapter) GetActiveThumbnailUriOk() (*string, bool) {
	if o == nil || IsNil(o.ActiveThumbnailUri) {
		return nil, false
	}
	return o.ActiveThumbnailUri, true
}

// HasActiveThumbnailUri returns a boolean if a field has been set.
func (o *Chapter) HasActiveThumbnailUri() bool {
	if o != nil && !IsNil(o.ActiveThumbnailUri) {
		return true
	}

	return false
}

// SetActiveThumbnailUri gets a reference to the given string and assigns it to the ActiveThumbnailUri field.
func (o *Chapter) SetActiveThumbnailUri(v string) {
	o.ActiveThumbnailUri = &v
}

// GetThumbnails returns the Thumbnails field value
func (o *Chapter) GetThumbnails() []Picture {
	if o == nil {
		var ret []Picture
		return ret
	}

	return o.Thumbnails
}

// GetThumbnailsOk returns a tuple with the Thumbnails field value
// and a boolean to check if the value has been set.
func (o *Chapter) GetThumbnailsOk() ([]Picture, bool) {
	if o == nil {
		return nil, false
	}
	return o.Thumbnails, true
}

// SetThumbnails sets field value
func (o *Chapter) SetThumbnails(v []Picture) {
	o.Thumbnails = v
}

// GetTimecode returns the Timecode field value
// If the value is explicit nil, the zero value for float32 will be returned
func (o *Chapter) GetTimecode() float32 {
	if o == nil || o.Timecode.Get() == nil {
		var ret float32
		return ret
	}

	return *o.Timecode.Get()
}

// GetTimecodeOk returns a tuple with the Timecode field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Chapter) GetTimecodeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timecode.Get(), o.Timecode.IsSet()
}

// SetTimecode sets field value
func (o *Chapter) SetTimecode(v float32) {
	o.Timecode.Set(&v)
}

// GetTitle returns the Title field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Chapter) GetTitle() string {
	if o == nil || o.Title.Get() == nil {
		var ret string
		return ret
	}

	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Chapter) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// SetTitle sets field value
func (o *Chapter) SetTitle(v string) {
	o.Title.Set(&v)
}

// GetUri returns the Uri field value
func (o *Chapter) GetUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uri
}

// GetUriOk returns a tuple with the Uri field value
// and a boolean to check if the value has been set.
func (o *Chapter) GetUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uri, true
}

// SetUri sets field value
func (o *Chapter) SetUri(v string) {
	o.Uri = v
}

func (o Chapter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Chapter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActiveThumbnailUri) {
		toSerialize["active_thumbnail_uri"] = o.ActiveThumbnailUri
	}
	toSerialize["thumbnails"] = o.Thumbnails
	toSerialize["timecode"] = o.Timecode.Get()
	toSerialize["title"] = o.Title.Get()
	toSerialize["uri"] = o.Uri
	return toSerialize, nil
}

type NullableChapter struct {
	value *Chapter
	isSet bool
}

func (v NullableChapter) Get() *Chapter {
	return v.value
}

func (v *NullableChapter) Set(val *Chapter) {
	v.value = val
	v.isSet = true
}

func (v NullableChapter) IsSet() bool {
	return v.isSet
}

func (v *NullableChapter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChapter(val *Chapter) *NullableChapter {
	return &NullableChapter{value: val, isSet: true}
}

func (v NullableChapter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChapter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


