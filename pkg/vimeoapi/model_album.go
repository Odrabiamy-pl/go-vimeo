/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the Album type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Album{}

// Album struct for Album
type Album struct {
	// Whether the showcase permits continuous play.
	AllowContinuousPlay bool `json:"allow_continuous_play"`
	// Whether the showcase permits downloads.
	AllowDownloads bool `json:"allow_downloads"`
	// Whether the showcase permits sharing.
	AllowShare bool `json:"allow_share"`
	// Whether to start playback of the next video in the showcase's embedded playlist immediately after the previous video finishes.
	Autoplay bool `json:"autoplay"`
	// The hexadecimal code for the color of the player buttons and showcase controls.
	BrandColor NullableString `json:"brand_color"`
	// The time in ISO 8601 format when the showcase was created.
	CreatedTime string                  `json:"created_time"`
	CustomLogo  NullableAlbumCustomLogo `json:"custom_logo"`
	// A brief description of the showcase's content.
	Description NullableString `json:"description"`
	// The custom domain of the showcase.
	Domain NullableString `json:"domain"`
	// The state of the SSL certificate that is associated with the showcase's domain.  Option descriptions:  * `null` - There is no associated HTTPS domain with this showcase.  * `0` - The new certificate has yet to be processed.  * `1` - The new certificate is being processed in the queue.  * `2` - The certificate is being processed for renewal in the queue.  * `3` - The new certificate has failed to be issued in the queue.  * `4` - The certificate has failed to be renewed in the queue.  * `5` - The certificate has been successfully issued.  * `6` - The certificate has been successfully renewed.  * `7` - The certificate has failed in the polling flow.  * `8` - The certificate has failed to be renewed in the polling flow.
	DomainCertificateState string `json:"domain_certificate_state"`
	// The total duration in seconds of all the videos in the showcase.
	Duration float32    `json:"duration"`
	Embed    AlbumEmbed `json:"embed"`
	// Whether to show the showcase's custom brand color in the player of the showcase's embedded playlist.
	EmbedBrandColor NullableBool `json:"embed_brand_color"`
	// Whether to show the showcase's custom logo in the player of the showcase's embedded playlist.
	EmbedCustomLogo NullableBool `json:"embed_custom_logo"`
	// Whether the showcase has a thumbnail.
	HasChosenThumbnail bool `json:"has_chosen_thumbnail"`
	// Whether the showcase should be hidden from Vimeo when unlisted.
	HideFromVimeo bool `json:"hide_from_vimeo"`
	// Whether to hide Vimeo navigation when displaying the showcase.
	HideNav bool `json:"hide_nav"`
	// Whether to include the upcoming event in the showcase.
	HideUpcoming bool `json:"hide_upcoming"`
	// Whether to hide the Vimeo logo in the player of the showcase's embedded playlist.
	HideVimeoLogo NullableBool `json:"hide_vimeo_logo"`
	// The type of layout for presenting the showcase.  Option descriptions:  * `grid` - The showcase videos appear in a grid.  * `player` - The showcase videos appear in the player.
	Layout string `json:"layout"`
	// The URL of the showcase.
	Link string `json:"link"`
	// Whether automatic playback restarts at the top of the showcase's embedded playlist after reaching the end of the last video in the playlist.
	Loop     bool          `json:"loop"`
	Metadata AlbumMetadata `json:"metadata"`
	// The time in ISO 8601 format when the showcase was last modified.
	ModifiedTime string `json:"modified_time"`
	// The display name of the showcase.
	Name     string       `json:"name"`
	Pictures Picture      `json:"pictures"`
	Privacy  AlbumPrivacy `json:"privacy"`
	// The resource key of the showcase.
	ResourceKey string `json:"resource_key"`
	// Whether showcase videos use the review mode URL.
	ReviewMode bool `json:"review_mode"`
	// Whether search engines can index the showcase.
	SeoAllowIndexed bool `json:"seo_allow_indexed"`
	// The SEO description of the showcase.
	SeoDescription NullableString `json:"seo_description"`
	// The SEO keywords of the showcase.
	SeoKeywords []string `json:"seo_keywords"`
	// The SEO title of the showcase.
	SeoTitle NullableString `json:"seo_title"`
	// The URL for sharing the showcase.
	ShareLink string `json:"share_link"`
	// The sort order of the showcase.  Option descriptions:  * `added_first` - Sort the showcase videos in order of those most recently added.  * `added_last` - Sort the showcase videos in order of those least recently added.  * `alphabetical` - Sort the showcase videos alphabetically.  * `arranged` - Sort the showcase videos according to their custom arrangement.  * `comments` - Sort the showcase videos by number of comments.  * `likes` - Sort the showcase videos by number of likes.  * `newest` - Sort the showcase videos in order of creation date with the newest first.  * `oldest` - Sort the showcase videos in order of creation date with the oldest first.  * `plays` - Sort the showcase videos by number of plays.
	Sort string `json:"sort"`
	// The color theme of the showcase.  Option descriptions:  * `dark` - The showcase uses the dark theme.  * `standard` - The showcase uses the standard theme.
	Theme string `json:"theme"`
	// The unlisted hash of the showcase. Omit this hash from the showcase URL to prevent access to the showcase on Vimeo.
	UnlistedHash string `json:"unlisted_hash"`
	// The URI of the showcase.
	Uri string `json:"uri"`
	// The custom Vimeo URL of the showcase.
	Url NullableString `json:"url"`
	// Whether the showcase uses a custom domain.
	UseCustomDomain bool `json:"use_custom_domain"`
	User            User `json:"user"`
	// Whether to use the showcase's brand color in the web layout.
	WebBrandColor bool `json:"web_brand_color"`
	// Whether to use the showcase's custom logo in the web layout.
	WebCustomLogo bool `json:"web_custom_logo"`
}

// NewAlbum instantiates a new Album object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlbum(allowContinuousPlay bool, allowDownloads bool, allowShare bool, autoplay bool, brandColor NullableString, createdTime string, customLogo NullableAlbumCustomLogo, description NullableString, domain NullableString, domainCertificateState string, duration float32, embed AlbumEmbed, embedBrandColor NullableBool, embedCustomLogo NullableBool, hasChosenThumbnail bool, hideFromVimeo bool, hideNav bool, hideUpcoming bool, hideVimeoLogo NullableBool, layout string, link string, loop bool, metadata AlbumMetadata, modifiedTime string, name string, pictures Picture, privacy AlbumPrivacy, resourceKey string, reviewMode bool, seoAllowIndexed bool, seoDescription NullableString, seoKeywords []string, seoTitle NullableString, shareLink string, sort string, theme string, unlistedHash string, uri string, url NullableString, useCustomDomain bool, user User, webBrandColor bool, webCustomLogo bool) *Album {
	this := Album{}
	this.AllowContinuousPlay = allowContinuousPlay
	this.AllowDownloads = allowDownloads
	this.AllowShare = allowShare
	this.Autoplay = autoplay
	this.BrandColor = brandColor
	this.CreatedTime = createdTime
	this.CustomLogo = customLogo
	this.Description = description
	this.Domain = domain
	this.DomainCertificateState = domainCertificateState
	this.Duration = duration
	this.Embed = embed
	this.EmbedBrandColor = embedBrandColor
	this.EmbedCustomLogo = embedCustomLogo
	this.HasChosenThumbnail = hasChosenThumbnail
	this.HideFromVimeo = hideFromVimeo
	this.HideNav = hideNav
	this.HideUpcoming = hideUpcoming
	this.HideVimeoLogo = hideVimeoLogo
	this.Layout = layout
	this.Link = link
	this.Loop = loop
	this.Metadata = metadata
	this.ModifiedTime = modifiedTime
	this.Name = name
	this.Pictures = pictures
	this.Privacy = privacy
	this.ResourceKey = resourceKey
	this.ReviewMode = reviewMode
	this.SeoAllowIndexed = seoAllowIndexed
	this.SeoDescription = seoDescription
	this.SeoKeywords = seoKeywords
	this.SeoTitle = seoTitle
	this.ShareLink = shareLink
	this.Sort = sort
	this.Theme = theme
	this.UnlistedHash = unlistedHash
	this.Uri = uri
	this.Url = url
	this.UseCustomDomain = useCustomDomain
	this.User = user
	this.WebBrandColor = webBrandColor
	this.WebCustomLogo = webCustomLogo
	return &this
}

// NewAlbumWithDefaults instantiates a new Album object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlbumWithDefaults() *Album {
	this := Album{}
	return &this
}

// GetAllowContinuousPlay returns the AllowContinuousPlay field value
func (o *Album) GetAllowContinuousPlay() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowContinuousPlay
}

// GetAllowContinuousPlayOk returns a tuple with the AllowContinuousPlay field value
// and a boolean to check if the value has been set.
func (o *Album) GetAllowContinuousPlayOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllowContinuousPlay, true
}

// SetAllowContinuousPlay sets field value
func (o *Album) SetAllowContinuousPlay(v bool) {
	o.AllowContinuousPlay = v
}

// GetAllowDownloads returns the AllowDownloads field value
func (o *Album) GetAllowDownloads() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowDownloads
}

// GetAllowDownloadsOk returns a tuple with the AllowDownloads field value
// and a boolean to check if the value has been set.
func (o *Album) GetAllowDownloadsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllowDownloads, true
}

// SetAllowDownloads sets field value
func (o *Album) SetAllowDownloads(v bool) {
	o.AllowDownloads = v
}

// GetAllowShare returns the AllowShare field value
func (o *Album) GetAllowShare() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowShare
}

// GetAllowShareOk returns a tuple with the AllowShare field value
// and a boolean to check if the value has been set.
func (o *Album) GetAllowShareOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllowShare, true
}

// SetAllowShare sets field value
func (o *Album) SetAllowShare(v bool) {
	o.AllowShare = v
}

// GetAutoplay returns the Autoplay field value
func (o *Album) GetAutoplay() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Autoplay
}

// GetAutoplayOk returns a tuple with the Autoplay field value
// and a boolean to check if the value has been set.
func (o *Album) GetAutoplayOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Autoplay, true
}

// SetAutoplay sets field value
func (o *Album) SetAutoplay(v bool) {
	o.Autoplay = v
}

// GetBrandColor returns the BrandColor field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Album) GetBrandColor() string {
	if o == nil || o.BrandColor.Get() == nil {
		var ret string
		return ret
	}

	return *o.BrandColor.Get()
}

// GetBrandColorOk returns a tuple with the BrandColor field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Album) GetBrandColorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BrandColor.Get(), o.BrandColor.IsSet()
}

// SetBrandColor sets field value
func (o *Album) SetBrandColor(v string) {
	o.BrandColor.Set(&v)
}

// GetCreatedTime returns the CreatedTime field value
func (o *Album) GetCreatedTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value
// and a boolean to check if the value has been set.
func (o *Album) GetCreatedTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTime, true
}

// SetCreatedTime sets field value
func (o *Album) SetCreatedTime(v string) {
	o.CreatedTime = v
}

// GetCustomLogo returns the CustomLogo field value
// If the value is explicit nil, the zero value for AlbumCustomLogo will be returned
func (o *Album) GetCustomLogo() AlbumCustomLogo {
	if o == nil || o.CustomLogo.Get() == nil {
		var ret AlbumCustomLogo
		return ret
	}

	return *o.CustomLogo.Get()
}

// GetCustomLogoOk returns a tuple with the CustomLogo field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Album) GetCustomLogoOk() (*AlbumCustomLogo, bool) {
	if o == nil {
		return nil, false
	}
	return o.CustomLogo.Get(), o.CustomLogo.IsSet()
}

// SetCustomLogo sets field value
func (o *Album) SetCustomLogo(v AlbumCustomLogo) {
	o.CustomLogo.Set(&v)
}

// GetDescription returns the Description field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Album) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}

	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Album) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// SetDescription sets field value
func (o *Album) SetDescription(v string) {
	o.Description.Set(&v)
}

// GetDomain returns the Domain field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Album) GetDomain() string {
	if o == nil || o.Domain.Get() == nil {
		var ret string
		return ret
	}

	return *o.Domain.Get()
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Album) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Domain.Get(), o.Domain.IsSet()
}

// SetDomain sets field value
func (o *Album) SetDomain(v string) {
	o.Domain.Set(&v)
}

// GetDomainCertificateState returns the DomainCertificateState field value
func (o *Album) GetDomainCertificateState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DomainCertificateState
}

// GetDomainCertificateStateOk returns a tuple with the DomainCertificateState field value
// and a boolean to check if the value has been set.
func (o *Album) GetDomainCertificateStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DomainCertificateState, true
}

// SetDomainCertificateState sets field value
func (o *Album) SetDomainCertificateState(v string) {
	o.DomainCertificateState = v
}

// GetDuration returns the Duration field value
func (o *Album) GetDuration() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Duration
}

// GetDurationOk returns a tuple with the Duration field value
// and a boolean to check if the value has been set.
func (o *Album) GetDurationOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Duration, true
}

// SetDuration sets field value
func (o *Album) SetDuration(v float32) {
	o.Duration = v
}

// GetEmbed returns the Embed field value
func (o *Album) GetEmbed() AlbumEmbed {
	if o == nil {
		var ret AlbumEmbed
		return ret
	}

	return o.Embed
}

// GetEmbedOk returns a tuple with the Embed field value
// and a boolean to check if the value has been set.
func (o *Album) GetEmbedOk() (*AlbumEmbed, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Embed, true
}

// SetEmbed sets field value
func (o *Album) SetEmbed(v AlbumEmbed) {
	o.Embed = v
}

// GetEmbedBrandColor returns the EmbedBrandColor field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *Album) GetEmbedBrandColor() bool {
	if o == nil || o.EmbedBrandColor.Get() == nil {
		var ret bool
		return ret
	}

	return *o.EmbedBrandColor.Get()
}

// GetEmbedBrandColorOk returns a tuple with the EmbedBrandColor field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Album) GetEmbedBrandColorOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmbedBrandColor.Get(), o.EmbedBrandColor.IsSet()
}

// SetEmbedBrandColor sets field value
func (o *Album) SetEmbedBrandColor(v bool) {
	o.EmbedBrandColor.Set(&v)
}

// GetEmbedCustomLogo returns the EmbedCustomLogo field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *Album) GetEmbedCustomLogo() bool {
	if o == nil || o.EmbedCustomLogo.Get() == nil {
		var ret bool
		return ret
	}

	return *o.EmbedCustomLogo.Get()
}

// GetEmbedCustomLogoOk returns a tuple with the EmbedCustomLogo field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Album) GetEmbedCustomLogoOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmbedCustomLogo.Get(), o.EmbedCustomLogo.IsSet()
}

// SetEmbedCustomLogo sets field value
func (o *Album) SetEmbedCustomLogo(v bool) {
	o.EmbedCustomLogo.Set(&v)
}

// GetHasChosenThumbnail returns the HasChosenThumbnail field value
func (o *Album) GetHasChosenThumbnail() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasChosenThumbnail
}

// GetHasChosenThumbnailOk returns a tuple with the HasChosenThumbnail field value
// and a boolean to check if the value has been set.
func (o *Album) GetHasChosenThumbnailOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasChosenThumbnail, true
}

// SetHasChosenThumbnail sets field value
func (o *Album) SetHasChosenThumbnail(v bool) {
	o.HasChosenThumbnail = v
}

// GetHideFromVimeo returns the HideFromVimeo field value
func (o *Album) GetHideFromVimeo() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HideFromVimeo
}

// GetHideFromVimeoOk returns a tuple with the HideFromVimeo field value
// and a boolean to check if the value has been set.
func (o *Album) GetHideFromVimeoOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HideFromVimeo, true
}

// SetHideFromVimeo sets field value
func (o *Album) SetHideFromVimeo(v bool) {
	o.HideFromVimeo = v
}

// GetHideNav returns the HideNav field value
func (o *Album) GetHideNav() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HideNav
}

// GetHideNavOk returns a tuple with the HideNav field value
// and a boolean to check if the value has been set.
func (o *Album) GetHideNavOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HideNav, true
}

// SetHideNav sets field value
func (o *Album) SetHideNav(v bool) {
	o.HideNav = v
}

// GetHideUpcoming returns the HideUpcoming field value
func (o *Album) GetHideUpcoming() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HideUpcoming
}

// GetHideUpcomingOk returns a tuple with the HideUpcoming field value
// and a boolean to check if the value has been set.
func (o *Album) GetHideUpcomingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HideUpcoming, true
}

// SetHideUpcoming sets field value
func (o *Album) SetHideUpcoming(v bool) {
	o.HideUpcoming = v
}

// GetHideVimeoLogo returns the HideVimeoLogo field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *Album) GetHideVimeoLogo() bool {
	if o == nil || o.HideVimeoLogo.Get() == nil {
		var ret bool
		return ret
	}

	return *o.HideVimeoLogo.Get()
}

// GetHideVimeoLogoOk returns a tuple with the HideVimeoLogo field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Album) GetHideVimeoLogoOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.HideVimeoLogo.Get(), o.HideVimeoLogo.IsSet()
}

// SetHideVimeoLogo sets field value
func (o *Album) SetHideVimeoLogo(v bool) {
	o.HideVimeoLogo.Set(&v)
}

// GetLayout returns the Layout field value
func (o *Album) GetLayout() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Layout
}

// GetLayoutOk returns a tuple with the Layout field value
// and a boolean to check if the value has been set.
func (o *Album) GetLayoutOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Layout, true
}

// SetLayout sets field value
func (o *Album) SetLayout(v string) {
	o.Layout = v
}

// GetLink returns the Link field value
func (o *Album) GetLink() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Link
}

// GetLinkOk returns a tuple with the Link field value
// and a boolean to check if the value has been set.
func (o *Album) GetLinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Link, true
}

// SetLink sets field value
func (o *Album) SetLink(v string) {
	o.Link = v
}

// GetLoop returns the Loop field value
func (o *Album) GetLoop() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Loop
}

// GetLoopOk returns a tuple with the Loop field value
// and a boolean to check if the value has been set.
func (o *Album) GetLoopOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Loop, true
}

// SetLoop sets field value
func (o *Album) SetLoop(v bool) {
	o.Loop = v
}

// GetMetadata returns the Metadata field value
func (o *Album) GetMetadata() AlbumMetadata {
	if o == nil {
		var ret AlbumMetadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *Album) GetMetadataOk() (*AlbumMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *Album) SetMetadata(v AlbumMetadata) {
	o.Metadata = v
}

// GetModifiedTime returns the ModifiedTime field value
func (o *Album) GetModifiedTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ModifiedTime
}

// GetModifiedTimeOk returns a tuple with the ModifiedTime field value
// and a boolean to check if the value has been set.
func (o *Album) GetModifiedTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedTime, true
}

// SetModifiedTime sets field value
func (o *Album) SetModifiedTime(v string) {
	o.ModifiedTime = v
}

// GetName returns the Name field value
func (o *Album) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Album) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Album) SetName(v string) {
	o.Name = v
}

// GetPictures returns the Pictures field value
func (o *Album) GetPictures() Picture {
	if o == nil {
		var ret Picture
		return ret
	}

	return o.Pictures
}

// GetPicturesOk returns a tuple with the Pictures field value
// and a boolean to check if the value has been set.
func (o *Album) GetPicturesOk() (*Picture, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pictures, true
}

// SetPictures sets field value
func (o *Album) SetPictures(v Picture) {
	o.Pictures = v
}

// GetPrivacy returns the Privacy field value
func (o *Album) GetPrivacy() AlbumPrivacy {
	if o == nil {
		var ret AlbumPrivacy
		return ret
	}

	return o.Privacy
}

// GetPrivacyOk returns a tuple with the Privacy field value
// and a boolean to check if the value has been set.
func (o *Album) GetPrivacyOk() (*AlbumPrivacy, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Privacy, true
}

// SetPrivacy sets field value
func (o *Album) SetPrivacy(v AlbumPrivacy) {
	o.Privacy = v
}

// GetResourceKey returns the ResourceKey field value
func (o *Album) GetResourceKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceKey
}

// GetResourceKeyOk returns a tuple with the ResourceKey field value
// and a boolean to check if the value has been set.
func (o *Album) GetResourceKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceKey, true
}

// SetResourceKey sets field value
func (o *Album) SetResourceKey(v string) {
	o.ResourceKey = v
}

// GetReviewMode returns the ReviewMode field value
func (o *Album) GetReviewMode() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ReviewMode
}

// GetReviewModeOk returns a tuple with the ReviewMode field value
// and a boolean to check if the value has been set.
func (o *Album) GetReviewModeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReviewMode, true
}

// SetReviewMode sets field value
func (o *Album) SetReviewMode(v bool) {
	o.ReviewMode = v
}

// GetSeoAllowIndexed returns the SeoAllowIndexed field value
func (o *Album) GetSeoAllowIndexed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SeoAllowIndexed
}

// GetSeoAllowIndexedOk returns a tuple with the SeoAllowIndexed field value
// and a boolean to check if the value has been set.
func (o *Album) GetSeoAllowIndexedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SeoAllowIndexed, true
}

// SetSeoAllowIndexed sets field value
func (o *Album) SetSeoAllowIndexed(v bool) {
	o.SeoAllowIndexed = v
}

// GetSeoDescription returns the SeoDescription field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Album) GetSeoDescription() string {
	if o == nil || o.SeoDescription.Get() == nil {
		var ret string
		return ret
	}

	return *o.SeoDescription.Get()
}

// GetSeoDescriptionOk returns a tuple with the SeoDescription field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Album) GetSeoDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SeoDescription.Get(), o.SeoDescription.IsSet()
}

// SetSeoDescription sets field value
func (o *Album) SetSeoDescription(v string) {
	o.SeoDescription.Set(&v)
}

// GetSeoKeywords returns the SeoKeywords field value
func (o *Album) GetSeoKeywords() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SeoKeywords
}

// GetSeoKeywordsOk returns a tuple with the SeoKeywords field value
// and a boolean to check if the value has been set.
func (o *Album) GetSeoKeywordsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SeoKeywords, true
}

// SetSeoKeywords sets field value
func (o *Album) SetSeoKeywords(v []string) {
	o.SeoKeywords = v
}

// GetSeoTitle returns the SeoTitle field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Album) GetSeoTitle() string {
	if o == nil || o.SeoTitle.Get() == nil {
		var ret string
		return ret
	}

	return *o.SeoTitle.Get()
}

// GetSeoTitleOk returns a tuple with the SeoTitle field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Album) GetSeoTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SeoTitle.Get(), o.SeoTitle.IsSet()
}

// SetSeoTitle sets field value
func (o *Album) SetSeoTitle(v string) {
	o.SeoTitle.Set(&v)
}

// GetShareLink returns the ShareLink field value
func (o *Album) GetShareLink() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ShareLink
}

// GetShareLinkOk returns a tuple with the ShareLink field value
// and a boolean to check if the value has been set.
func (o *Album) GetShareLinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShareLink, true
}

// SetShareLink sets field value
func (o *Album) SetShareLink(v string) {
	o.ShareLink = v
}

// GetSort returns the Sort field value
func (o *Album) GetSort() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sort
}

// GetSortOk returns a tuple with the Sort field value
// and a boolean to check if the value has been set.
func (o *Album) GetSortOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sort, true
}

// SetSort sets field value
func (o *Album) SetSort(v string) {
	o.Sort = v
}

// GetTheme returns the Theme field value
func (o *Album) GetTheme() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Theme
}

// GetThemeOk returns a tuple with the Theme field value
// and a boolean to check if the value has been set.
func (o *Album) GetThemeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Theme, true
}

// SetTheme sets field value
func (o *Album) SetTheme(v string) {
	o.Theme = v
}

// GetUnlistedHash returns the UnlistedHash field value
func (o *Album) GetUnlistedHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UnlistedHash
}

// GetUnlistedHashOk returns a tuple with the UnlistedHash field value
// and a boolean to check if the value has been set.
func (o *Album) GetUnlistedHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UnlistedHash, true
}

// SetUnlistedHash sets field value
func (o *Album) SetUnlistedHash(v string) {
	o.UnlistedHash = v
}

// GetUri returns the Uri field value
func (o *Album) GetUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uri
}

// GetUriOk returns a tuple with the Uri field value
// and a boolean to check if the value has been set.
func (o *Album) GetUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uri, true
}

// SetUri sets field value
func (o *Album) SetUri(v string) {
	o.Uri = v
}

// GetUrl returns the Url field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Album) GetUrl() string {
	if o == nil || o.Url.Get() == nil {
		var ret string
		return ret
	}

	return *o.Url.Get()
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Album) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Url.Get(), o.Url.IsSet()
}

// SetUrl sets field value
func (o *Album) SetUrl(v string) {
	o.Url.Set(&v)
}

// GetUseCustomDomain returns the UseCustomDomain field value
func (o *Album) GetUseCustomDomain() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.UseCustomDomain
}

// GetUseCustomDomainOk returns a tuple with the UseCustomDomain field value
// and a boolean to check if the value has been set.
func (o *Album) GetUseCustomDomainOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UseCustomDomain, true
}

// SetUseCustomDomain sets field value
func (o *Album) SetUseCustomDomain(v bool) {
	o.UseCustomDomain = v
}

// GetUser returns the User field value
func (o *Album) GetUser() User {
	if o == nil {
		var ret User
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *Album) GetUserOk() (*User, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *Album) SetUser(v User) {
	o.User = v
}

// GetWebBrandColor returns the WebBrandColor field value
func (o *Album) GetWebBrandColor() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.WebBrandColor
}

// GetWebBrandColorOk returns a tuple with the WebBrandColor field value
// and a boolean to check if the value has been set.
func (o *Album) GetWebBrandColorOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WebBrandColor, true
}

// SetWebBrandColor sets field value
func (o *Album) SetWebBrandColor(v bool) {
	o.WebBrandColor = v
}

// GetWebCustomLogo returns the WebCustomLogo field value
func (o *Album) GetWebCustomLogo() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.WebCustomLogo
}

// GetWebCustomLogoOk returns a tuple with the WebCustomLogo field value
// and a boolean to check if the value has been set.
func (o *Album) GetWebCustomLogoOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WebCustomLogo, true
}

// SetWebCustomLogo sets field value
func (o *Album) SetWebCustomLogo(v bool) {
	o.WebCustomLogo = v
}

func (o Album) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Album) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["allow_continuous_play"] = o.AllowContinuousPlay
	toSerialize["allow_downloads"] = o.AllowDownloads
	toSerialize["allow_share"] = o.AllowShare
	toSerialize["autoplay"] = o.Autoplay
	toSerialize["brand_color"] = o.BrandColor.Get()
	toSerialize["created_time"] = o.CreatedTime
	toSerialize["custom_logo"] = o.CustomLogo.Get()
	toSerialize["description"] = o.Description.Get()
	toSerialize["domain"] = o.Domain.Get()
	toSerialize["domain_certificate_state"] = o.DomainCertificateState
	toSerialize["duration"] = o.Duration
	toSerialize["embed"] = o.Embed
	toSerialize["embed_brand_color"] = o.EmbedBrandColor.Get()
	toSerialize["embed_custom_logo"] = o.EmbedCustomLogo.Get()
	toSerialize["has_chosen_thumbnail"] = o.HasChosenThumbnail
	toSerialize["hide_from_vimeo"] = o.HideFromVimeo
	toSerialize["hide_nav"] = o.HideNav
	toSerialize["hide_upcoming"] = o.HideUpcoming
	toSerialize["hide_vimeo_logo"] = o.HideVimeoLogo.Get()
	toSerialize["layout"] = o.Layout
	toSerialize["link"] = o.Link
	toSerialize["loop"] = o.Loop
	toSerialize["metadata"] = o.Metadata
	toSerialize["modified_time"] = o.ModifiedTime
	toSerialize["name"] = o.Name
	toSerialize["pictures"] = o.Pictures
	toSerialize["privacy"] = o.Privacy
	toSerialize["resource_key"] = o.ResourceKey
	toSerialize["review_mode"] = o.ReviewMode
	toSerialize["seo_allow_indexed"] = o.SeoAllowIndexed
	toSerialize["seo_description"] = o.SeoDescription.Get()
	toSerialize["seo_keywords"] = o.SeoKeywords
	toSerialize["seo_title"] = o.SeoTitle.Get()
	toSerialize["share_link"] = o.ShareLink
	toSerialize["sort"] = o.Sort
	toSerialize["theme"] = o.Theme
	toSerialize["unlisted_hash"] = o.UnlistedHash
	toSerialize["uri"] = o.Uri
	toSerialize["url"] = o.Url.Get()
	toSerialize["use_custom_domain"] = o.UseCustomDomain
	toSerialize["user"] = o.User
	toSerialize["web_brand_color"] = o.WebBrandColor
	toSerialize["web_custom_logo"] = o.WebCustomLogo
	return toSerialize, nil
}

type NullableAlbum struct {
	value *Album
	isSet bool
}

func (v NullableAlbum) Get() *Album {
	return v.value
}

func (v *NullableAlbum) Set(val *Album) {
	v.value = val
	v.isSet = true
}

func (v NullableAlbum) IsSet() bool {
	return v.isSet
}

func (v *NullableAlbum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlbum(val *Album) *NullableAlbum {
	return &NullableAlbum{value: val, isSet: true}
}

func (v NullableAlbum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlbum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
