/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type EmbedPresetsTimelineEventsAPI interface {

	/*
	CreateVideoCustomLogo Add a timeline event thumbnail to a video

	This method adds a timeline event thumbnail to the specified video. The authenticated user must be the owner of the video.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param videoId The ID of the video.
	@return ApiCreateVideoCustomLogoRequest
	*/
	CreateVideoCustomLogo(ctx context.Context, videoId int32) ApiCreateVideoCustomLogoRequest

	// CreateVideoCustomLogoExecute executes the request
	//  @return Picture
	CreateVideoCustomLogoExecute(r ApiCreateVideoCustomLogoRequest) (*Picture, *http.Response, error)

	/*
	GetVideoCustomLogo Get a timeline event thumbnail

	This method returns a single timeline event thumbnail that belongs to the specified video.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param thumbnailId The ID of the timeline event thumbnail.
	@param videoId The ID of the video.
	@return ApiGetVideoCustomLogoRequest
	*/
	GetVideoCustomLogo(ctx context.Context, thumbnailId float32, videoId int32) ApiGetVideoCustomLogoRequest

	// GetVideoCustomLogoExecute executes the request
	//  @return Picture
	GetVideoCustomLogoExecute(r ApiGetVideoCustomLogoRequest) (*Picture, *http.Response, error)
}

// EmbedPresetsTimelineEventsAPIService EmbedPresetsTimelineEventsAPI service
type EmbedPresetsTimelineEventsAPIService service

type ApiCreateVideoCustomLogoRequest struct {
	ctx context.Context
	ApiService EmbedPresetsTimelineEventsAPI
	videoId int32
}

func (r ApiCreateVideoCustomLogoRequest) Execute() (*Picture, *http.Response, error) {
	return r.ApiService.CreateVideoCustomLogoExecute(r)
}

/*
CreateVideoCustomLogo Add a timeline event thumbnail to a video

This method adds a timeline event thumbnail to the specified video. The authenticated user must be the owner of the video.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param videoId The ID of the video.
 @return ApiCreateVideoCustomLogoRequest
*/
func (a *EmbedPresetsTimelineEventsAPIService) CreateVideoCustomLogo(ctx context.Context, videoId int32) ApiCreateVideoCustomLogoRequest {
	return ApiCreateVideoCustomLogoRequest{
		ApiService: a,
		ctx: ctx,
		videoId: videoId,
	}
}

// Execute executes the request
//  @return Picture
func (a *EmbedPresetsTimelineEventsAPIService) CreateVideoCustomLogoExecute(r ApiCreateVideoCustomLogoRequest) (*Picture, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Picture
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmbedPresetsTimelineEventsAPIService.CreateVideoCustomLogo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos/{video_id}/timelinethumbnails"
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.picture+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetVideoCustomLogoRequest struct {
	ctx context.Context
	ApiService EmbedPresetsTimelineEventsAPI
	thumbnailId float32
	videoId int32
}

func (r ApiGetVideoCustomLogoRequest) Execute() (*Picture, *http.Response, error) {
	return r.ApiService.GetVideoCustomLogoExecute(r)
}

/*
GetVideoCustomLogo Get a timeline event thumbnail

This method returns a single timeline event thumbnail that belongs to the specified video.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param thumbnailId The ID of the timeline event thumbnail.
 @param videoId The ID of the video.
 @return ApiGetVideoCustomLogoRequest
*/
func (a *EmbedPresetsTimelineEventsAPIService) GetVideoCustomLogo(ctx context.Context, thumbnailId float32, videoId int32) ApiGetVideoCustomLogoRequest {
	return ApiGetVideoCustomLogoRequest{
		ApiService: a,
		ctx: ctx,
		thumbnailId: thumbnailId,
		videoId: videoId,
	}
}

// Execute executes the request
//  @return Picture
func (a *EmbedPresetsTimelineEventsAPIService) GetVideoCustomLogoExecute(r ApiGetVideoCustomLogoRequest) (*Picture, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Picture
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmbedPresetsTimelineEventsAPIService.GetVideoCustomLogo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos/{video_id}/timelinethumbnails/{thumbnail_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"thumbnail_id"+"}", url.PathEscape(parameterValueToString(r.thumbnailId, "thumbnailId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.picture+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
