/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type ShowcasesShowcaseVideosAPI interface {

	/*
	AddVideoToShowcase Add a specific video to a showcase

	This method adds a single video to the specified showcase. The authenticated user must be the owner of the showcase.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param albumId The ID of the showcase.
	@param userId The ID of the user.
	@param videoId The ID of the video.
	@return ApiAddVideoToShowcaseRequest
	*/
	AddVideoToShowcase(ctx context.Context, albumId float32, userId int32, videoId int32) ApiAddVideoToShowcaseRequest

	// AddVideoToShowcaseExecute executes the request
	AddVideoToShowcaseExecute(r ApiAddVideoToShowcaseRequest) (*http.Response, error)

	/*
	AddVideoToShowcaseAlt2 Add a specific video to a showcase

	This method adds a single video to the specified showcase. The authenticated user must be the owner of the showcase.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param albumId The ID of the showcase.
	@param videoId The ID of the video.
	@return ApiAddVideoToShowcaseAlt2Request
	*/
	AddVideoToShowcaseAlt2(ctx context.Context, albumId float32, videoId int32) ApiAddVideoToShowcaseAlt2Request

	// AddVideoToShowcaseAlt2Execute executes the request
	AddVideoToShowcaseAlt2Execute(r ApiAddVideoToShowcaseAlt2Request) (*http.Response, error)

	/*
	GetAvailableShowcaseVideos Get all the user's videos that can be added to or removed from a showcase

	This endpoint returns every video belonging to the authenticated user that can be added to or removed from the specified showcase. The user must be the owner of the showcase.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param albumId The ID of the showcase.
	@return ApiGetAvailableShowcaseVideosRequest
	*/
	GetAvailableShowcaseVideos(ctx context.Context, albumId float32) ApiGetAvailableShowcaseVideosRequest

	// GetAvailableShowcaseVideosExecute executes the request
	//  @return []Video
	GetAvailableShowcaseVideosExecute(r ApiGetAvailableShowcaseVideosRequest) ([]Video, *http.Response, error)

	/*
	GetAvailableVideoShowcases Get all the showcases to which the user can add or remove a specific video

	This endpoint returns every showcase to which the authenticated user can add or remove the specified video. The user must be the owner of the showcase.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param videoId The ID of the video.
	@return ApiGetAvailableVideoShowcasesRequest
	*/
	GetAvailableVideoShowcases(ctx context.Context, videoId int32) ApiGetAvailableVideoShowcasesRequest

	// GetAvailableVideoShowcasesExecute executes the request
	//  @return []Album
	GetAvailableVideoShowcasesExecute(r ApiGetAvailableVideoShowcasesRequest) ([]Album, *http.Response, error)

	/*
	GetShowcaseVideo Get a specific video in a showcase

	This method returns a single video belonging to the specified showcase. The authenticated user must be the owner of the showcase.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param albumId The ID of the showcase.
	@param userId The ID of the user.
	@param videoId The ID of the video.
	@return ApiGetShowcaseVideoRequest
	*/
	GetShowcaseVideo(ctx context.Context, albumId float32, userId int32, videoId int32) ApiGetShowcaseVideoRequest

	// GetShowcaseVideoExecute executes the request
	//  @return Video
	GetShowcaseVideoExecute(r ApiGetShowcaseVideoRequest) (*Video, *http.Response, error)

	/*
	GetShowcaseVideoAlt2 Get a specific video in a showcase

	This method returns a single video belonging to the specified showcase. The authenticated user must be the owner of the showcase.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param albumId The ID of the showcase.
	@param videoId The ID of the video.
	@return ApiGetShowcaseVideoAlt2Request
	*/
	GetShowcaseVideoAlt2(ctx context.Context, albumId float32, videoId int32) ApiGetShowcaseVideoAlt2Request

	// GetShowcaseVideoAlt2Execute executes the request
	//  @return Video
	GetShowcaseVideoAlt2Execute(r ApiGetShowcaseVideoAlt2Request) (*Video, *http.Response, error)

	/*
	GetShowcaseVideos Get all the videos in a showcase

	This method returns every video in the specified showcase. The authenticated user must be the owner of the showcase.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param albumId The ID of the showcase.
	@param userId The ID of the user.
	@return ApiGetShowcaseVideosRequest
	*/
	GetShowcaseVideos(ctx context.Context, albumId float32, userId int32) ApiGetShowcaseVideosRequest

	// GetShowcaseVideosExecute executes the request
	//  @return []Video
	GetShowcaseVideosExecute(r ApiGetShowcaseVideosRequest) ([]Video, *http.Response, error)

	/*
	GetShowcaseVideosAlt2 Get all the videos in a showcase

	This method returns every video in the specified showcase. The authenticated user must be the owner of the showcase.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param albumId The ID of the showcase.
	@return ApiGetShowcaseVideosAlt2Request
	*/
	GetShowcaseVideosAlt2(ctx context.Context, albumId float32) ApiGetShowcaseVideosAlt2Request

	// GetShowcaseVideosAlt2Execute executes the request
	//  @return []Video
	GetShowcaseVideosAlt2Execute(r ApiGetShowcaseVideosAlt2Request) ([]Video, *http.Response, error)

	/*
	RemoveVideoFromShowcase Remove a video from a showcase

	This method removes the specified video from its showcase. The authenticated user must be the owner of the showcase.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param albumId The ID of the showcase.
	@param userId The ID of the user.
	@param videoId The ID of the video.
	@return ApiRemoveVideoFromShowcaseRequest
	*/
	RemoveVideoFromShowcase(ctx context.Context, albumId float32, userId int32, videoId int32) ApiRemoveVideoFromShowcaseRequest

	// RemoveVideoFromShowcaseExecute executes the request
	RemoveVideoFromShowcaseExecute(r ApiRemoveVideoFromShowcaseRequest) (*http.Response, error)

	/*
	RemoveVideoFromShowcaseAlt2 Remove a video from a showcase

	This method removes the specified video from its showcase. The authenticated user must be the owner of the showcase.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param albumId The ID of the showcase.
	@param videoId The ID of the video.
	@return ApiRemoveVideoFromShowcaseAlt2Request
	*/
	RemoveVideoFromShowcaseAlt2(ctx context.Context, albumId float32, videoId int32) ApiRemoveVideoFromShowcaseAlt2Request

	// RemoveVideoFromShowcaseAlt2Execute executes the request
	RemoveVideoFromShowcaseAlt2Execute(r ApiRemoveVideoFromShowcaseAlt2Request) (*http.Response, error)

	/*
	ReplaceVideosInShowcase Replace all the videos in a showcase

	This method replaces all the videos in the specified showcase with a new set of one or more videos. The authenticated user must be the owner of the showcase.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param albumId The ID of the showcase.
	@param userId The ID of the user.
	@return ApiReplaceVideosInShowcaseRequest
	*/
	ReplaceVideosInShowcase(ctx context.Context, albumId float32, userId int32) ApiReplaceVideosInShowcaseRequest

	// ReplaceVideosInShowcaseExecute executes the request
	ReplaceVideosInShowcaseExecute(r ApiReplaceVideosInShowcaseRequest) (*http.Response, error)

	/*
	ReplaceVideosInShowcaseAlt2 Replace all the videos in a showcase

	This method replaces all the videos in the specified showcase with a new set of one or more videos. The authenticated user must be the owner of the showcase.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param albumId The ID of the showcase.
	@return ApiReplaceVideosInShowcaseAlt2Request
	*/
	ReplaceVideosInShowcaseAlt2(ctx context.Context, albumId float32) ApiReplaceVideosInShowcaseAlt2Request

	// ReplaceVideosInShowcaseAlt2Execute executes the request
	ReplaceVideosInShowcaseAlt2Execute(r ApiReplaceVideosInShowcaseAlt2Request) (*http.Response, error)

	/*
	SetVideoAsShowcaseFeatured Set the featured video of a showcase

	This method sets the featured video of the specified showcase. The authenticated user must be the owner of the showcase, and the featured video must belong to it.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param albumId The ID of the showcase.
	@param userId The ID of the user.
	@param videoId The ID of the video.
	@return ApiSetVideoAsShowcaseFeaturedRequest
	*/
	SetVideoAsShowcaseFeatured(ctx context.Context, albumId float32, userId int32, videoId int32) ApiSetVideoAsShowcaseFeaturedRequest

	// SetVideoAsShowcaseFeaturedExecute executes the request
	//  @return Album
	SetVideoAsShowcaseFeaturedExecute(r ApiSetVideoAsShowcaseFeaturedRequest) (*Album, *http.Response, error)

	/*
	SetVideoAsShowcaseFeaturedAlt2 Set the featured video of a showcase

	This method sets the featured video of the specified showcase. The authenticated user must be the owner of the showcase, and the featured video must belong to it.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param albumId The ID of the showcase.
	@param videoId The ID of the video.
	@return ApiSetVideoAsShowcaseFeaturedAlt2Request
	*/
	SetVideoAsShowcaseFeaturedAlt2(ctx context.Context, albumId float32, videoId int32) ApiSetVideoAsShowcaseFeaturedAlt2Request

	// SetVideoAsShowcaseFeaturedAlt2Execute executes the request
	//  @return Album
	SetVideoAsShowcaseFeaturedAlt2Execute(r ApiSetVideoAsShowcaseFeaturedAlt2Request) (*Album, *http.Response, error)

	/*
	SetVideoAsShowcaseThumbnail Create a thumbnail for a showcase from a showcase video

	This method creates a thumbnail image for a showcase from the specified frame of a showcase video. The authenticated user must be the owner of the showcase.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param albumId The ID of the showcase.
	@param userId The ID of the user.
	@param videoId The ID of the video.
	@return ApiSetVideoAsShowcaseThumbnailRequest
	*/
	SetVideoAsShowcaseThumbnail(ctx context.Context, albumId float32, userId int32, videoId int32) ApiSetVideoAsShowcaseThumbnailRequest

	// SetVideoAsShowcaseThumbnailExecute executes the request
	//  @return Album
	SetVideoAsShowcaseThumbnailExecute(r ApiSetVideoAsShowcaseThumbnailRequest) (*Album, *http.Response, error)

	/*
	SetVideoAsShowcaseThumbnailAlt2 Create a thumbnail for a showcase from a showcase video

	This method creates a thumbnail image for a showcase from the specified frame of a showcase video. The authenticated user must be the owner of the showcase.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param albumId The ID of the showcase.
	@param videoId The ID of the video.
	@return ApiSetVideoAsShowcaseThumbnailAlt2Request
	*/
	SetVideoAsShowcaseThumbnailAlt2(ctx context.Context, albumId float32, videoId int32) ApiSetVideoAsShowcaseThumbnailAlt2Request

	// SetVideoAsShowcaseThumbnailAlt2Execute executes the request
	//  @return Album
	SetVideoAsShowcaseThumbnailAlt2Execute(r ApiSetVideoAsShowcaseThumbnailAlt2Request) (*Album, *http.Response, error)
}

// ShowcasesShowcaseVideosAPIService ShowcasesShowcaseVideosAPI service
type ShowcasesShowcaseVideosAPIService service

type ApiAddVideoToShowcaseRequest struct {
	ctx context.Context
	ApiService ShowcasesShowcaseVideosAPI
	albumId float32
	userId int32
	videoId int32
}

func (r ApiAddVideoToShowcaseRequest) Execute() (*http.Response, error) {
	return r.ApiService.AddVideoToShowcaseExecute(r)
}

/*
AddVideoToShowcase Add a specific video to a showcase

This method adds a single video to the specified showcase. The authenticated user must be the owner of the showcase.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param albumId The ID of the showcase.
 @param userId The ID of the user.
 @param videoId The ID of the video.
 @return ApiAddVideoToShowcaseRequest
*/
func (a *ShowcasesShowcaseVideosAPIService) AddVideoToShowcase(ctx context.Context, albumId float32, userId int32, videoId int32) ApiAddVideoToShowcaseRequest {
	return ApiAddVideoToShowcaseRequest{
		ApiService: a,
		ctx: ctx,
		albumId: albumId,
		userId: userId,
		videoId: videoId,
	}
}

// Execute executes the request
func (a *ShowcasesShowcaseVideosAPIService) AddVideoToShowcaseExecute(r ApiAddVideoToShowcaseRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShowcasesShowcaseVideosAPIService.AddVideoToShowcase")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/albums/{album_id}/videos/{video_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"album_id"+"}", url.PathEscape(parameterValueToString(r.albumId, "albumId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAddVideoToShowcaseAlt2Request struct {
	ctx context.Context
	ApiService ShowcasesShowcaseVideosAPI
	albumId float32
	videoId int32
}

func (r ApiAddVideoToShowcaseAlt2Request) Execute() (*http.Response, error) {
	return r.ApiService.AddVideoToShowcaseAlt2Execute(r)
}

/*
AddVideoToShowcaseAlt2 Add a specific video to a showcase

This method adds a single video to the specified showcase. The authenticated user must be the owner of the showcase.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param albumId The ID of the showcase.
 @param videoId The ID of the video.
 @return ApiAddVideoToShowcaseAlt2Request
*/
func (a *ShowcasesShowcaseVideosAPIService) AddVideoToShowcaseAlt2(ctx context.Context, albumId float32, videoId int32) ApiAddVideoToShowcaseAlt2Request {
	return ApiAddVideoToShowcaseAlt2Request{
		ApiService: a,
		ctx: ctx,
		albumId: albumId,
		videoId: videoId,
	}
}

// Execute executes the request
func (a *ShowcasesShowcaseVideosAPIService) AddVideoToShowcaseAlt2Execute(r ApiAddVideoToShowcaseAlt2Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShowcasesShowcaseVideosAPIService.AddVideoToShowcaseAlt2")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/albums/{album_id}/videos/{video_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"album_id"+"}", url.PathEscape(parameterValueToString(r.albumId, "albumId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAvailableShowcaseVideosRequest struct {
	ctx context.Context
	ApiService ShowcasesShowcaseVideosAPI
	albumId float32
	direction *string
	page *float32
	perPage *float32
	sort *string
}

// The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
func (r ApiGetAvailableShowcaseVideosRequest) Direction(direction string) ApiGetAvailableShowcaseVideosRequest {
	r.direction = &direction
	return r
}

// The page number of the results to show.
func (r ApiGetAvailableShowcaseVideosRequest) Page(page float32) ApiGetAvailableShowcaseVideosRequest {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiGetAvailableShowcaseVideosRequest) PerPage(perPage float32) ApiGetAvailableShowcaseVideosRequest {
	r.perPage = &perPage
	return r
}

// The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Sort the results by the default method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by most recent user interaction.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays. 
func (r ApiGetAvailableShowcaseVideosRequest) Sort(sort string) ApiGetAvailableShowcaseVideosRequest {
	r.sort = &sort
	return r
}

func (r ApiGetAvailableShowcaseVideosRequest) Execute() ([]Video, *http.Response, error) {
	return r.ApiService.GetAvailableShowcaseVideosExecute(r)
}

/*
GetAvailableShowcaseVideos Get all the user's videos that can be added to or removed from a showcase

This endpoint returns every video belonging to the authenticated user that can be added to or removed from the specified showcase. The user must be the owner of the showcase.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param albumId The ID of the showcase.
 @return ApiGetAvailableShowcaseVideosRequest
*/
func (a *ShowcasesShowcaseVideosAPIService) GetAvailableShowcaseVideos(ctx context.Context, albumId float32) ApiGetAvailableShowcaseVideosRequest {
	return ApiGetAvailableShowcaseVideosRequest{
		ApiService: a,
		ctx: ctx,
		albumId: albumId,
	}
}

// Execute executes the request
//  @return []Video
func (a *ShowcasesShowcaseVideosAPIService) GetAvailableShowcaseVideosExecute(r ApiGetAvailableShowcaseVideosRequest) ([]Video, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Video
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShowcasesShowcaseVideosAPIService.GetAvailableShowcaseVideos")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/albums/{album_id}/available_videos"
	localVarPath = strings.Replace(localVarPath, "{"+"album_id"+"}", url.PathEscape(parameterValueToString(r.albumId, "albumId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.video+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAvailableVideoShowcasesRequest struct {
	ctx context.Context
	ApiService ShowcasesShowcaseVideosAPI
	videoId int32
	page *float32
	perPage *float32
}

// The page number of the results to show.
func (r ApiGetAvailableVideoShowcasesRequest) Page(page float32) ApiGetAvailableVideoShowcasesRequest {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiGetAvailableVideoShowcasesRequest) PerPage(perPage float32) ApiGetAvailableVideoShowcasesRequest {
	r.perPage = &perPage
	return r
}

func (r ApiGetAvailableVideoShowcasesRequest) Execute() ([]Album, *http.Response, error) {
	return r.ApiService.GetAvailableVideoShowcasesExecute(r)
}

/*
GetAvailableVideoShowcases Get all the showcases to which the user can add or remove a specific video

This endpoint returns every showcase to which the authenticated user can add or remove the specified video. The user must be the owner of the showcase.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param videoId The ID of the video.
 @return ApiGetAvailableVideoShowcasesRequest
*/
func (a *ShowcasesShowcaseVideosAPIService) GetAvailableVideoShowcases(ctx context.Context, videoId int32) ApiGetAvailableVideoShowcasesRequest {
	return ApiGetAvailableVideoShowcasesRequest{
		ApiService: a,
		ctx: ctx,
		videoId: videoId,
	}
}

// Execute executes the request
//  @return []Album
func (a *ShowcasesShowcaseVideosAPIService) GetAvailableVideoShowcasesExecute(r ApiGetAvailableVideoShowcasesRequest) ([]Album, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Album
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShowcasesShowcaseVideosAPIService.GetAvailableVideoShowcases")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos/{video_id}/available_albums"
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.album+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetShowcaseVideoRequest struct {
	ctx context.Context
	ApiService ShowcasesShowcaseVideosAPI
	albumId float32
	userId int32
	videoId int32
	password *string
}

// The password of the showcase.
func (r ApiGetShowcaseVideoRequest) Password(password string) ApiGetShowcaseVideoRequest {
	r.password = &password
	return r
}

func (r ApiGetShowcaseVideoRequest) Execute() (*Video, *http.Response, error) {
	return r.ApiService.GetShowcaseVideoExecute(r)
}

/*
GetShowcaseVideo Get a specific video in a showcase

This method returns a single video belonging to the specified showcase. The authenticated user must be the owner of the showcase.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param albumId The ID of the showcase.
 @param userId The ID of the user.
 @param videoId The ID of the video.
 @return ApiGetShowcaseVideoRequest
*/
func (a *ShowcasesShowcaseVideosAPIService) GetShowcaseVideo(ctx context.Context, albumId float32, userId int32, videoId int32) ApiGetShowcaseVideoRequest {
	return ApiGetShowcaseVideoRequest{
		ApiService: a,
		ctx: ctx,
		albumId: albumId,
		userId: userId,
		videoId: videoId,
	}
}

// Execute executes the request
//  @return Video
func (a *ShowcasesShowcaseVideosAPIService) GetShowcaseVideoExecute(r ApiGetShowcaseVideoRequest) (*Video, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Video
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShowcasesShowcaseVideosAPIService.GetShowcaseVideo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/albums/{album_id}/videos/{video_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"album_id"+"}", url.PathEscape(parameterValueToString(r.albumId, "albumId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.password != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "password", r.password, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.video+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetShowcaseVideoAlt2Request struct {
	ctx context.Context
	ApiService ShowcasesShowcaseVideosAPI
	albumId float32
	videoId int32
	password *string
}

// The password of the showcase.
func (r ApiGetShowcaseVideoAlt2Request) Password(password string) ApiGetShowcaseVideoAlt2Request {
	r.password = &password
	return r
}

func (r ApiGetShowcaseVideoAlt2Request) Execute() (*Video, *http.Response, error) {
	return r.ApiService.GetShowcaseVideoAlt2Execute(r)
}

/*
GetShowcaseVideoAlt2 Get a specific video in a showcase

This method returns a single video belonging to the specified showcase. The authenticated user must be the owner of the showcase.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param albumId The ID of the showcase.
 @param videoId The ID of the video.
 @return ApiGetShowcaseVideoAlt2Request
*/
func (a *ShowcasesShowcaseVideosAPIService) GetShowcaseVideoAlt2(ctx context.Context, albumId float32, videoId int32) ApiGetShowcaseVideoAlt2Request {
	return ApiGetShowcaseVideoAlt2Request{
		ApiService: a,
		ctx: ctx,
		albumId: albumId,
		videoId: videoId,
	}
}

// Execute executes the request
//  @return Video
func (a *ShowcasesShowcaseVideosAPIService) GetShowcaseVideoAlt2Execute(r ApiGetShowcaseVideoAlt2Request) (*Video, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Video
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShowcasesShowcaseVideosAPIService.GetShowcaseVideoAlt2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/albums/{album_id}/videos/{video_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"album_id"+"}", url.PathEscape(parameterValueToString(r.albumId, "albumId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.password != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "password", r.password, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.video+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetShowcaseVideosRequest struct {
	ctx context.Context
	ApiService ShowcasesShowcaseVideosAPI
	albumId float32
	userId int32
	containingUri *string
	direction *string
	filter *string
	filterEmbeddable *bool
	page *float32
	password *string
	perPage *float32
	query *string
	sort *string
	weakSearch *bool
}

// The page containing the video URI.
func (r ApiGetShowcaseVideosRequest) ContainingUri(containingUri string) ApiGetShowcaseVideosRequest {
	r.containingUri = &containingUri
	return r
}

// The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
func (r ApiGetShowcaseVideosRequest) Direction(direction string) ApiGetShowcaseVideosRequest {
	r.direction = &direction
	return r
}

// The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Filter the results by the **embeddable** attribute. 
func (r ApiGetShowcaseVideosRequest) Filter(filter string) ApiGetShowcaseVideosRequest {
	r.filter = &filter
	return r
}

// Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;.
func (r ApiGetShowcaseVideosRequest) FilterEmbeddable(filterEmbeddable bool) ApiGetShowcaseVideosRequest {
	r.filterEmbeddable = &filterEmbeddable
	return r
}

// The page number of the results to show.
func (r ApiGetShowcaseVideosRequest) Page(page float32) ApiGetShowcaseVideosRequest {
	r.page = &page
	return r
}

// The password of the showcase.
func (r ApiGetShowcaseVideosRequest) Password(password string) ApiGetShowcaseVideosRequest {
	r.password = &password
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiGetShowcaseVideosRequest) PerPage(perPage float32) ApiGetShowcaseVideosRequest {
	r.perPage = &perPage
	return r
}

// The search query to use to filter the results.
func (r ApiGetShowcaseVideosRequest) Query(query string) ApiGetShowcaseVideosRequest {
	r.query = &query
	return r
}

// The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Sort the results by the default method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;manual&#x60; - Sort the results by their manual order.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays. 
func (r ApiGetShowcaseVideosRequest) Sort(sort string) ApiGetShowcaseVideosRequest {
	r.sort = &sort
	return r
}

// Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video&#39;s name.
func (r ApiGetShowcaseVideosRequest) WeakSearch(weakSearch bool) ApiGetShowcaseVideosRequest {
	r.weakSearch = &weakSearch
	return r
}

func (r ApiGetShowcaseVideosRequest) Execute() ([]Video, *http.Response, error) {
	return r.ApiService.GetShowcaseVideosExecute(r)
}

/*
GetShowcaseVideos Get all the videos in a showcase

This method returns every video in the specified showcase. The authenticated user must be the owner of the showcase.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param albumId The ID of the showcase.
 @param userId The ID of the user.
 @return ApiGetShowcaseVideosRequest
*/
func (a *ShowcasesShowcaseVideosAPIService) GetShowcaseVideos(ctx context.Context, albumId float32, userId int32) ApiGetShowcaseVideosRequest {
	return ApiGetShowcaseVideosRequest{
		ApiService: a,
		ctx: ctx,
		albumId: albumId,
		userId: userId,
	}
}

// Execute executes the request
//  @return []Video
func (a *ShowcasesShowcaseVideosAPIService) GetShowcaseVideosExecute(r ApiGetShowcaseVideosRequest) ([]Video, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Video
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShowcasesShowcaseVideosAPIService.GetShowcaseVideos")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/albums/{album_id}/videos"
	localVarPath = strings.Replace(localVarPath, "{"+"album_id"+"}", url.PathEscape(parameterValueToString(r.albumId, "albumId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.containingUri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "containing_uri", r.containingUri, "")
	}
	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.filterEmbeddable != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter_embeddable", r.filterEmbeddable, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.password != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "password", r.password, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	if r.query != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "query", r.query, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	if r.weakSearch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "weak_search", r.weakSearch, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.video+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetShowcaseVideosAlt2Request struct {
	ctx context.Context
	ApiService ShowcasesShowcaseVideosAPI
	albumId float32
	containingUri *string
	direction *string
	filter *string
	filterEmbeddable *bool
	page *float32
	password *string
	perPage *float32
	query *string
	sort *string
	weakSearch *bool
}

// The page containing the video URI.
func (r ApiGetShowcaseVideosAlt2Request) ContainingUri(containingUri string) ApiGetShowcaseVideosAlt2Request {
	r.containingUri = &containingUri
	return r
}

// The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
func (r ApiGetShowcaseVideosAlt2Request) Direction(direction string) ApiGetShowcaseVideosAlt2Request {
	r.direction = &direction
	return r
}

// The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Filter the results by the **embeddable** attribute. 
func (r ApiGetShowcaseVideosAlt2Request) Filter(filter string) ApiGetShowcaseVideosAlt2Request {
	r.filter = &filter
	return r
}

// Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;.
func (r ApiGetShowcaseVideosAlt2Request) FilterEmbeddable(filterEmbeddable bool) ApiGetShowcaseVideosAlt2Request {
	r.filterEmbeddable = &filterEmbeddable
	return r
}

// The page number of the results to show.
func (r ApiGetShowcaseVideosAlt2Request) Page(page float32) ApiGetShowcaseVideosAlt2Request {
	r.page = &page
	return r
}

// The password of the showcase.
func (r ApiGetShowcaseVideosAlt2Request) Password(password string) ApiGetShowcaseVideosAlt2Request {
	r.password = &password
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiGetShowcaseVideosAlt2Request) PerPage(perPage float32) ApiGetShowcaseVideosAlt2Request {
	r.perPage = &perPage
	return r
}

// The search query to use to filter the results.
func (r ApiGetShowcaseVideosAlt2Request) Query(query string) ApiGetShowcaseVideosAlt2Request {
	r.query = &query
	return r
}

// The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Sort the results by the default method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;manual&#x60; - Sort the results by their manual order.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays. 
func (r ApiGetShowcaseVideosAlt2Request) Sort(sort string) ApiGetShowcaseVideosAlt2Request {
	r.sort = &sort
	return r
}

// Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video&#39;s name.
func (r ApiGetShowcaseVideosAlt2Request) WeakSearch(weakSearch bool) ApiGetShowcaseVideosAlt2Request {
	r.weakSearch = &weakSearch
	return r
}

func (r ApiGetShowcaseVideosAlt2Request) Execute() ([]Video, *http.Response, error) {
	return r.ApiService.GetShowcaseVideosAlt2Execute(r)
}

/*
GetShowcaseVideosAlt2 Get all the videos in a showcase

This method returns every video in the specified showcase. The authenticated user must be the owner of the showcase.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param albumId The ID of the showcase.
 @return ApiGetShowcaseVideosAlt2Request
*/
func (a *ShowcasesShowcaseVideosAPIService) GetShowcaseVideosAlt2(ctx context.Context, albumId float32) ApiGetShowcaseVideosAlt2Request {
	return ApiGetShowcaseVideosAlt2Request{
		ApiService: a,
		ctx: ctx,
		albumId: albumId,
	}
}

// Execute executes the request
//  @return []Video
func (a *ShowcasesShowcaseVideosAPIService) GetShowcaseVideosAlt2Execute(r ApiGetShowcaseVideosAlt2Request) ([]Video, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Video
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShowcasesShowcaseVideosAPIService.GetShowcaseVideosAlt2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/albums/{album_id}/videos"
	localVarPath = strings.Replace(localVarPath, "{"+"album_id"+"}", url.PathEscape(parameterValueToString(r.albumId, "albumId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.containingUri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "containing_uri", r.containingUri, "")
	}
	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.filterEmbeddable != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter_embeddable", r.filterEmbeddable, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.password != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "password", r.password, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	if r.query != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "query", r.query, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	if r.weakSearch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "weak_search", r.weakSearch, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.video+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRemoveVideoFromShowcaseRequest struct {
	ctx context.Context
	ApiService ShowcasesShowcaseVideosAPI
	albumId float32
	userId int32
	videoId int32
}

func (r ApiRemoveVideoFromShowcaseRequest) Execute() (*http.Response, error) {
	return r.ApiService.RemoveVideoFromShowcaseExecute(r)
}

/*
RemoveVideoFromShowcase Remove a video from a showcase

This method removes the specified video from its showcase. The authenticated user must be the owner of the showcase.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param albumId The ID of the showcase.
 @param userId The ID of the user.
 @param videoId The ID of the video.
 @return ApiRemoveVideoFromShowcaseRequest
*/
func (a *ShowcasesShowcaseVideosAPIService) RemoveVideoFromShowcase(ctx context.Context, albumId float32, userId int32, videoId int32) ApiRemoveVideoFromShowcaseRequest {
	return ApiRemoveVideoFromShowcaseRequest{
		ApiService: a,
		ctx: ctx,
		albumId: albumId,
		userId: userId,
		videoId: videoId,
	}
}

// Execute executes the request
func (a *ShowcasesShowcaseVideosAPIService) RemoveVideoFromShowcaseExecute(r ApiRemoveVideoFromShowcaseRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShowcasesShowcaseVideosAPIService.RemoveVideoFromShowcase")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/albums/{album_id}/videos/{video_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"album_id"+"}", url.PathEscape(parameterValueToString(r.albumId, "albumId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiRemoveVideoFromShowcaseAlt2Request struct {
	ctx context.Context
	ApiService ShowcasesShowcaseVideosAPI
	albumId float32
	videoId int32
}

func (r ApiRemoveVideoFromShowcaseAlt2Request) Execute() (*http.Response, error) {
	return r.ApiService.RemoveVideoFromShowcaseAlt2Execute(r)
}

/*
RemoveVideoFromShowcaseAlt2 Remove a video from a showcase

This method removes the specified video from its showcase. The authenticated user must be the owner of the showcase.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param albumId The ID of the showcase.
 @param videoId The ID of the video.
 @return ApiRemoveVideoFromShowcaseAlt2Request
*/
func (a *ShowcasesShowcaseVideosAPIService) RemoveVideoFromShowcaseAlt2(ctx context.Context, albumId float32, videoId int32) ApiRemoveVideoFromShowcaseAlt2Request {
	return ApiRemoveVideoFromShowcaseAlt2Request{
		ApiService: a,
		ctx: ctx,
		albumId: albumId,
		videoId: videoId,
	}
}

// Execute executes the request
func (a *ShowcasesShowcaseVideosAPIService) RemoveVideoFromShowcaseAlt2Execute(r ApiRemoveVideoFromShowcaseAlt2Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShowcasesShowcaseVideosAPIService.RemoveVideoFromShowcaseAlt2")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/albums/{album_id}/videos/{video_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"album_id"+"}", url.PathEscape(parameterValueToString(r.albumId, "albumId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiReplaceVideosInShowcaseRequest struct {
	ctx context.Context
	ApiService ShowcasesShowcaseVideosAPI
	albumId float32
	userId int32
	replaceVideosInShowcaseAlt2Request *ReplaceVideosInShowcaseAlt2Request
}

func (r ApiReplaceVideosInShowcaseRequest) ReplaceVideosInShowcaseAlt2Request(replaceVideosInShowcaseAlt2Request ReplaceVideosInShowcaseAlt2Request) ApiReplaceVideosInShowcaseRequest {
	r.replaceVideosInShowcaseAlt2Request = &replaceVideosInShowcaseAlt2Request
	return r
}

func (r ApiReplaceVideosInShowcaseRequest) Execute() (*http.Response, error) {
	return r.ApiService.ReplaceVideosInShowcaseExecute(r)
}

/*
ReplaceVideosInShowcase Replace all the videos in a showcase

This method replaces all the videos in the specified showcase with a new set of one or more videos. The authenticated user must be the owner of the showcase.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param albumId The ID of the showcase.
 @param userId The ID of the user.
 @return ApiReplaceVideosInShowcaseRequest
*/
func (a *ShowcasesShowcaseVideosAPIService) ReplaceVideosInShowcase(ctx context.Context, albumId float32, userId int32) ApiReplaceVideosInShowcaseRequest {
	return ApiReplaceVideosInShowcaseRequest{
		ApiService: a,
		ctx: ctx,
		albumId: albumId,
		userId: userId,
	}
}

// Execute executes the request
func (a *ShowcasesShowcaseVideosAPIService) ReplaceVideosInShowcaseExecute(r ApiReplaceVideosInShowcaseRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShowcasesShowcaseVideosAPIService.ReplaceVideosInShowcase")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/albums/{album_id}/videos"
	localVarPath = strings.Replace(localVarPath, "{"+"album_id"+"}", url.PathEscape(parameterValueToString(r.albumId, "albumId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.replaceVideosInShowcaseAlt2Request == nil {
		return nil, reportError("replaceVideosInShowcaseAlt2Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.replaceVideosInShowcaseAlt2Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiReplaceVideosInShowcaseAlt2Request struct {
	ctx context.Context
	ApiService ShowcasesShowcaseVideosAPI
	albumId float32
	replaceVideosInShowcaseAlt2Request *ReplaceVideosInShowcaseAlt2Request
}

func (r ApiReplaceVideosInShowcaseAlt2Request) ReplaceVideosInShowcaseAlt2Request(replaceVideosInShowcaseAlt2Request ReplaceVideosInShowcaseAlt2Request) ApiReplaceVideosInShowcaseAlt2Request {
	r.replaceVideosInShowcaseAlt2Request = &replaceVideosInShowcaseAlt2Request
	return r
}

func (r ApiReplaceVideosInShowcaseAlt2Request) Execute() (*http.Response, error) {
	return r.ApiService.ReplaceVideosInShowcaseAlt2Execute(r)
}

/*
ReplaceVideosInShowcaseAlt2 Replace all the videos in a showcase

This method replaces all the videos in the specified showcase with a new set of one or more videos. The authenticated user must be the owner of the showcase.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param albumId The ID of the showcase.
 @return ApiReplaceVideosInShowcaseAlt2Request
*/
func (a *ShowcasesShowcaseVideosAPIService) ReplaceVideosInShowcaseAlt2(ctx context.Context, albumId float32) ApiReplaceVideosInShowcaseAlt2Request {
	return ApiReplaceVideosInShowcaseAlt2Request{
		ApiService: a,
		ctx: ctx,
		albumId: albumId,
	}
}

// Execute executes the request
func (a *ShowcasesShowcaseVideosAPIService) ReplaceVideosInShowcaseAlt2Execute(r ApiReplaceVideosInShowcaseAlt2Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShowcasesShowcaseVideosAPIService.ReplaceVideosInShowcaseAlt2")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/albums/{album_id}/videos"
	localVarPath = strings.Replace(localVarPath, "{"+"album_id"+"}", url.PathEscape(parameterValueToString(r.albumId, "albumId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.replaceVideosInShowcaseAlt2Request == nil {
		return nil, reportError("replaceVideosInShowcaseAlt2Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.replaceVideosInShowcaseAlt2Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSetVideoAsShowcaseFeaturedRequest struct {
	ctx context.Context
	ApiService ShowcasesShowcaseVideosAPI
	albumId float32
	userId int32
	videoId int32
}

func (r ApiSetVideoAsShowcaseFeaturedRequest) Execute() (*Album, *http.Response, error) {
	return r.ApiService.SetVideoAsShowcaseFeaturedExecute(r)
}

/*
SetVideoAsShowcaseFeatured Set the featured video of a showcase

This method sets the featured video of the specified showcase. The authenticated user must be the owner of the showcase, and the featured video must belong to it.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param albumId The ID of the showcase.
 @param userId The ID of the user.
 @param videoId The ID of the video.
 @return ApiSetVideoAsShowcaseFeaturedRequest
*/
func (a *ShowcasesShowcaseVideosAPIService) SetVideoAsShowcaseFeatured(ctx context.Context, albumId float32, userId int32, videoId int32) ApiSetVideoAsShowcaseFeaturedRequest {
	return ApiSetVideoAsShowcaseFeaturedRequest{
		ApiService: a,
		ctx: ctx,
		albumId: albumId,
		userId: userId,
		videoId: videoId,
	}
}

// Execute executes the request
//  @return Album
func (a *ShowcasesShowcaseVideosAPIService) SetVideoAsShowcaseFeaturedExecute(r ApiSetVideoAsShowcaseFeaturedRequest) (*Album, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Album
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShowcasesShowcaseVideosAPIService.SetVideoAsShowcaseFeatured")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/albums/{album_id}/videos/{video_id}/set_featured_video"
	localVarPath = strings.Replace(localVarPath, "{"+"album_id"+"}", url.PathEscape(parameterValueToString(r.albumId, "albumId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSetVideoAsShowcaseFeaturedAlt2Request struct {
	ctx context.Context
	ApiService ShowcasesShowcaseVideosAPI
	albumId float32
	videoId int32
}

func (r ApiSetVideoAsShowcaseFeaturedAlt2Request) Execute() (*Album, *http.Response, error) {
	return r.ApiService.SetVideoAsShowcaseFeaturedAlt2Execute(r)
}

/*
SetVideoAsShowcaseFeaturedAlt2 Set the featured video of a showcase

This method sets the featured video of the specified showcase. The authenticated user must be the owner of the showcase, and the featured video must belong to it.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param albumId The ID of the showcase.
 @param videoId The ID of the video.
 @return ApiSetVideoAsShowcaseFeaturedAlt2Request
*/
func (a *ShowcasesShowcaseVideosAPIService) SetVideoAsShowcaseFeaturedAlt2(ctx context.Context, albumId float32, videoId int32) ApiSetVideoAsShowcaseFeaturedAlt2Request {
	return ApiSetVideoAsShowcaseFeaturedAlt2Request{
		ApiService: a,
		ctx: ctx,
		albumId: albumId,
		videoId: videoId,
	}
}

// Execute executes the request
//  @return Album
func (a *ShowcasesShowcaseVideosAPIService) SetVideoAsShowcaseFeaturedAlt2Execute(r ApiSetVideoAsShowcaseFeaturedAlt2Request) (*Album, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Album
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShowcasesShowcaseVideosAPIService.SetVideoAsShowcaseFeaturedAlt2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/albums/{album_id}/videos/{video_id}/set_featured_video"
	localVarPath = strings.Replace(localVarPath, "{"+"album_id"+"}", url.PathEscape(parameterValueToString(r.albumId, "albumId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSetVideoAsShowcaseThumbnailRequest struct {
	ctx context.Context
	ApiService ShowcasesShowcaseVideosAPI
	albumId float32
	userId int32
	videoId int32
	setVideoAsShowcaseThumbnailAlt2Request *SetVideoAsShowcaseThumbnailAlt2Request
}

func (r ApiSetVideoAsShowcaseThumbnailRequest) SetVideoAsShowcaseThumbnailAlt2Request(setVideoAsShowcaseThumbnailAlt2Request SetVideoAsShowcaseThumbnailAlt2Request) ApiSetVideoAsShowcaseThumbnailRequest {
	r.setVideoAsShowcaseThumbnailAlt2Request = &setVideoAsShowcaseThumbnailAlt2Request
	return r
}

func (r ApiSetVideoAsShowcaseThumbnailRequest) Execute() (*Album, *http.Response, error) {
	return r.ApiService.SetVideoAsShowcaseThumbnailExecute(r)
}

/*
SetVideoAsShowcaseThumbnail Create a thumbnail for a showcase from a showcase video

This method creates a thumbnail image for a showcase from the specified frame of a showcase video. The authenticated user must be the owner of the showcase.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param albumId The ID of the showcase.
 @param userId The ID of the user.
 @param videoId The ID of the video.
 @return ApiSetVideoAsShowcaseThumbnailRequest
*/
func (a *ShowcasesShowcaseVideosAPIService) SetVideoAsShowcaseThumbnail(ctx context.Context, albumId float32, userId int32, videoId int32) ApiSetVideoAsShowcaseThumbnailRequest {
	return ApiSetVideoAsShowcaseThumbnailRequest{
		ApiService: a,
		ctx: ctx,
		albumId: albumId,
		userId: userId,
		videoId: videoId,
	}
}

// Execute executes the request
//  @return Album
func (a *ShowcasesShowcaseVideosAPIService) SetVideoAsShowcaseThumbnailExecute(r ApiSetVideoAsShowcaseThumbnailRequest) (*Album, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Album
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShowcasesShowcaseVideosAPIService.SetVideoAsShowcaseThumbnail")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/albums/{album_id}/videos/{video_id}/set_album_thumbnail"
	localVarPath = strings.Replace(localVarPath, "{"+"album_id"+"}", url.PathEscape(parameterValueToString(r.albumId, "albumId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.setVideoAsShowcaseThumbnailAlt2Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSetVideoAsShowcaseThumbnailAlt2Request struct {
	ctx context.Context
	ApiService ShowcasesShowcaseVideosAPI
	albumId float32
	videoId int32
	setVideoAsShowcaseThumbnailAlt2Request *SetVideoAsShowcaseThumbnailAlt2Request
}

func (r ApiSetVideoAsShowcaseThumbnailAlt2Request) SetVideoAsShowcaseThumbnailAlt2Request(setVideoAsShowcaseThumbnailAlt2Request SetVideoAsShowcaseThumbnailAlt2Request) ApiSetVideoAsShowcaseThumbnailAlt2Request {
	r.setVideoAsShowcaseThumbnailAlt2Request = &setVideoAsShowcaseThumbnailAlt2Request
	return r
}

func (r ApiSetVideoAsShowcaseThumbnailAlt2Request) Execute() (*Album, *http.Response, error) {
	return r.ApiService.SetVideoAsShowcaseThumbnailAlt2Execute(r)
}

/*
SetVideoAsShowcaseThumbnailAlt2 Create a thumbnail for a showcase from a showcase video

This method creates a thumbnail image for a showcase from the specified frame of a showcase video. The authenticated user must be the owner of the showcase.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param albumId The ID of the showcase.
 @param videoId The ID of the video.
 @return ApiSetVideoAsShowcaseThumbnailAlt2Request
*/
func (a *ShowcasesShowcaseVideosAPIService) SetVideoAsShowcaseThumbnailAlt2(ctx context.Context, albumId float32, videoId int32) ApiSetVideoAsShowcaseThumbnailAlt2Request {
	return ApiSetVideoAsShowcaseThumbnailAlt2Request{
		ApiService: a,
		ctx: ctx,
		albumId: albumId,
		videoId: videoId,
	}
}

// Execute executes the request
//  @return Album
func (a *ShowcasesShowcaseVideosAPIService) SetVideoAsShowcaseThumbnailAlt2Execute(r ApiSetVideoAsShowcaseThumbnailAlt2Request) (*Album, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Album
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShowcasesShowcaseVideosAPIService.SetVideoAsShowcaseThumbnailAlt2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/albums/{album_id}/videos/{video_id}/set_album_thumbnail"
	localVarPath = strings.Replace(localVarPath, "{"+"album_id"+"}", url.PathEscape(parameterValueToString(r.albumId, "albumId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.setVideoAsShowcaseThumbnailAlt2Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
