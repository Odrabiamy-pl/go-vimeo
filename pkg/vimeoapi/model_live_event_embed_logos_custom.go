/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the LiveEventEmbedLogosCustom type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LiveEventEmbedLogosCustom{}

// LiveEventEmbedLogosCustom A collection of information relating to custom logos in the embeddable player.
type LiveEventEmbedLogosCustom struct {
	// Whether the custom logo appears in the embeddable player.
	Active bool `json:"active"`
	// The URL that loads upon clicking the custom logo.
	Link string `json:"link"`
	// Whether the custom logo appears even when the player interface is hidden.
	Sticky bool `json:"sticky"`
	// The URL source of the custom player logo.
	Url string `json:"url"`
	// Whether the custom logo should use the URL link.
	UseLink bool `json:"use_link"`
}

// NewLiveEventEmbedLogosCustom instantiates a new LiveEventEmbedLogosCustom object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLiveEventEmbedLogosCustom(active bool, link string, sticky bool, url string, useLink bool) *LiveEventEmbedLogosCustom {
	this := LiveEventEmbedLogosCustom{}
	this.Active = active
	this.Link = link
	this.Sticky = sticky
	this.Url = url
	this.UseLink = useLink
	return &this
}

// NewLiveEventEmbedLogosCustomWithDefaults instantiates a new LiveEventEmbedLogosCustom object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLiveEventEmbedLogosCustomWithDefaults() *LiveEventEmbedLogosCustom {
	this := LiveEventEmbedLogosCustom{}
	return &this
}

// GetActive returns the Active field value
func (o *LiveEventEmbedLogosCustom) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *LiveEventEmbedLogosCustom) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *LiveEventEmbedLogosCustom) SetActive(v bool) {
	o.Active = v
}

// GetLink returns the Link field value
func (o *LiveEventEmbedLogosCustom) GetLink() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Link
}

// GetLinkOk returns a tuple with the Link field value
// and a boolean to check if the value has been set.
func (o *LiveEventEmbedLogosCustom) GetLinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Link, true
}

// SetLink sets field value
func (o *LiveEventEmbedLogosCustom) SetLink(v string) {
	o.Link = v
}

// GetSticky returns the Sticky field value
func (o *LiveEventEmbedLogosCustom) GetSticky() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Sticky
}

// GetStickyOk returns a tuple with the Sticky field value
// and a boolean to check if the value has been set.
func (o *LiveEventEmbedLogosCustom) GetStickyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sticky, true
}

// SetSticky sets field value
func (o *LiveEventEmbedLogosCustom) SetSticky(v bool) {
	o.Sticky = v
}

// GetUrl returns the Url field value
func (o *LiveEventEmbedLogosCustom) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *LiveEventEmbedLogosCustom) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *LiveEventEmbedLogosCustom) SetUrl(v string) {
	o.Url = v
}

// GetUseLink returns the UseLink field value
func (o *LiveEventEmbedLogosCustom) GetUseLink() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.UseLink
}

// GetUseLinkOk returns a tuple with the UseLink field value
// and a boolean to check if the value has been set.
func (o *LiveEventEmbedLogosCustom) GetUseLinkOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UseLink, true
}

// SetUseLink sets field value
func (o *LiveEventEmbedLogosCustom) SetUseLink(v bool) {
	o.UseLink = v
}

func (o LiveEventEmbedLogosCustom) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LiveEventEmbedLogosCustom) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["active"] = o.Active
	toSerialize["link"] = o.Link
	toSerialize["sticky"] = o.Sticky
	toSerialize["url"] = o.Url
	toSerialize["use_link"] = o.UseLink
	return toSerialize, nil
}

type NullableLiveEventEmbedLogosCustom struct {
	value *LiveEventEmbedLogosCustom
	isSet bool
}

func (v NullableLiveEventEmbedLogosCustom) Get() *LiveEventEmbedLogosCustom {
	return v.value
}

func (v *NullableLiveEventEmbedLogosCustom) Set(val *LiveEventEmbedLogosCustom) {
	v.value = val
	v.isSet = true
}

func (v NullableLiveEventEmbedLogosCustom) IsSet() bool {
	return v.isSet
}

func (v *NullableLiveEventEmbedLogosCustom) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLiveEventEmbedLogosCustom(val *LiveEventEmbedLogosCustom) *NullableLiveEventEmbedLogosCustom {
	return &NullableLiveEventEmbedLogosCustom{value: val, isSet: true}
}

func (v NullableLiveEventEmbedLogosCustom) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLiveEventEmbedLogosCustom) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


