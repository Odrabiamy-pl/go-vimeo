/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type VideosChaptersAPI interface {

	/*
	CreateChapter Add a chapter to a video

	This method adds a chapter to the specified video.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param videoId The ID of the video.
	@return ApiCreateChapterRequest
	*/
	CreateChapter(ctx context.Context, videoId int32) ApiCreateChapterRequest

	// CreateChapterExecute executes the request
	//  @return Chapter
	CreateChapterExecute(r ApiCreateChapterRequest) (*Chapter, *http.Response, error)

	/*
	CreateChapterThumbnailOrUploadLink Generate an upload link or timecode-based thumbnail for a saved video chapter

	This method generates either an upload link or a timecode-based thumbnail for the specified saved video chapter. To generate the upload link, which enables the authenticated user to upload a chapter thumbnail image manually, leave the body of the request empty. To generate an automatic timecode-based thumbnail, include the **timecode** parameter in the body of the request.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param chapterId The ID of the chapter.
	@param videoId The ID of the video.
	@return ApiCreateChapterThumbnailOrUploadLinkRequest
	*/
	CreateChapterThumbnailOrUploadLink(ctx context.Context, chapterId float32, videoId int32) ApiCreateChapterThumbnailOrUploadLinkRequest

	// CreateChapterThumbnailOrUploadLinkExecute executes the request
	//  @return Picture
	CreateChapterThumbnailOrUploadLinkExecute(r ApiCreateChapterThumbnailOrUploadLinkRequest) (*Picture, *http.Response, error)

	/*
	CreateUnsavedChapterThumbnailOrUploadLink Generate an upload link or timecode-based thumbnail for an unsaved video chapter

	This method generates either an upload link or a timecode-based thumbnail for an unsaved video chapter. To generate the upload link, which enables the authenticated user to upload a chapter thumbnail image manually, leave the body of the request empty. To generate an automatic timecode-based thumbnail, specify the **timecode** parameter in the body of the request.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param videoId The ID of the video.
	@return ApiCreateUnsavedChapterThumbnailOrUploadLinkRequest
	*/
	CreateUnsavedChapterThumbnailOrUploadLink(ctx context.Context, videoId int32) ApiCreateUnsavedChapterThumbnailOrUploadLinkRequest

	// CreateUnsavedChapterThumbnailOrUploadLinkExecute executes the request
	//  @return Picture
	CreateUnsavedChapterThumbnailOrUploadLinkExecute(r ApiCreateUnsavedChapterThumbnailOrUploadLinkRequest) (*Picture, *http.Response, error)

	/*
	DeleteChapter Delete a chapter

	This method deletes the specified chapter from a video. The authenticated user must be the owner of the video.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param chapterId The ID of the chapter.
	@param videoId The ID of the video.
	@return ApiDeleteChapterRequest
	*/
	DeleteChapter(ctx context.Context, chapterId float32, videoId int32) ApiDeleteChapterRequest

	// DeleteChapterExecute executes the request
	DeleteChapterExecute(r ApiDeleteChapterRequest) (*http.Response, error)

	/*
	DeleteChapterThumbnail Delete a chapter thumbnail

	This method deletes the specified chapter thumbnail from a video.

The authenticated user must be the owner of the video that the chapter belongs to.
This method deletes both timecode-generated and custom-uploaded thumbnails.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param videoId The ID of the video.
	@param chapterId The ID of the chapter.
	@param uid The unique ID of the thumbnail.
	@return ApiDeleteChapterThumbnailRequest
	*/
	DeleteChapterThumbnail(ctx context.Context, videoId int32, chapterId float32, uid string) ApiDeleteChapterThumbnailRequest

	// DeleteChapterThumbnailExecute executes the request
	DeleteChapterThumbnailExecute(r ApiDeleteChapterThumbnailRequest) (*http.Response, error)

	/*
	EditChapter Edit a chapter

	This method edits the specified chapter of a video. The authenticated user must be the owner of the video.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param chapterId The ID of the chapter.
	@param videoId The ID of the video.
	@return ApiEditChapterRequest
	*/
	EditChapter(ctx context.Context, chapterId float32, videoId int32) ApiEditChapterRequest

	// EditChapterExecute executes the request
	//  @return Chapter
	EditChapterExecute(r ApiEditChapterRequest) (*Chapter, *http.Response, error)

	/*
	GetChapter Get a specific chapter

	This method returns a single chapter of the specified video.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param chapterId The ID of the chapter.
	@param videoId The ID of the video.
	@return ApiGetChapterRequest
	*/
	GetChapter(ctx context.Context, chapterId float32, videoId int32) ApiGetChapterRequest

	// GetChapterExecute executes the request
	//  @return Chapter
	GetChapterExecute(r ApiGetChapterRequest) (*Chapter, *http.Response, error)

	/*
	GetChapterThumbnail Get a single chapter thumbnail associated with a saved video chapter

	This method returns the specified thumbnail associated with a saved video chapter.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param chapterId The ID of the chapter.
	@param videoId The ID of the video.
	@param uid The unique ID of the thumbnail.
	@return ApiGetChapterThumbnailRequest
	*/
	GetChapterThumbnail(ctx context.Context, chapterId float32, videoId int32, uid string) ApiGetChapterThumbnailRequest

	// GetChapterThumbnailExecute executes the request
	//  @return Picture
	GetChapterThumbnailExecute(r ApiGetChapterThumbnailRequest) (*Picture, *http.Response, error)

	/*
	GetChapterThumbnails Get all the thumbnails associated with a saved video chapter

	This method returns every thumbnail associated with the specified saved video chapter.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param chapterId The ID of the chapter.
	@param videoId The ID of the video.
	@return ApiGetChapterThumbnailsRequest
	*/
	GetChapterThumbnails(ctx context.Context, chapterId float32, videoId int32) ApiGetChapterThumbnailsRequest

	// GetChapterThumbnailsExecute executes the request
	//  @return Picture
	GetChapterThumbnailsExecute(r ApiGetChapterThumbnailsRequest) (*Picture, *http.Response, error)

	/*
	GetChapters Get all the chapters of a video

	This method returns every chapter of the specified video.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param videoId The ID of the video.
	@return ApiGetChaptersRequest
	*/
	GetChapters(ctx context.Context, videoId int32) ApiGetChaptersRequest

	// GetChaptersExecute executes the request
	//  @return []Chapter
	GetChaptersExecute(r ApiGetChaptersRequest) ([]Chapter, *http.Response, error)

	/*
	GetUnsavedChapterThumbnail Get a single chapter thumbnail associated with an unsaved video chapter

	This method returns the specified thumbnail associated with an unsaved video chapter.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param videoId The ID of the video.
	@param uid The unique ID of the thumbnail.
	@return ApiGetUnsavedChapterThumbnailRequest
	*/
	GetUnsavedChapterThumbnail(ctx context.Context, videoId int32, uid string) ApiGetUnsavedChapterThumbnailRequest

	// GetUnsavedChapterThumbnailExecute executes the request
	//  @return Picture
	GetUnsavedChapterThumbnailExecute(r ApiGetUnsavedChapterThumbnailRequest) (*Picture, *http.Response, error)

	/*
	SetChapterThumbnailActive Set a chapter thumbnail as active

	This method sets the specified chapter thumbnail for a video as active.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param chapterId The ID of the chapter.
	@param videoId The ID of the video.
	@param uid The unique ID of the thumbnail.
	@return ApiSetChapterThumbnailActiveRequest
	*/
	SetChapterThumbnailActive(ctx context.Context, chapterId float32, videoId int32, uid string) ApiSetChapterThumbnailActiveRequest

	// SetChapterThumbnailActiveExecute executes the request
	//  @return Picture
	SetChapterThumbnailActiveExecute(r ApiSetChapterThumbnailActiveRequest) (*Picture, *http.Response, error)
}

// VideosChaptersAPIService VideosChaptersAPI service
type VideosChaptersAPIService service

type ApiCreateChapterRequest struct {
	ctx context.Context
	ApiService VideosChaptersAPI
	videoId int32
	createChapterRequest *CreateChapterRequest
}

func (r ApiCreateChapterRequest) CreateChapterRequest(createChapterRequest CreateChapterRequest) ApiCreateChapterRequest {
	r.createChapterRequest = &createChapterRequest
	return r
}

func (r ApiCreateChapterRequest) Execute() (*Chapter, *http.Response, error) {
	return r.ApiService.CreateChapterExecute(r)
}

/*
CreateChapter Add a chapter to a video

This method adds a chapter to the specified video.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param videoId The ID of the video.
 @return ApiCreateChapterRequest
*/
func (a *VideosChaptersAPIService) CreateChapter(ctx context.Context, videoId int32) ApiCreateChapterRequest {
	return ApiCreateChapterRequest{
		ApiService: a,
		ctx: ctx,
		videoId: videoId,
	}
}

// Execute executes the request
//  @return Chapter
func (a *VideosChaptersAPIService) CreateChapterExecute(r ApiCreateChapterRequest) (*Chapter, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Chapter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosChaptersAPIService.CreateChapter")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos/{video_id}/chapters"
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.vimeo.video.chapter+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.video.chapter+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createChapterRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateChapterThumbnailOrUploadLinkRequest struct {
	ctx context.Context
	ApiService VideosChaptersAPI
	chapterId float32
	videoId int32
	createUnsavedChapterThumbnailOrUploadLinkRequest *CreateUnsavedChapterThumbnailOrUploadLinkRequest
}

func (r ApiCreateChapterThumbnailOrUploadLinkRequest) CreateUnsavedChapterThumbnailOrUploadLinkRequest(createUnsavedChapterThumbnailOrUploadLinkRequest CreateUnsavedChapterThumbnailOrUploadLinkRequest) ApiCreateChapterThumbnailOrUploadLinkRequest {
	r.createUnsavedChapterThumbnailOrUploadLinkRequest = &createUnsavedChapterThumbnailOrUploadLinkRequest
	return r
}

func (r ApiCreateChapterThumbnailOrUploadLinkRequest) Execute() (*Picture, *http.Response, error) {
	return r.ApiService.CreateChapterThumbnailOrUploadLinkExecute(r)
}

/*
CreateChapterThumbnailOrUploadLink Generate an upload link or timecode-based thumbnail for a saved video chapter

This method generates either an upload link or a timecode-based thumbnail for the specified saved video chapter. To generate the upload link, which enables the authenticated user to upload a chapter thumbnail image manually, leave the body of the request empty. To generate an automatic timecode-based thumbnail, include the **timecode** parameter in the body of the request.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chapterId The ID of the chapter.
 @param videoId The ID of the video.
 @return ApiCreateChapterThumbnailOrUploadLinkRequest
*/
func (a *VideosChaptersAPIService) CreateChapterThumbnailOrUploadLink(ctx context.Context, chapterId float32, videoId int32) ApiCreateChapterThumbnailOrUploadLinkRequest {
	return ApiCreateChapterThumbnailOrUploadLinkRequest{
		ApiService: a,
		ctx: ctx,
		chapterId: chapterId,
		videoId: videoId,
	}
}

// Execute executes the request
//  @return Picture
func (a *VideosChaptersAPIService) CreateChapterThumbnailOrUploadLinkExecute(r ApiCreateChapterThumbnailOrUploadLinkRequest) (*Picture, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Picture
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosChaptersAPIService.CreateChapterThumbnailOrUploadLink")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos/{video_id}/chapters/{chapter_id}/pictures"
	localVarPath = strings.Replace(localVarPath, "{"+"chapter_id"+"}", url.PathEscape(parameterValueToString(r.chapterId, "chapterId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createUnsavedChapterThumbnailOrUploadLinkRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateUnsavedChapterThumbnailOrUploadLinkRequest struct {
	ctx context.Context
	ApiService VideosChaptersAPI
	videoId int32
	createUnsavedChapterThumbnailOrUploadLinkRequest *CreateUnsavedChapterThumbnailOrUploadLinkRequest
}

func (r ApiCreateUnsavedChapterThumbnailOrUploadLinkRequest) CreateUnsavedChapterThumbnailOrUploadLinkRequest(createUnsavedChapterThumbnailOrUploadLinkRequest CreateUnsavedChapterThumbnailOrUploadLinkRequest) ApiCreateUnsavedChapterThumbnailOrUploadLinkRequest {
	r.createUnsavedChapterThumbnailOrUploadLinkRequest = &createUnsavedChapterThumbnailOrUploadLinkRequest
	return r
}

func (r ApiCreateUnsavedChapterThumbnailOrUploadLinkRequest) Execute() (*Picture, *http.Response, error) {
	return r.ApiService.CreateUnsavedChapterThumbnailOrUploadLinkExecute(r)
}

/*
CreateUnsavedChapterThumbnailOrUploadLink Generate an upload link or timecode-based thumbnail for an unsaved video chapter

This method generates either an upload link or a timecode-based thumbnail for an unsaved video chapter. To generate the upload link, which enables the authenticated user to upload a chapter thumbnail image manually, leave the body of the request empty. To generate an automatic timecode-based thumbnail, specify the **timecode** parameter in the body of the request.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param videoId The ID of the video.
 @return ApiCreateUnsavedChapterThumbnailOrUploadLinkRequest
*/
func (a *VideosChaptersAPIService) CreateUnsavedChapterThumbnailOrUploadLink(ctx context.Context, videoId int32) ApiCreateUnsavedChapterThumbnailOrUploadLinkRequest {
	return ApiCreateUnsavedChapterThumbnailOrUploadLinkRequest{
		ApiService: a,
		ctx: ctx,
		videoId: videoId,
	}
}

// Execute executes the request
//  @return Picture
func (a *VideosChaptersAPIService) CreateUnsavedChapterThumbnailOrUploadLinkExecute(r ApiCreateUnsavedChapterThumbnailOrUploadLinkRequest) (*Picture, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Picture
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosChaptersAPIService.CreateUnsavedChapterThumbnailOrUploadLink")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos/{video_id}/chapters/temporary/pictures"
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createUnsavedChapterThumbnailOrUploadLinkRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteChapterRequest struct {
	ctx context.Context
	ApiService VideosChaptersAPI
	chapterId float32
	videoId int32
}

func (r ApiDeleteChapterRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteChapterExecute(r)
}

/*
DeleteChapter Delete a chapter

This method deletes the specified chapter from a video. The authenticated user must be the owner of the video.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chapterId The ID of the chapter.
 @param videoId The ID of the video.
 @return ApiDeleteChapterRequest
*/
func (a *VideosChaptersAPIService) DeleteChapter(ctx context.Context, chapterId float32, videoId int32) ApiDeleteChapterRequest {
	return ApiDeleteChapterRequest{
		ApiService: a,
		ctx: ctx,
		chapterId: chapterId,
		videoId: videoId,
	}
}

// Execute executes the request
func (a *VideosChaptersAPIService) DeleteChapterExecute(r ApiDeleteChapterRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosChaptersAPIService.DeleteChapter")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos/{video_id}/chapters/{chapter_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"chapter_id"+"}", url.PathEscape(parameterValueToString(r.chapterId, "chapterId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.video.chapter+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteChapterThumbnailRequest struct {
	ctx context.Context
	ApiService VideosChaptersAPI
	videoId int32
	chapterId float32
	uid string
}

func (r ApiDeleteChapterThumbnailRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteChapterThumbnailExecute(r)
}

/*
DeleteChapterThumbnail Delete a chapter thumbnail

This method deletes the specified chapter thumbnail from a video.

The authenticated user must be the owner of the video that the chapter belongs to.
This method deletes both timecode-generated and custom-uploaded thumbnails.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param videoId The ID of the video.
 @param chapterId The ID of the chapter.
 @param uid The unique ID of the thumbnail.
 @return ApiDeleteChapterThumbnailRequest
*/
func (a *VideosChaptersAPIService) DeleteChapterThumbnail(ctx context.Context, videoId int32, chapterId float32, uid string) ApiDeleteChapterThumbnailRequest {
	return ApiDeleteChapterThumbnailRequest{
		ApiService: a,
		ctx: ctx,
		videoId: videoId,
		chapterId: chapterId,
		uid: uid,
	}
}

// Execute executes the request
func (a *VideosChaptersAPIService) DeleteChapterThumbnailExecute(r ApiDeleteChapterThumbnailRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosChaptersAPIService.DeleteChapterThumbnail")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos/{video_id}/chapters/{chapter_id}/pictures/{uid}"
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"chapter_id"+"}", url.PathEscape(parameterValueToString(r.chapterId, "chapterId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEditChapterRequest struct {
	ctx context.Context
	ApiService VideosChaptersAPI
	chapterId float32
	videoId int32
	editChapterRequest *EditChapterRequest
}

func (r ApiEditChapterRequest) EditChapterRequest(editChapterRequest EditChapterRequest) ApiEditChapterRequest {
	r.editChapterRequest = &editChapterRequest
	return r
}

func (r ApiEditChapterRequest) Execute() (*Chapter, *http.Response, error) {
	return r.ApiService.EditChapterExecute(r)
}

/*
EditChapter Edit a chapter

This method edits the specified chapter of a video. The authenticated user must be the owner of the video.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chapterId The ID of the chapter.
 @param videoId The ID of the video.
 @return ApiEditChapterRequest
*/
func (a *VideosChaptersAPIService) EditChapter(ctx context.Context, chapterId float32, videoId int32) ApiEditChapterRequest {
	return ApiEditChapterRequest{
		ApiService: a,
		ctx: ctx,
		chapterId: chapterId,
		videoId: videoId,
	}
}

// Execute executes the request
//  @return Chapter
func (a *VideosChaptersAPIService) EditChapterExecute(r ApiEditChapterRequest) (*Chapter, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Chapter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosChaptersAPIService.EditChapter")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos/{video_id}/chapters/{chapter_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"chapter_id"+"}", url.PathEscape(parameterValueToString(r.chapterId, "chapterId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.vimeo.video.chapter+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.video.chapter+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.editChapterRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetChapterRequest struct {
	ctx context.Context
	ApiService VideosChaptersAPI
	chapterId float32
	videoId int32
}

func (r ApiGetChapterRequest) Execute() (*Chapter, *http.Response, error) {
	return r.ApiService.GetChapterExecute(r)
}

/*
GetChapter Get a specific chapter

This method returns a single chapter of the specified video.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chapterId The ID of the chapter.
 @param videoId The ID of the video.
 @return ApiGetChapterRequest
*/
func (a *VideosChaptersAPIService) GetChapter(ctx context.Context, chapterId float32, videoId int32) ApiGetChapterRequest {
	return ApiGetChapterRequest{
		ApiService: a,
		ctx: ctx,
		chapterId: chapterId,
		videoId: videoId,
	}
}

// Execute executes the request
//  @return Chapter
func (a *VideosChaptersAPIService) GetChapterExecute(r ApiGetChapterRequest) (*Chapter, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Chapter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosChaptersAPIService.GetChapter")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos/{video_id}/chapters/{chapter_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"chapter_id"+"}", url.PathEscape(parameterValueToString(r.chapterId, "chapterId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.video.chapter+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetChapterThumbnailRequest struct {
	ctx context.Context
	ApiService VideosChaptersAPI
	chapterId float32
	videoId int32
	uid string
}

func (r ApiGetChapterThumbnailRequest) Execute() (*Picture, *http.Response, error) {
	return r.ApiService.GetChapterThumbnailExecute(r)
}

/*
GetChapterThumbnail Get a single chapter thumbnail associated with a saved video chapter

This method returns the specified thumbnail associated with a saved video chapter.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chapterId The ID of the chapter.
 @param videoId The ID of the video.
 @param uid The unique ID of the thumbnail.
 @return ApiGetChapterThumbnailRequest
*/
func (a *VideosChaptersAPIService) GetChapterThumbnail(ctx context.Context, chapterId float32, videoId int32, uid string) ApiGetChapterThumbnailRequest {
	return ApiGetChapterThumbnailRequest{
		ApiService: a,
		ctx: ctx,
		chapterId: chapterId,
		videoId: videoId,
		uid: uid,
	}
}

// Execute executes the request
//  @return Picture
func (a *VideosChaptersAPIService) GetChapterThumbnailExecute(r ApiGetChapterThumbnailRequest) (*Picture, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Picture
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosChaptersAPIService.GetChapterThumbnail")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos/{video_id}/chapters/{chapter_id}/pictures/{uid}"
	localVarPath = strings.Replace(localVarPath, "{"+"chapter_id"+"}", url.PathEscape(parameterValueToString(r.chapterId, "chapterId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetChapterThumbnailsRequest struct {
	ctx context.Context
	ApiService VideosChaptersAPI
	chapterId float32
	videoId int32
}

func (r ApiGetChapterThumbnailsRequest) Execute() (*Picture, *http.Response, error) {
	return r.ApiService.GetChapterThumbnailsExecute(r)
}

/*
GetChapterThumbnails Get all the thumbnails associated with a saved video chapter

This method returns every thumbnail associated with the specified saved video chapter.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chapterId The ID of the chapter.
 @param videoId The ID of the video.
 @return ApiGetChapterThumbnailsRequest
*/
func (a *VideosChaptersAPIService) GetChapterThumbnails(ctx context.Context, chapterId float32, videoId int32) ApiGetChapterThumbnailsRequest {
	return ApiGetChapterThumbnailsRequest{
		ApiService: a,
		ctx: ctx,
		chapterId: chapterId,
		videoId: videoId,
	}
}

// Execute executes the request
//  @return Picture
func (a *VideosChaptersAPIService) GetChapterThumbnailsExecute(r ApiGetChapterThumbnailsRequest) (*Picture, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Picture
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosChaptersAPIService.GetChapterThumbnails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos/{video_id}/chapters/{chapter_id}/pictures"
	localVarPath = strings.Replace(localVarPath, "{"+"chapter_id"+"}", url.PathEscape(parameterValueToString(r.chapterId, "chapterId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetChaptersRequest struct {
	ctx context.Context
	ApiService VideosChaptersAPI
	videoId int32
	page *float32
	perPage *float32
}

// The page number of the results to show.
func (r ApiGetChaptersRequest) Page(page float32) ApiGetChaptersRequest {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiGetChaptersRequest) PerPage(perPage float32) ApiGetChaptersRequest {
	r.perPage = &perPage
	return r
}

func (r ApiGetChaptersRequest) Execute() ([]Chapter, *http.Response, error) {
	return r.ApiService.GetChaptersExecute(r)
}

/*
GetChapters Get all the chapters of a video

This method returns every chapter of the specified video.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param videoId The ID of the video.
 @return ApiGetChaptersRequest
*/
func (a *VideosChaptersAPIService) GetChapters(ctx context.Context, videoId int32) ApiGetChaptersRequest {
	return ApiGetChaptersRequest{
		ApiService: a,
		ctx: ctx,
		videoId: videoId,
	}
}

// Execute executes the request
//  @return []Chapter
func (a *VideosChaptersAPIService) GetChaptersExecute(r ApiGetChaptersRequest) ([]Chapter, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Chapter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosChaptersAPIService.GetChapters")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos/{video_id}/chapters"
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.video.chapter+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetUnsavedChapterThumbnailRequest struct {
	ctx context.Context
	ApiService VideosChaptersAPI
	videoId int32
	uid string
}

func (r ApiGetUnsavedChapterThumbnailRequest) Execute() (*Picture, *http.Response, error) {
	return r.ApiService.GetUnsavedChapterThumbnailExecute(r)
}

/*
GetUnsavedChapterThumbnail Get a single chapter thumbnail associated with an unsaved video chapter

This method returns the specified thumbnail associated with an unsaved video chapter.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param videoId The ID of the video.
 @param uid The unique ID of the thumbnail.
 @return ApiGetUnsavedChapterThumbnailRequest
*/
func (a *VideosChaptersAPIService) GetUnsavedChapterThumbnail(ctx context.Context, videoId int32, uid string) ApiGetUnsavedChapterThumbnailRequest {
	return ApiGetUnsavedChapterThumbnailRequest{
		ApiService: a,
		ctx: ctx,
		videoId: videoId,
		uid: uid,
	}
}

// Execute executes the request
//  @return Picture
func (a *VideosChaptersAPIService) GetUnsavedChapterThumbnailExecute(r ApiGetUnsavedChapterThumbnailRequest) (*Picture, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Picture
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosChaptersAPIService.GetUnsavedChapterThumbnail")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos/{video_id}/chapters/temporary/pictures/{uid}"
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSetChapterThumbnailActiveRequest struct {
	ctx context.Context
	ApiService VideosChaptersAPI
	chapterId float32
	videoId int32
	uid string
	setChapterThumbnailActiveRequest *SetChapterThumbnailActiveRequest
}

func (r ApiSetChapterThumbnailActiveRequest) SetChapterThumbnailActiveRequest(setChapterThumbnailActiveRequest SetChapterThumbnailActiveRequest) ApiSetChapterThumbnailActiveRequest {
	r.setChapterThumbnailActiveRequest = &setChapterThumbnailActiveRequest
	return r
}

func (r ApiSetChapterThumbnailActiveRequest) Execute() (*Picture, *http.Response, error) {
	return r.ApiService.SetChapterThumbnailActiveExecute(r)
}

/*
SetChapterThumbnailActive Set a chapter thumbnail as active

This method sets the specified chapter thumbnail for a video as active.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chapterId The ID of the chapter.
 @param videoId The ID of the video.
 @param uid The unique ID of the thumbnail.
 @return ApiSetChapterThumbnailActiveRequest
*/
func (a *VideosChaptersAPIService) SetChapterThumbnailActive(ctx context.Context, chapterId float32, videoId int32, uid string) ApiSetChapterThumbnailActiveRequest {
	return ApiSetChapterThumbnailActiveRequest{
		ApiService: a,
		ctx: ctx,
		chapterId: chapterId,
		videoId: videoId,
		uid: uid,
	}
}

// Execute executes the request
//  @return Picture
func (a *VideosChaptersAPIService) SetChapterThumbnailActiveExecute(r ApiSetChapterThumbnailActiveRequest) (*Picture, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Picture
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosChaptersAPIService.SetChapterThumbnailActive")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos/{video_id}/chapters/{chapter_id}/pictures/{uid}"
	localVarPath = strings.Replace(localVarPath, "{"+"chapter_id"+"}", url.PathEscape(parameterValueToString(r.chapterId, "chapterId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.setChapterThumbnailActiveRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
