/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type VideosRecommendationsAPI interface {

	/*
	GetRelatedVideos Get all the related videos of a video

	This method returns every related video of the specified video.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param videoId The ID of the video.
	@return ApiGetRelatedVideosRequest
	*/
	GetRelatedVideos(ctx context.Context, videoId float32) ApiGetRelatedVideosRequest

	// GetRelatedVideosExecute executes the request
	//  @return []Video
	GetRelatedVideosExecute(r ApiGetRelatedVideosRequest) ([]Video, *http.Response, error)
}

// VideosRecommendationsAPIService VideosRecommendationsAPI service
type VideosRecommendationsAPIService service

type ApiGetRelatedVideosRequest struct {
	ctx context.Context
	ApiService VideosRecommendationsAPI
	videoId float32
	filter *string
	page *float32
	perPage *float32
}

// The attribute by which to filter the results.  Option descriptions:  * &#x60;related&#x60; - Return related videos. 
func (r ApiGetRelatedVideosRequest) Filter(filter string) ApiGetRelatedVideosRequest {
	r.filter = &filter
	return r
}

// The page number of the results to show.
func (r ApiGetRelatedVideosRequest) Page(page float32) ApiGetRelatedVideosRequest {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiGetRelatedVideosRequest) PerPage(perPage float32) ApiGetRelatedVideosRequest {
	r.perPage = &perPage
	return r
}

func (r ApiGetRelatedVideosRequest) Execute() ([]Video, *http.Response, error) {
	return r.ApiService.GetRelatedVideosExecute(r)
}

/*
GetRelatedVideos Get all the related videos of a video

This method returns every related video of the specified video.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param videoId The ID of the video.
 @return ApiGetRelatedVideosRequest
*/
func (a *VideosRecommendationsAPIService) GetRelatedVideos(ctx context.Context, videoId float32) ApiGetRelatedVideosRequest {
	return ApiGetRelatedVideosRequest{
		ApiService: a,
		ctx: ctx,
		videoId: videoId,
	}
}

// Execute executes the request
//  @return []Video
func (a *VideosRecommendationsAPIService) GetRelatedVideosExecute(r ApiGetRelatedVideosRequest) ([]Video, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Video
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosRecommendationsAPIService.GetRelatedVideos")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos/{video_id}/videos"
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.video+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
