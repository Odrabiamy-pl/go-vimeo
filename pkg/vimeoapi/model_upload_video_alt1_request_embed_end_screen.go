/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the UploadVideoAlt1RequestEmbedEndScreen type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UploadVideoAlt1RequestEmbedEndScreen{}

// UploadVideoAlt1RequestEmbedEndScreen struct for UploadVideoAlt1RequestEmbedEndScreen
type UploadVideoAlt1RequestEmbedEndScreen struct {
	// The end screen type.  Option descriptions:  * `empty` - The end screen is empty.  * `loop` - The end screen loops the video playback.  * `share` - The end screen includes sharing options.  * `thumbnail` - The end screen includes the thumbnail of the video.
	Type *string `json:"type,omitempty"`
}

// NewUploadVideoAlt1RequestEmbedEndScreen instantiates a new UploadVideoAlt1RequestEmbedEndScreen object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadVideoAlt1RequestEmbedEndScreen() *UploadVideoAlt1RequestEmbedEndScreen {
	this := UploadVideoAlt1RequestEmbedEndScreen{}
	return &this
}

// NewUploadVideoAlt1RequestEmbedEndScreenWithDefaults instantiates a new UploadVideoAlt1RequestEmbedEndScreen object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadVideoAlt1RequestEmbedEndScreenWithDefaults() *UploadVideoAlt1RequestEmbedEndScreen {
	this := UploadVideoAlt1RequestEmbedEndScreen{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UploadVideoAlt1RequestEmbedEndScreen) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadVideoAlt1RequestEmbedEndScreen) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UploadVideoAlt1RequestEmbedEndScreen) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UploadVideoAlt1RequestEmbedEndScreen) SetType(v string) {
	o.Type = &v
}

func (o UploadVideoAlt1RequestEmbedEndScreen) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UploadVideoAlt1RequestEmbedEndScreen) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableUploadVideoAlt1RequestEmbedEndScreen struct {
	value *UploadVideoAlt1RequestEmbedEndScreen
	isSet bool
}

func (v NullableUploadVideoAlt1RequestEmbedEndScreen) Get() *UploadVideoAlt1RequestEmbedEndScreen {
	return v.value
}

func (v *NullableUploadVideoAlt1RequestEmbedEndScreen) Set(val *UploadVideoAlt1RequestEmbedEndScreen) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadVideoAlt1RequestEmbedEndScreen) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadVideoAlt1RequestEmbedEndScreen) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadVideoAlt1RequestEmbedEndScreen(val *UploadVideoAlt1RequestEmbedEndScreen) *NullableUploadVideoAlt1RequestEmbedEndScreen {
	return &NullableUploadVideoAlt1RequestEmbedEndScreen{value: val, isSet: true}
}

func (v NullableUploadVideoAlt1RequestEmbedEndScreen) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadVideoAlt1RequestEmbedEndScreen) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
