/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the Category type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Category{}

// Category struct for Category
type Category struct {
	Icon *Picture `json:"icon,omitempty"`
	// Whether the category is deprecated and should not be used for new categorization.
	IsDeprecated bool `json:"is_deprecated"`
	// The most recent time in ISO 8601 format when the video was featured.
	LastVideoFeaturedTime string `json:"last_video_featured_time"`
	// The URL to access the category in a browser.
	Link     string           `json:"link"`
	Metadata CategoryMetadata `json:"metadata"`
	// The display name that identifies the category.
	Name     string                 `json:"name"`
	Parent   NullableCategoryParent `json:"parent"`
	Pictures Picture                `json:"pictures"`
	// The resource key of the category.
	ResourceKey string `json:"resource_key"`
	// All the subcategories that belong to the category, if the current category is a top-level parent.
	Subcategories []CategorySubcategoriesInner `json:"subcategories,omitempty"`
	// Whether the category isn't a subcategory of another category.
	TopLevel bool `json:"top_level"`
	// The unique identifier to access the category resource.
	Uri string `json:"uri"`
}

// NewCategory instantiates a new Category object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCategory(isDeprecated bool, lastVideoFeaturedTime string, link string, metadata CategoryMetadata, name string, parent NullableCategoryParent, pictures Picture, resourceKey string, topLevel bool, uri string) *Category {
	this := Category{}
	this.IsDeprecated = isDeprecated
	this.LastVideoFeaturedTime = lastVideoFeaturedTime
	this.Link = link
	this.Metadata = metadata
	this.Name = name
	this.Parent = parent
	this.Pictures = pictures
	this.ResourceKey = resourceKey
	this.TopLevel = topLevel
	this.Uri = uri
	return &this
}

// NewCategoryWithDefaults instantiates a new Category object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCategoryWithDefaults() *Category {
	this := Category{}
	return &this
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *Category) GetIcon() Picture {
	if o == nil || IsNil(o.Icon) {
		var ret Picture
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Category) GetIconOk() (*Picture, bool) {
	if o == nil || IsNil(o.Icon) {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *Category) HasIcon() bool {
	if o != nil && !IsNil(o.Icon) {
		return true
	}

	return false
}

// SetIcon gets a reference to the given Picture and assigns it to the Icon field.
func (o *Category) SetIcon(v Picture) {
	o.Icon = &v
}

// GetIsDeprecated returns the IsDeprecated field value
func (o *Category) GetIsDeprecated() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsDeprecated
}

// GetIsDeprecatedOk returns a tuple with the IsDeprecated field value
// and a boolean to check if the value has been set.
func (o *Category) GetIsDeprecatedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsDeprecated, true
}

// SetIsDeprecated sets field value
func (o *Category) SetIsDeprecated(v bool) {
	o.IsDeprecated = v
}

// GetLastVideoFeaturedTime returns the LastVideoFeaturedTime field value
func (o *Category) GetLastVideoFeaturedTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastVideoFeaturedTime
}

// GetLastVideoFeaturedTimeOk returns a tuple with the LastVideoFeaturedTime field value
// and a boolean to check if the value has been set.
func (o *Category) GetLastVideoFeaturedTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastVideoFeaturedTime, true
}

// SetLastVideoFeaturedTime sets field value
func (o *Category) SetLastVideoFeaturedTime(v string) {
	o.LastVideoFeaturedTime = v
}

// GetLink returns the Link field value
func (o *Category) GetLink() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Link
}

// GetLinkOk returns a tuple with the Link field value
// and a boolean to check if the value has been set.
func (o *Category) GetLinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Link, true
}

// SetLink sets field value
func (o *Category) SetLink(v string) {
	o.Link = v
}

// GetMetadata returns the Metadata field value
func (o *Category) GetMetadata() CategoryMetadata {
	if o == nil {
		var ret CategoryMetadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *Category) GetMetadataOk() (*CategoryMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *Category) SetMetadata(v CategoryMetadata) {
	o.Metadata = v
}

// GetName returns the Name field value
func (o *Category) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Category) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Category) SetName(v string) {
	o.Name = v
}

// GetParent returns the Parent field value
// If the value is explicit nil, the zero value for CategoryParent will be returned
func (o *Category) GetParent() CategoryParent {
	if o == nil || o.Parent.Get() == nil {
		var ret CategoryParent
		return ret
	}

	return *o.Parent.Get()
}

// GetParentOk returns a tuple with the Parent field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Category) GetParentOk() (*CategoryParent, bool) {
	if o == nil {
		return nil, false
	}
	return o.Parent.Get(), o.Parent.IsSet()
}

// SetParent sets field value
func (o *Category) SetParent(v CategoryParent) {
	o.Parent.Set(&v)
}

// GetPictures returns the Pictures field value
func (o *Category) GetPictures() Picture {
	if o == nil {
		var ret Picture
		return ret
	}

	return o.Pictures
}

// GetPicturesOk returns a tuple with the Pictures field value
// and a boolean to check if the value has been set.
func (o *Category) GetPicturesOk() (*Picture, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pictures, true
}

// SetPictures sets field value
func (o *Category) SetPictures(v Picture) {
	o.Pictures = v
}

// GetResourceKey returns the ResourceKey field value
func (o *Category) GetResourceKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceKey
}

// GetResourceKeyOk returns a tuple with the ResourceKey field value
// and a boolean to check if the value has been set.
func (o *Category) GetResourceKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceKey, true
}

// SetResourceKey sets field value
func (o *Category) SetResourceKey(v string) {
	o.ResourceKey = v
}

// GetSubcategories returns the Subcategories field value if set, zero value otherwise.
func (o *Category) GetSubcategories() []CategorySubcategoriesInner {
	if o == nil || IsNil(o.Subcategories) {
		var ret []CategorySubcategoriesInner
		return ret
	}
	return o.Subcategories
}

// GetSubcategoriesOk returns a tuple with the Subcategories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Category) GetSubcategoriesOk() ([]CategorySubcategoriesInner, bool) {
	if o == nil || IsNil(o.Subcategories) {
		return nil, false
	}
	return o.Subcategories, true
}

// HasSubcategories returns a boolean if a field has been set.
func (o *Category) HasSubcategories() bool {
	if o != nil && !IsNil(o.Subcategories) {
		return true
	}

	return false
}

// SetSubcategories gets a reference to the given []CategorySubcategoriesInner and assigns it to the Subcategories field.
func (o *Category) SetSubcategories(v []CategorySubcategoriesInner) {
	o.Subcategories = v
}

// GetTopLevel returns the TopLevel field value
func (o *Category) GetTopLevel() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.TopLevel
}

// GetTopLevelOk returns a tuple with the TopLevel field value
// and a boolean to check if the value has been set.
func (o *Category) GetTopLevelOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TopLevel, true
}

// SetTopLevel sets field value
func (o *Category) SetTopLevel(v bool) {
	o.TopLevel = v
}

// GetUri returns the Uri field value
func (o *Category) GetUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uri
}

// GetUriOk returns a tuple with the Uri field value
// and a boolean to check if the value has been set.
func (o *Category) GetUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uri, true
}

// SetUri sets field value
func (o *Category) SetUri(v string) {
	o.Uri = v
}

func (o Category) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Category) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Icon) {
		toSerialize["icon"] = o.Icon
	}
	toSerialize["is_deprecated"] = o.IsDeprecated
	toSerialize["last_video_featured_time"] = o.LastVideoFeaturedTime
	toSerialize["link"] = o.Link
	toSerialize["metadata"] = o.Metadata
	toSerialize["name"] = o.Name
	toSerialize["parent"] = o.Parent.Get()
	toSerialize["pictures"] = o.Pictures
	toSerialize["resource_key"] = o.ResourceKey
	if !IsNil(o.Subcategories) {
		toSerialize["subcategories"] = o.Subcategories
	}
	toSerialize["top_level"] = o.TopLevel
	toSerialize["uri"] = o.Uri
	return toSerialize, nil
}

type NullableCategory struct {
	value *Category
	isSet bool
}

func (v NullableCategory) Get() *Category {
	return v.value
}

func (v *NullableCategory) Set(val *Category) {
	v.value = val
	v.isSet = true
}

func (v NullableCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCategory(val *Category) *NullableCategory {
	return &NullableCategory{value: val, isSet: true}
}

func (v NullableCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
