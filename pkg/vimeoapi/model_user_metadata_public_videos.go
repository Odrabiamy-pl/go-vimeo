/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserMetadataPublicVideos type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserMetadataPublicVideos{}

// UserMetadataPublicVideos struct for UserMetadataPublicVideos
type UserMetadataPublicVideos struct {
	// The total number of public videos that the authenticated user has uploaded.
	Total float32 `json:"total"`
}

type _UserMetadataPublicVideos UserMetadataPublicVideos

// NewUserMetadataPublicVideos instantiates a new UserMetadataPublicVideos object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserMetadataPublicVideos(total float32) *UserMetadataPublicVideos {
	this := UserMetadataPublicVideos{}
	this.Total = total
	return &this
}

// NewUserMetadataPublicVideosWithDefaults instantiates a new UserMetadataPublicVideos object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserMetadataPublicVideosWithDefaults() *UserMetadataPublicVideos {
	this := UserMetadataPublicVideos{}
	return &this
}

// GetTotal returns the Total field value
func (o *UserMetadataPublicVideos) GetTotal() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *UserMetadataPublicVideos) GetTotalOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *UserMetadataPublicVideos) SetTotal(v float32) {
	o.Total = v
}

func (o UserMetadataPublicVideos) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserMetadataPublicVideos) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["total"] = o.Total
	return toSerialize, nil
}

func (o *UserMetadataPublicVideos) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"total",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserMetadataPublicVideos := _UserMetadataPublicVideos{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserMetadataPublicVideos)

	if err != nil {
		return err
	}

	*o = UserMetadataPublicVideos(varUserMetadataPublicVideos)

	return err
}

type NullableUserMetadataPublicVideos struct {
	value *UserMetadataPublicVideos
	isSet bool
}

func (v NullableUserMetadataPublicVideos) Get() *UserMetadataPublicVideos {
	return v.value
}

func (v *NullableUserMetadataPublicVideos) Set(val *UserMetadataPublicVideos) {
	v.value = val
	v.isSet = true
}

func (v NullableUserMetadataPublicVideos) IsSet() bool {
	return v.isSet
}

func (v *NullableUserMetadataPublicVideos) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserMetadataPublicVideos(val *UserMetadataPublicVideos) *NullableUserMetadataPublicVideos {
	return &NullableUserMetadataPublicVideos{value: val, isSet: true}
}

func (v NullableUserMetadataPublicVideos) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserMetadataPublicVideos) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


