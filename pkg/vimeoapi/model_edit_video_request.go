/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the EditVideoRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EditVideoRequest{}

// EditVideoRequest struct for EditVideoRequest
type EditVideoRequest struct {
	// A list of values describing the content in this video. For a full list of values, use the [`/contentratings`](https://developer.vimeo.com/api/reference/videos#get_content_ratings) endpoint.
	ContentRating []string `json:"content_rating,omitempty"`
	// The custom link of the video. This link doesn't include the base URL and the username or user ID of the video's owner.
	CustomUrl *string `json:"custom_url,omitempty"`
	// The description of the video. This field can hold a maximum of 5000 characters.
	Description *string                `json:"description,omitempty"`
	Embed       *EditVideoRequestEmbed `json:"embed,omitempty"`
	// The complete list of domains the video can be embedded on. This field overwrites existing domains and requires that **privacy_embed** have the value `whitelist`.
	EmbedDomains []string `json:"embed_domains,omitempty"`
	// A list of domains intended to be added to an existing set of domains. This field requires that **privacy_embed** have the value `whitelist`.
	EmbedDomainsAdd []string `json:"embed_domains_add,omitempty"`
	// A list of domains intended to be removed from an existing set of domains. This field requires that **privacy_embed** have the value `whitelist`.
	EmbedDomainsDelete []string `json:"embed_domains_delete,omitempty"`
	// Whether to hide the video from everyone except the video's owner. When the value is `true`, unlisted video links work only for the video's owner.
	HideFromVimeo *bool `json:"hide_from_vimeo,omitempty"`
	// The Creative Commons license under which the video is offered.  Option descriptions:  * `by` - The video is offered under CC BY, or the attibution-only license.  * `by-nc` - The video is offered under CC BY-NC, or the Attribution-NonCommercial license.  * `by-nc-nd` - The video is offered under CC BY-NC-ND, or the Attribution-NonCommercian-NoDerivs license.  * `by-nc-sa` - The video is offered under CC BY-NC-SA, or the Attribution-NonCommercial-ShareAlike licence.  * `by-nd` - The video is offered under CC BY-ND, or the Attribution-NoDerivs license.  * `by-sa` - The video is offered under CC BY-SA, or the Attribution-ShareAlike license.  * `cc0` - The video is offered under CC0, or public domain, videos.
	License *string `json:"license,omitempty"`
	// The video's default language. For a full list of supported languages, use the [`/languages?filter=texttracks`](https://developer.vimeo.com/api/reference/videos#get_languages) endpoint.
	Locale *string `json:"locale,omitempty"`
	// The title of the video. This field can hold a maximum of 128 characters.
	Name *string `json:"name,omitempty"`
	// The password. When you set **privacy.view** to `password`, you must provide the password as an additional parameter. This field can hold a maximum of 32 characters.
	Password   *string                           `json:"password,omitempty"`
	Privacy    *EditVideoRequestPrivacy          `json:"privacy,omitempty"`
	ReviewPage *UploadVideoAlt1RequestReviewPage `json:"review_page,omitempty"`
	Spatial    *EditVideoRequestSpatial          `json:"spatial,omitempty"`
}

// NewEditVideoRequest instantiates a new EditVideoRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditVideoRequest() *EditVideoRequest {
	this := EditVideoRequest{}
	return &this
}

// NewEditVideoRequestWithDefaults instantiates a new EditVideoRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditVideoRequestWithDefaults() *EditVideoRequest {
	this := EditVideoRequest{}
	return &this
}

// GetContentRating returns the ContentRating field value if set, zero value otherwise.
func (o *EditVideoRequest) GetContentRating() []string {
	if o == nil || IsNil(o.ContentRating) {
		var ret []string
		return ret
	}
	return o.ContentRating
}

// GetContentRatingOk returns a tuple with the ContentRating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditVideoRequest) GetContentRatingOk() ([]string, bool) {
	if o == nil || IsNil(o.ContentRating) {
		return nil, false
	}
	return o.ContentRating, true
}

// HasContentRating returns a boolean if a field has been set.
func (o *EditVideoRequest) HasContentRating() bool {
	if o != nil && !IsNil(o.ContentRating) {
		return true
	}

	return false
}

// SetContentRating gets a reference to the given []string and assigns it to the ContentRating field.
func (o *EditVideoRequest) SetContentRating(v []string) {
	o.ContentRating = v
}

// GetCustomUrl returns the CustomUrl field value if set, zero value otherwise.
func (o *EditVideoRequest) GetCustomUrl() string {
	if o == nil || IsNil(o.CustomUrl) {
		var ret string
		return ret
	}
	return *o.CustomUrl
}

// GetCustomUrlOk returns a tuple with the CustomUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditVideoRequest) GetCustomUrlOk() (*string, bool) {
	if o == nil || IsNil(o.CustomUrl) {
		return nil, false
	}
	return o.CustomUrl, true
}

// HasCustomUrl returns a boolean if a field has been set.
func (o *EditVideoRequest) HasCustomUrl() bool {
	if o != nil && !IsNil(o.CustomUrl) {
		return true
	}

	return false
}

// SetCustomUrl gets a reference to the given string and assigns it to the CustomUrl field.
func (o *EditVideoRequest) SetCustomUrl(v string) {
	o.CustomUrl = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EditVideoRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditVideoRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EditVideoRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EditVideoRequest) SetDescription(v string) {
	o.Description = &v
}

// GetEmbed returns the Embed field value if set, zero value otherwise.
func (o *EditVideoRequest) GetEmbed() EditVideoRequestEmbed {
	if o == nil || IsNil(o.Embed) {
		var ret EditVideoRequestEmbed
		return ret
	}
	return *o.Embed
}

// GetEmbedOk returns a tuple with the Embed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditVideoRequest) GetEmbedOk() (*EditVideoRequestEmbed, bool) {
	if o == nil || IsNil(o.Embed) {
		return nil, false
	}
	return o.Embed, true
}

// HasEmbed returns a boolean if a field has been set.
func (o *EditVideoRequest) HasEmbed() bool {
	if o != nil && !IsNil(o.Embed) {
		return true
	}

	return false
}

// SetEmbed gets a reference to the given EditVideoRequestEmbed and assigns it to the Embed field.
func (o *EditVideoRequest) SetEmbed(v EditVideoRequestEmbed) {
	o.Embed = &v
}

// GetEmbedDomains returns the EmbedDomains field value if set, zero value otherwise.
func (o *EditVideoRequest) GetEmbedDomains() []string {
	if o == nil || IsNil(o.EmbedDomains) {
		var ret []string
		return ret
	}
	return o.EmbedDomains
}

// GetEmbedDomainsOk returns a tuple with the EmbedDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditVideoRequest) GetEmbedDomainsOk() ([]string, bool) {
	if o == nil || IsNil(o.EmbedDomains) {
		return nil, false
	}
	return o.EmbedDomains, true
}

// HasEmbedDomains returns a boolean if a field has been set.
func (o *EditVideoRequest) HasEmbedDomains() bool {
	if o != nil && !IsNil(o.EmbedDomains) {
		return true
	}

	return false
}

// SetEmbedDomains gets a reference to the given []string and assigns it to the EmbedDomains field.
func (o *EditVideoRequest) SetEmbedDomains(v []string) {
	o.EmbedDomains = v
}

// GetEmbedDomainsAdd returns the EmbedDomainsAdd field value if set, zero value otherwise.
func (o *EditVideoRequest) GetEmbedDomainsAdd() []string {
	if o == nil || IsNil(o.EmbedDomainsAdd) {
		var ret []string
		return ret
	}
	return o.EmbedDomainsAdd
}

// GetEmbedDomainsAddOk returns a tuple with the EmbedDomainsAdd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditVideoRequest) GetEmbedDomainsAddOk() ([]string, bool) {
	if o == nil || IsNil(o.EmbedDomainsAdd) {
		return nil, false
	}
	return o.EmbedDomainsAdd, true
}

// HasEmbedDomainsAdd returns a boolean if a field has been set.
func (o *EditVideoRequest) HasEmbedDomainsAdd() bool {
	if o != nil && !IsNil(o.EmbedDomainsAdd) {
		return true
	}

	return false
}

// SetEmbedDomainsAdd gets a reference to the given []string and assigns it to the EmbedDomainsAdd field.
func (o *EditVideoRequest) SetEmbedDomainsAdd(v []string) {
	o.EmbedDomainsAdd = v
}

// GetEmbedDomainsDelete returns the EmbedDomainsDelete field value if set, zero value otherwise.
func (o *EditVideoRequest) GetEmbedDomainsDelete() []string {
	if o == nil || IsNil(o.EmbedDomainsDelete) {
		var ret []string
		return ret
	}
	return o.EmbedDomainsDelete
}

// GetEmbedDomainsDeleteOk returns a tuple with the EmbedDomainsDelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditVideoRequest) GetEmbedDomainsDeleteOk() ([]string, bool) {
	if o == nil || IsNil(o.EmbedDomainsDelete) {
		return nil, false
	}
	return o.EmbedDomainsDelete, true
}

// HasEmbedDomainsDelete returns a boolean if a field has been set.
func (o *EditVideoRequest) HasEmbedDomainsDelete() bool {
	if o != nil && !IsNil(o.EmbedDomainsDelete) {
		return true
	}

	return false
}

// SetEmbedDomainsDelete gets a reference to the given []string and assigns it to the EmbedDomainsDelete field.
func (o *EditVideoRequest) SetEmbedDomainsDelete(v []string) {
	o.EmbedDomainsDelete = v
}

// GetHideFromVimeo returns the HideFromVimeo field value if set, zero value otherwise.
func (o *EditVideoRequest) GetHideFromVimeo() bool {
	if o == nil || IsNil(o.HideFromVimeo) {
		var ret bool
		return ret
	}
	return *o.HideFromVimeo
}

// GetHideFromVimeoOk returns a tuple with the HideFromVimeo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditVideoRequest) GetHideFromVimeoOk() (*bool, bool) {
	if o == nil || IsNil(o.HideFromVimeo) {
		return nil, false
	}
	return o.HideFromVimeo, true
}

// HasHideFromVimeo returns a boolean if a field has been set.
func (o *EditVideoRequest) HasHideFromVimeo() bool {
	if o != nil && !IsNil(o.HideFromVimeo) {
		return true
	}

	return false
}

// SetHideFromVimeo gets a reference to the given bool and assigns it to the HideFromVimeo field.
func (o *EditVideoRequest) SetHideFromVimeo(v bool) {
	o.HideFromVimeo = &v
}

// GetLicense returns the License field value if set, zero value otherwise.
func (o *EditVideoRequest) GetLicense() string {
	if o == nil || IsNil(o.License) {
		var ret string
		return ret
	}
	return *o.License
}

// GetLicenseOk returns a tuple with the License field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditVideoRequest) GetLicenseOk() (*string, bool) {
	if o == nil || IsNil(o.License) {
		return nil, false
	}
	return o.License, true
}

// HasLicense returns a boolean if a field has been set.
func (o *EditVideoRequest) HasLicense() bool {
	if o != nil && !IsNil(o.License) {
		return true
	}

	return false
}

// SetLicense gets a reference to the given string and assigns it to the License field.
func (o *EditVideoRequest) SetLicense(v string) {
	o.License = &v
}

// GetLocale returns the Locale field value if set, zero value otherwise.
func (o *EditVideoRequest) GetLocale() string {
	if o == nil || IsNil(o.Locale) {
		var ret string
		return ret
	}
	return *o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditVideoRequest) GetLocaleOk() (*string, bool) {
	if o == nil || IsNil(o.Locale) {
		return nil, false
	}
	return o.Locale, true
}

// HasLocale returns a boolean if a field has been set.
func (o *EditVideoRequest) HasLocale() bool {
	if o != nil && !IsNil(o.Locale) {
		return true
	}

	return false
}

// SetLocale gets a reference to the given string and assigns it to the Locale field.
func (o *EditVideoRequest) SetLocale(v string) {
	o.Locale = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EditVideoRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditVideoRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EditVideoRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EditVideoRequest) SetName(v string) {
	o.Name = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *EditVideoRequest) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditVideoRequest) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *EditVideoRequest) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *EditVideoRequest) SetPassword(v string) {
	o.Password = &v
}

// GetPrivacy returns the Privacy field value if set, zero value otherwise.
func (o *EditVideoRequest) GetPrivacy() EditVideoRequestPrivacy {
	if o == nil || IsNil(o.Privacy) {
		var ret EditVideoRequestPrivacy
		return ret
	}
	return *o.Privacy
}

// GetPrivacyOk returns a tuple with the Privacy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditVideoRequest) GetPrivacyOk() (*EditVideoRequestPrivacy, bool) {
	if o == nil || IsNil(o.Privacy) {
		return nil, false
	}
	return o.Privacy, true
}

// HasPrivacy returns a boolean if a field has been set.
func (o *EditVideoRequest) HasPrivacy() bool {
	if o != nil && !IsNil(o.Privacy) {
		return true
	}

	return false
}

// SetPrivacy gets a reference to the given EditVideoRequestPrivacy and assigns it to the Privacy field.
func (o *EditVideoRequest) SetPrivacy(v EditVideoRequestPrivacy) {
	o.Privacy = &v
}

// GetReviewPage returns the ReviewPage field value if set, zero value otherwise.
func (o *EditVideoRequest) GetReviewPage() UploadVideoAlt1RequestReviewPage {
	if o == nil || IsNil(o.ReviewPage) {
		var ret UploadVideoAlt1RequestReviewPage
		return ret
	}
	return *o.ReviewPage
}

// GetReviewPageOk returns a tuple with the ReviewPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditVideoRequest) GetReviewPageOk() (*UploadVideoAlt1RequestReviewPage, bool) {
	if o == nil || IsNil(o.ReviewPage) {
		return nil, false
	}
	return o.ReviewPage, true
}

// HasReviewPage returns a boolean if a field has been set.
func (o *EditVideoRequest) HasReviewPage() bool {
	if o != nil && !IsNil(o.ReviewPage) {
		return true
	}

	return false
}

// SetReviewPage gets a reference to the given UploadVideoAlt1RequestReviewPage and assigns it to the ReviewPage field.
func (o *EditVideoRequest) SetReviewPage(v UploadVideoAlt1RequestReviewPage) {
	o.ReviewPage = &v
}

// GetSpatial returns the Spatial field value if set, zero value otherwise.
func (o *EditVideoRequest) GetSpatial() EditVideoRequestSpatial {
	if o == nil || IsNil(o.Spatial) {
		var ret EditVideoRequestSpatial
		return ret
	}
	return *o.Spatial
}

// GetSpatialOk returns a tuple with the Spatial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditVideoRequest) GetSpatialOk() (*EditVideoRequestSpatial, bool) {
	if o == nil || IsNil(o.Spatial) {
		return nil, false
	}
	return o.Spatial, true
}

// HasSpatial returns a boolean if a field has been set.
func (o *EditVideoRequest) HasSpatial() bool {
	if o != nil && !IsNil(o.Spatial) {
		return true
	}

	return false
}

// SetSpatial gets a reference to the given EditVideoRequestSpatial and assigns it to the Spatial field.
func (o *EditVideoRequest) SetSpatial(v EditVideoRequestSpatial) {
	o.Spatial = &v
}

func (o EditVideoRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EditVideoRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContentRating) {
		toSerialize["content_rating"] = o.ContentRating
	}
	if !IsNil(o.CustomUrl) {
		toSerialize["custom_url"] = o.CustomUrl
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Embed) {
		toSerialize["embed"] = o.Embed
	}
	if !IsNil(o.EmbedDomains) {
		toSerialize["embed_domains"] = o.EmbedDomains
	}
	if !IsNil(o.EmbedDomainsAdd) {
		toSerialize["embed_domains_add"] = o.EmbedDomainsAdd
	}
	if !IsNil(o.EmbedDomainsDelete) {
		toSerialize["embed_domains_delete"] = o.EmbedDomainsDelete
	}
	if !IsNil(o.HideFromVimeo) {
		toSerialize["hide_from_vimeo"] = o.HideFromVimeo
	}
	if !IsNil(o.License) {
		toSerialize["license"] = o.License
	}
	if !IsNil(o.Locale) {
		toSerialize["locale"] = o.Locale
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.Privacy) {
		toSerialize["privacy"] = o.Privacy
	}
	if !IsNil(o.ReviewPage) {
		toSerialize["review_page"] = o.ReviewPage
	}
	if !IsNil(o.Spatial) {
		toSerialize["spatial"] = o.Spatial
	}
	return toSerialize, nil
}

type NullableEditVideoRequest struct {
	value *EditVideoRequest
	isSet bool
}

func (v NullableEditVideoRequest) Get() *EditVideoRequest {
	return v.value
}

func (v *NullableEditVideoRequest) Set(val *EditVideoRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEditVideoRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEditVideoRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditVideoRequest(val *EditVideoRequest) *NullableEditVideoRequest {
	return &NullableEditVideoRequest{value: val, isSet: true}
}

func (v NullableEditVideoRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditVideoRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
