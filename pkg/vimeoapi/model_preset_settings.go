/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PresetSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PresetSettings{}

// PresetSettings The contents of the preset group.
type PresetSettings struct {
	// Whether AirPlay is enabled in the embeddable player.
	Airplay bool `json:"airplay"`
	// Whether multiple audio tracks can appear in the embeddable player.
	AudioTracks bool `json:"audio_tracks"`
	Buttons PresetSettingsButtons `json:"buttons"`
	// How the embeddable player handles the video owner's information.  Option descriptions:  * `hide` - The owner's information is hidden.  * `show` - The owner's information is shown.  * `user` - The owner's information can be toggled to `show` or `hide` by the user. 
	Byline string `json:"byline"`
	// Whether chapters are enabled in the embeddable player.
	Chapters bool `json:"chapters"`
	// Whether the Chromecast button appears in the embeddable player.
	Chromecast bool `json:"chromecast"`
	// Whether closed captions are enabled in the embeddable player.
	ClosedCaptions bool `json:"closed_captions"`
	// The first player color, which controls the color of the progress bar, buttons, and more.
	Color string `json:"color"`
	Colors PresetSettingsColors `json:"colors"`
	Logos PresetSettingsLogos `json:"logos"`
	Outro PresetSettingsOutro `json:"outro"`
	// Whether picture-in-picture is enabled and the button appears in the embeddable player.
	Pip bool `json:"pip"`
	PlayButton EmbedSettingsPlayButton `json:"play_button"`
	// Whether the playbar appears in the embeddable player.
	Playbar bool `json:"playbar"`
	// How the embeddable player handles the video owner's portrait.  Option descriptions:  * `hide` - The owner's portrait is hidden.  * `show` - The owner's portrait is shown.  * `user` - The owner's portrait can be toggled to `show` or `hide` by the user. 
	Portrait string `json:"portrait"`
	// Whether to show the quality selector in the embeddable player.
	QualitySelector bool `json:"quality_selector"`
	// Whether the speed controls appear in the embeddable player.
	Speed bool `json:"speed"`
	// How the embeddable player handles the video title.  Option descriptions:  * `hide` - The title is hidden.  * `show` - The title is shown.  * `user` - The title can be toggled to `show` or `hide` by the user. 
	Title string `json:"title"`
	// Whether the transcript controls appear in the embeddable player.
	Transcript bool `json:"transcript"`
	// Whether the volume controls appear in the embeddable player.
	Volume bool `json:"volume"`
}

type _PresetSettings PresetSettings

// NewPresetSettings instantiates a new PresetSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPresetSettings(airplay bool, audioTracks bool, buttons PresetSettingsButtons, byline string, chapters bool, chromecast bool, closedCaptions bool, color string, colors PresetSettingsColors, logos PresetSettingsLogos, outro PresetSettingsOutro, pip bool, playButton EmbedSettingsPlayButton, playbar bool, portrait string, qualitySelector bool, speed bool, title string, transcript bool, volume bool) *PresetSettings {
	this := PresetSettings{}
	this.Airplay = airplay
	this.AudioTracks = audioTracks
	this.Buttons = buttons
	this.Byline = byline
	this.Chapters = chapters
	this.Chromecast = chromecast
	this.ClosedCaptions = closedCaptions
	this.Color = color
	this.Colors = colors
	this.Logos = logos
	this.Outro = outro
	this.Pip = pip
	this.PlayButton = playButton
	this.Playbar = playbar
	this.Portrait = portrait
	this.QualitySelector = qualitySelector
	this.Speed = speed
	this.Title = title
	this.Transcript = transcript
	this.Volume = volume
	return &this
}

// NewPresetSettingsWithDefaults instantiates a new PresetSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPresetSettingsWithDefaults() *PresetSettings {
	this := PresetSettings{}
	return &this
}

// GetAirplay returns the Airplay field value
func (o *PresetSettings) GetAirplay() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Airplay
}

// GetAirplayOk returns a tuple with the Airplay field value
// and a boolean to check if the value has been set.
func (o *PresetSettings) GetAirplayOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Airplay, true
}

// SetAirplay sets field value
func (o *PresetSettings) SetAirplay(v bool) {
	o.Airplay = v
}

// GetAudioTracks returns the AudioTracks field value
func (o *PresetSettings) GetAudioTracks() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AudioTracks
}

// GetAudioTracksOk returns a tuple with the AudioTracks field value
// and a boolean to check if the value has been set.
func (o *PresetSettings) GetAudioTracksOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AudioTracks, true
}

// SetAudioTracks sets field value
func (o *PresetSettings) SetAudioTracks(v bool) {
	o.AudioTracks = v
}

// GetButtons returns the Buttons field value
func (o *PresetSettings) GetButtons() PresetSettingsButtons {
	if o == nil {
		var ret PresetSettingsButtons
		return ret
	}

	return o.Buttons
}

// GetButtonsOk returns a tuple with the Buttons field value
// and a boolean to check if the value has been set.
func (o *PresetSettings) GetButtonsOk() (*PresetSettingsButtons, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Buttons, true
}

// SetButtons sets field value
func (o *PresetSettings) SetButtons(v PresetSettingsButtons) {
	o.Buttons = v
}

// GetByline returns the Byline field value
func (o *PresetSettings) GetByline() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Byline
}

// GetBylineOk returns a tuple with the Byline field value
// and a boolean to check if the value has been set.
func (o *PresetSettings) GetBylineOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Byline, true
}

// SetByline sets field value
func (o *PresetSettings) SetByline(v string) {
	o.Byline = v
}

// GetChapters returns the Chapters field value
func (o *PresetSettings) GetChapters() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Chapters
}

// GetChaptersOk returns a tuple with the Chapters field value
// and a boolean to check if the value has been set.
func (o *PresetSettings) GetChaptersOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Chapters, true
}

// SetChapters sets field value
func (o *PresetSettings) SetChapters(v bool) {
	o.Chapters = v
}

// GetChromecast returns the Chromecast field value
func (o *PresetSettings) GetChromecast() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Chromecast
}

// GetChromecastOk returns a tuple with the Chromecast field value
// and a boolean to check if the value has been set.
func (o *PresetSettings) GetChromecastOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Chromecast, true
}

// SetChromecast sets field value
func (o *PresetSettings) SetChromecast(v bool) {
	o.Chromecast = v
}

// GetClosedCaptions returns the ClosedCaptions field value
func (o *PresetSettings) GetClosedCaptions() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ClosedCaptions
}

// GetClosedCaptionsOk returns a tuple with the ClosedCaptions field value
// and a boolean to check if the value has been set.
func (o *PresetSettings) GetClosedCaptionsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClosedCaptions, true
}

// SetClosedCaptions sets field value
func (o *PresetSettings) SetClosedCaptions(v bool) {
	o.ClosedCaptions = v
}

// GetColor returns the Color field value
func (o *PresetSettings) GetColor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Color
}

// GetColorOk returns a tuple with the Color field value
// and a boolean to check if the value has been set.
func (o *PresetSettings) GetColorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Color, true
}

// SetColor sets field value
func (o *PresetSettings) SetColor(v string) {
	o.Color = v
}

// GetColors returns the Colors field value
func (o *PresetSettings) GetColors() PresetSettingsColors {
	if o == nil {
		var ret PresetSettingsColors
		return ret
	}

	return o.Colors
}

// GetColorsOk returns a tuple with the Colors field value
// and a boolean to check if the value has been set.
func (o *PresetSettings) GetColorsOk() (*PresetSettingsColors, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Colors, true
}

// SetColors sets field value
func (o *PresetSettings) SetColors(v PresetSettingsColors) {
	o.Colors = v
}

// GetLogos returns the Logos field value
func (o *PresetSettings) GetLogos() PresetSettingsLogos {
	if o == nil {
		var ret PresetSettingsLogos
		return ret
	}

	return o.Logos
}

// GetLogosOk returns a tuple with the Logos field value
// and a boolean to check if the value has been set.
func (o *PresetSettings) GetLogosOk() (*PresetSettingsLogos, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Logos, true
}

// SetLogos sets field value
func (o *PresetSettings) SetLogos(v PresetSettingsLogos) {
	o.Logos = v
}

// GetOutro returns the Outro field value
func (o *PresetSettings) GetOutro() PresetSettingsOutro {
	if o == nil {
		var ret PresetSettingsOutro
		return ret
	}

	return o.Outro
}

// GetOutroOk returns a tuple with the Outro field value
// and a boolean to check if the value has been set.
func (o *PresetSettings) GetOutroOk() (*PresetSettingsOutro, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Outro, true
}

// SetOutro sets field value
func (o *PresetSettings) SetOutro(v PresetSettingsOutro) {
	o.Outro = v
}

// GetPip returns the Pip field value
func (o *PresetSettings) GetPip() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Pip
}

// GetPipOk returns a tuple with the Pip field value
// and a boolean to check if the value has been set.
func (o *PresetSettings) GetPipOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pip, true
}

// SetPip sets field value
func (o *PresetSettings) SetPip(v bool) {
	o.Pip = v
}

// GetPlayButton returns the PlayButton field value
func (o *PresetSettings) GetPlayButton() EmbedSettingsPlayButton {
	if o == nil {
		var ret EmbedSettingsPlayButton
		return ret
	}

	return o.PlayButton
}

// GetPlayButtonOk returns a tuple with the PlayButton field value
// and a boolean to check if the value has been set.
func (o *PresetSettings) GetPlayButtonOk() (*EmbedSettingsPlayButton, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlayButton, true
}

// SetPlayButton sets field value
func (o *PresetSettings) SetPlayButton(v EmbedSettingsPlayButton) {
	o.PlayButton = v
}

// GetPlaybar returns the Playbar field value
func (o *PresetSettings) GetPlaybar() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Playbar
}

// GetPlaybarOk returns a tuple with the Playbar field value
// and a boolean to check if the value has been set.
func (o *PresetSettings) GetPlaybarOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Playbar, true
}

// SetPlaybar sets field value
func (o *PresetSettings) SetPlaybar(v bool) {
	o.Playbar = v
}

// GetPortrait returns the Portrait field value
func (o *PresetSettings) GetPortrait() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Portrait
}

// GetPortraitOk returns a tuple with the Portrait field value
// and a boolean to check if the value has been set.
func (o *PresetSettings) GetPortraitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Portrait, true
}

// SetPortrait sets field value
func (o *PresetSettings) SetPortrait(v string) {
	o.Portrait = v
}

// GetQualitySelector returns the QualitySelector field value
func (o *PresetSettings) GetQualitySelector() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.QualitySelector
}

// GetQualitySelectorOk returns a tuple with the QualitySelector field value
// and a boolean to check if the value has been set.
func (o *PresetSettings) GetQualitySelectorOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QualitySelector, true
}

// SetQualitySelector sets field value
func (o *PresetSettings) SetQualitySelector(v bool) {
	o.QualitySelector = v
}

// GetSpeed returns the Speed field value
func (o *PresetSettings) GetSpeed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Speed
}

// GetSpeedOk returns a tuple with the Speed field value
// and a boolean to check if the value has been set.
func (o *PresetSettings) GetSpeedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Speed, true
}

// SetSpeed sets field value
func (o *PresetSettings) SetSpeed(v bool) {
	o.Speed = v
}

// GetTitle returns the Title field value
func (o *PresetSettings) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *PresetSettings) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *PresetSettings) SetTitle(v string) {
	o.Title = v
}

// GetTranscript returns the Transcript field value
func (o *PresetSettings) GetTranscript() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Transcript
}

// GetTranscriptOk returns a tuple with the Transcript field value
// and a boolean to check if the value has been set.
func (o *PresetSettings) GetTranscriptOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Transcript, true
}

// SetTranscript sets field value
func (o *PresetSettings) SetTranscript(v bool) {
	o.Transcript = v
}

// GetVolume returns the Volume field value
func (o *PresetSettings) GetVolume() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Volume
}

// GetVolumeOk returns a tuple with the Volume field value
// and a boolean to check if the value has been set.
func (o *PresetSettings) GetVolumeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Volume, true
}

// SetVolume sets field value
func (o *PresetSettings) SetVolume(v bool) {
	o.Volume = v
}

func (o PresetSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PresetSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["airplay"] = o.Airplay
	toSerialize["audio_tracks"] = o.AudioTracks
	toSerialize["buttons"] = o.Buttons
	toSerialize["byline"] = o.Byline
	toSerialize["chapters"] = o.Chapters
	toSerialize["chromecast"] = o.Chromecast
	toSerialize["closed_captions"] = o.ClosedCaptions
	toSerialize["color"] = o.Color
	toSerialize["colors"] = o.Colors
	toSerialize["logos"] = o.Logos
	toSerialize["outro"] = o.Outro
	toSerialize["pip"] = o.Pip
	toSerialize["play_button"] = o.PlayButton
	toSerialize["playbar"] = o.Playbar
	toSerialize["portrait"] = o.Portrait
	toSerialize["quality_selector"] = o.QualitySelector
	toSerialize["speed"] = o.Speed
	toSerialize["title"] = o.Title
	toSerialize["transcript"] = o.Transcript
	toSerialize["volume"] = o.Volume
	return toSerialize, nil
}

func (o *PresetSettings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"airplay",
		"audio_tracks",
		"buttons",
		"byline",
		"chapters",
		"chromecast",
		"closed_captions",
		"color",
		"colors",
		"logos",
		"outro",
		"pip",
		"play_button",
		"playbar",
		"portrait",
		"quality_selector",
		"speed",
		"title",
		"transcript",
		"volume",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPresetSettings := _PresetSettings{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPresetSettings)

	if err != nil {
		return err
	}

	*o = PresetSettings(varPresetSettings)

	return err
}

type NullablePresetSettings struct {
	value *PresetSettings
	isSet bool
}

func (v NullablePresetSettings) Get() *PresetSettings {
	return v.value
}

func (v *NullablePresetSettings) Set(val *PresetSettings) {
	v.value = val
	v.isSet = true
}

func (v NullablePresetSettings) IsSet() bool {
	return v.isSet
}

func (v *NullablePresetSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePresetSettings(val *PresetSettings) *NullablePresetSettings {
	return &NullablePresetSettings{value: val, isSet: true}
}

func (v NullablePresetSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePresetSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


