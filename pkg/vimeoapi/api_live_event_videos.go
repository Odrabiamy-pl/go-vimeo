/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type LiveEventVideosAPI interface {

	/*
	AddVideosToLiveEvent Add a list of videos to a live event

	This method adds multiple videos to the specified event.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param liveEventId The ID of the event.
	@param userId The ID of the user.
	@return ApiAddVideosToLiveEventRequest
	*/
	AddVideosToLiveEvent(ctx context.Context, liveEventId float32, userId float32) ApiAddVideosToLiveEventRequest

	// AddVideosToLiveEventExecute executes the request
	AddVideosToLiveEventExecute(r ApiAddVideosToLiveEventRequest) (*http.Response, error)

	/*
	AddVideosToLiveEventAlt1 Add a list of videos to a live event

	This method adds multiple videos to the specified event.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param liveEventId The ID of the event.
	@return ApiAddVideosToLiveEventAlt1Request
	*/
	AddVideosToLiveEventAlt1(ctx context.Context, liveEventId float32) ApiAddVideosToLiveEventAlt1Request

	// AddVideosToLiveEventAlt1Execute executes the request
	AddVideosToLiveEventAlt1Execute(r ApiAddVideosToLiveEventAlt1Request) (*http.Response, error)

	/*
	AddVideosToLiveEventAlt2 Add a list of videos to a live event

	This method adds multiple videos to the specified event.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param liveEventId The ID of the event.
	@return ApiAddVideosToLiveEventAlt2Request
	*/
	AddVideosToLiveEventAlt2(ctx context.Context, liveEventId float32) ApiAddVideosToLiveEventAlt2Request

	// AddVideosToLiveEventAlt2Execute executes the request
	AddVideosToLiveEventAlt2Execute(r ApiAddVideosToLiveEventAlt2Request) (*http.Response, error)

	/*
	GetLiveEventVideo Get a specific video in a live event

	This method returns a single video in the specified event.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param liveEventId The ID of the event.
	@param userId The ID of the user.
	@param videoId The ID of the video.
	@return ApiGetLiveEventVideoRequest
	*/
	GetLiveEventVideo(ctx context.Context, liveEventId float32, userId float32, videoId float32) ApiGetLiveEventVideoRequest

	// GetLiveEventVideoExecute executes the request
	//  @return Video
	GetLiveEventVideoExecute(r ApiGetLiveEventVideoRequest) (*Video, *http.Response, error)

	/*
	GetLiveEventVideoAlt1 Get a specific video in a live event

	This method returns a single video in the specified event.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param liveEventId The ID of the event.
	@param videoId The ID of the video.
	@return ApiGetLiveEventVideoAlt1Request
	*/
	GetLiveEventVideoAlt1(ctx context.Context, liveEventId float32, videoId float32) ApiGetLiveEventVideoAlt1Request

	// GetLiveEventVideoAlt1Execute executes the request
	//  @return Video
	GetLiveEventVideoAlt1Execute(r ApiGetLiveEventVideoAlt1Request) (*Video, *http.Response, error)

	/*
	GetLiveEventVideoAlt2 Get a specific video in a live event

	This method returns a single video in the specified event.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param liveEventId The ID of the event.
	@param videoId The ID of the video.
	@return ApiGetLiveEventVideoAlt2Request
	*/
	GetLiveEventVideoAlt2(ctx context.Context, liveEventId float32, videoId float32) ApiGetLiveEventVideoAlt2Request

	// GetLiveEventVideoAlt2Execute executes the request
	//  @return Video
	GetLiveEventVideoAlt2Execute(r ApiGetLiveEventVideoAlt2Request) (*Video, *http.Response, error)

	/*
	GetLiveEventVideos Get all the videos in a live event

	This method returns every video in the specified event.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param liveEventId The ID of the event.
	@param userId The ID of the user.
	@return ApiGetLiveEventVideosRequest
	*/
	GetLiveEventVideos(ctx context.Context, liveEventId float32, userId float32) ApiGetLiveEventVideosRequest

	// GetLiveEventVideosExecute executes the request
	//  @return []Video
	GetLiveEventVideosExecute(r ApiGetLiveEventVideosRequest) ([]Video, *http.Response, error)

	/*
	GetLiveEventVideosAlt1 Get all the videos in a live event

	This method returns every video in the specified event.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param liveEventId The ID of the event.
	@return ApiGetLiveEventVideosAlt1Request
	*/
	GetLiveEventVideosAlt1(ctx context.Context, liveEventId float32) ApiGetLiveEventVideosAlt1Request

	// GetLiveEventVideosAlt1Execute executes the request
	//  @return []Video
	GetLiveEventVideosAlt1Execute(r ApiGetLiveEventVideosAlt1Request) ([]Video, *http.Response, error)

	/*
	GetLiveEventVideosAlt2 Get all the videos in a live event

	This method returns every video in the specified event.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param liveEventId The ID of the event.
	@return ApiGetLiveEventVideosAlt2Request
	*/
	GetLiveEventVideosAlt2(ctx context.Context, liveEventId float32) ApiGetLiveEventVideosAlt2Request

	// GetLiveEventVideosAlt2Execute executes the request
	//  @return []Video
	GetLiveEventVideosAlt2Execute(r ApiGetLiveEventVideosAlt2Request) ([]Video, *http.Response, error)

	/*
	RemoveVideosFromLiveEvent Remove a list of videos from a live event

	This method removes multiple videos from the specified event.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param liveEventId The ID of the event.
	@param userId The ID of the user.
	@return ApiRemoveVideosFromLiveEventRequest
	*/
	RemoveVideosFromLiveEvent(ctx context.Context, liveEventId float32, userId float32) ApiRemoveVideosFromLiveEventRequest

	// RemoveVideosFromLiveEventExecute executes the request
	RemoveVideosFromLiveEventExecute(r ApiRemoveVideosFromLiveEventRequest) (*http.Response, error)

	/*
	RemoveVideosFromLiveEventAlt1 Remove a list of videos from a live event

	This method removes multiple videos from the specified event.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param liveEventId The ID of the event.
	@return ApiRemoveVideosFromLiveEventAlt1Request
	*/
	RemoveVideosFromLiveEventAlt1(ctx context.Context, liveEventId float32) ApiRemoveVideosFromLiveEventAlt1Request

	// RemoveVideosFromLiveEventAlt1Execute executes the request
	RemoveVideosFromLiveEventAlt1Execute(r ApiRemoveVideosFromLiveEventAlt1Request) (*http.Response, error)

	/*
	RemoveVideosFromLiveEventAlt2 Remove a list of videos from a live event

	This method removes multiple videos from the specified event.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param liveEventId The ID of the event.
	@return ApiRemoveVideosFromLiveEventAlt2Request
	*/
	RemoveVideosFromLiveEventAlt2(ctx context.Context, liveEventId float32) ApiRemoveVideosFromLiveEventAlt2Request

	// RemoveVideosFromLiveEventAlt2Execute executes the request
	RemoveVideosFromLiveEventAlt2Execute(r ApiRemoveVideosFromLiveEventAlt2Request) (*http.Response, error)
}

// LiveEventVideosAPIService LiveEventVideosAPI service
type LiveEventVideosAPIService service

type ApiAddVideosToLiveEventRequest struct {
	ctx context.Context
	ApiService LiveEventVideosAPI
	liveEventId float32
	userId float32
	addVideosToLiveEventAlt1Request *AddVideosToLiveEventAlt1Request
}

func (r ApiAddVideosToLiveEventRequest) AddVideosToLiveEventAlt1Request(addVideosToLiveEventAlt1Request AddVideosToLiveEventAlt1Request) ApiAddVideosToLiveEventRequest {
	r.addVideosToLiveEventAlt1Request = &addVideosToLiveEventAlt1Request
	return r
}

func (r ApiAddVideosToLiveEventRequest) Execute() (*http.Response, error) {
	return r.ApiService.AddVideosToLiveEventExecute(r)
}

/*
AddVideosToLiveEvent Add a list of videos to a live event

This method adds multiple videos to the specified event.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param liveEventId The ID of the event.
 @param userId The ID of the user.
 @return ApiAddVideosToLiveEventRequest
*/
func (a *LiveEventVideosAPIService) AddVideosToLiveEvent(ctx context.Context, liveEventId float32, userId float32) ApiAddVideosToLiveEventRequest {
	return ApiAddVideosToLiveEventRequest{
		ApiService: a,
		ctx: ctx,
		liveEventId: liveEventId,
		userId: userId,
	}
}

// Execute executes the request
func (a *LiveEventVideosAPIService) AddVideosToLiveEventExecute(r ApiAddVideosToLiveEventRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LiveEventVideosAPIService.AddVideosToLiveEvent")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/live_events/{live_event_id}/videos"
	localVarPath = strings.Replace(localVarPath, "{"+"live_event_id"+"}", url.PathEscape(parameterValueToString(r.liveEventId, "liveEventId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addVideosToLiveEventAlt1Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAddVideosToLiveEventAlt1Request struct {
	ctx context.Context
	ApiService LiveEventVideosAPI
	liveEventId float32
	addVideosToLiveEventAlt1Request *AddVideosToLiveEventAlt1Request
}

func (r ApiAddVideosToLiveEventAlt1Request) AddVideosToLiveEventAlt1Request(addVideosToLiveEventAlt1Request AddVideosToLiveEventAlt1Request) ApiAddVideosToLiveEventAlt1Request {
	r.addVideosToLiveEventAlt1Request = &addVideosToLiveEventAlt1Request
	return r
}

func (r ApiAddVideosToLiveEventAlt1Request) Execute() (*http.Response, error) {
	return r.ApiService.AddVideosToLiveEventAlt1Execute(r)
}

/*
AddVideosToLiveEventAlt1 Add a list of videos to a live event

This method adds multiple videos to the specified event.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param liveEventId The ID of the event.
 @return ApiAddVideosToLiveEventAlt1Request
*/
func (a *LiveEventVideosAPIService) AddVideosToLiveEventAlt1(ctx context.Context, liveEventId float32) ApiAddVideosToLiveEventAlt1Request {
	return ApiAddVideosToLiveEventAlt1Request{
		ApiService: a,
		ctx: ctx,
		liveEventId: liveEventId,
	}
}

// Execute executes the request
func (a *LiveEventVideosAPIService) AddVideosToLiveEventAlt1Execute(r ApiAddVideosToLiveEventAlt1Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LiveEventVideosAPIService.AddVideosToLiveEventAlt1")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/live_events/{live_event_id}/videos"
	localVarPath = strings.Replace(localVarPath, "{"+"live_event_id"+"}", url.PathEscape(parameterValueToString(r.liveEventId, "liveEventId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addVideosToLiveEventAlt1Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAddVideosToLiveEventAlt2Request struct {
	ctx context.Context
	ApiService LiveEventVideosAPI
	liveEventId float32
	addVideosToLiveEventAlt1Request *AddVideosToLiveEventAlt1Request
}

func (r ApiAddVideosToLiveEventAlt2Request) AddVideosToLiveEventAlt1Request(addVideosToLiveEventAlt1Request AddVideosToLiveEventAlt1Request) ApiAddVideosToLiveEventAlt2Request {
	r.addVideosToLiveEventAlt1Request = &addVideosToLiveEventAlt1Request
	return r
}

func (r ApiAddVideosToLiveEventAlt2Request) Execute() (*http.Response, error) {
	return r.ApiService.AddVideosToLiveEventAlt2Execute(r)
}

/*
AddVideosToLiveEventAlt2 Add a list of videos to a live event

This method adds multiple videos to the specified event.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param liveEventId The ID of the event.
 @return ApiAddVideosToLiveEventAlt2Request
*/
func (a *LiveEventVideosAPIService) AddVideosToLiveEventAlt2(ctx context.Context, liveEventId float32) ApiAddVideosToLiveEventAlt2Request {
	return ApiAddVideosToLiveEventAlt2Request{
		ApiService: a,
		ctx: ctx,
		liveEventId: liveEventId,
	}
}

// Execute executes the request
func (a *LiveEventVideosAPIService) AddVideosToLiveEventAlt2Execute(r ApiAddVideosToLiveEventAlt2Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LiveEventVideosAPIService.AddVideosToLiveEventAlt2")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/live_events/{live_event_id}/videos"
	localVarPath = strings.Replace(localVarPath, "{"+"live_event_id"+"}", url.PathEscape(parameterValueToString(r.liveEventId, "liveEventId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addVideosToLiveEventAlt1Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetLiveEventVideoRequest struct {
	ctx context.Context
	ApiService LiveEventVideosAPI
	liveEventId float32
	userId float32
	videoId float32
}

func (r ApiGetLiveEventVideoRequest) Execute() (*Video, *http.Response, error) {
	return r.ApiService.GetLiveEventVideoExecute(r)
}

/*
GetLiveEventVideo Get a specific video in a live event

This method returns a single video in the specified event.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param liveEventId The ID of the event.
 @param userId The ID of the user.
 @param videoId The ID of the video.
 @return ApiGetLiveEventVideoRequest
*/
func (a *LiveEventVideosAPIService) GetLiveEventVideo(ctx context.Context, liveEventId float32, userId float32, videoId float32) ApiGetLiveEventVideoRequest {
	return ApiGetLiveEventVideoRequest{
		ApiService: a,
		ctx: ctx,
		liveEventId: liveEventId,
		userId: userId,
		videoId: videoId,
	}
}

// Execute executes the request
//  @return Video
func (a *LiveEventVideosAPIService) GetLiveEventVideoExecute(r ApiGetLiveEventVideoRequest) (*Video, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Video
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LiveEventVideosAPIService.GetLiveEventVideo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/live_events/{live_event_id}/videos/{video_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"live_event_id"+"}", url.PathEscape(parameterValueToString(r.liveEventId, "liveEventId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.video+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLiveEventVideoAlt1Request struct {
	ctx context.Context
	ApiService LiveEventVideosAPI
	liveEventId float32
	videoId float32
}

func (r ApiGetLiveEventVideoAlt1Request) Execute() (*Video, *http.Response, error) {
	return r.ApiService.GetLiveEventVideoAlt1Execute(r)
}

/*
GetLiveEventVideoAlt1 Get a specific video in a live event

This method returns a single video in the specified event.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param liveEventId The ID of the event.
 @param videoId The ID of the video.
 @return ApiGetLiveEventVideoAlt1Request
*/
func (a *LiveEventVideosAPIService) GetLiveEventVideoAlt1(ctx context.Context, liveEventId float32, videoId float32) ApiGetLiveEventVideoAlt1Request {
	return ApiGetLiveEventVideoAlt1Request{
		ApiService: a,
		ctx: ctx,
		liveEventId: liveEventId,
		videoId: videoId,
	}
}

// Execute executes the request
//  @return Video
func (a *LiveEventVideosAPIService) GetLiveEventVideoAlt1Execute(r ApiGetLiveEventVideoAlt1Request) (*Video, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Video
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LiveEventVideosAPIService.GetLiveEventVideoAlt1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/live_events/{live_event_id}/videos/{video_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"live_event_id"+"}", url.PathEscape(parameterValueToString(r.liveEventId, "liveEventId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.video+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLiveEventVideoAlt2Request struct {
	ctx context.Context
	ApiService LiveEventVideosAPI
	liveEventId float32
	videoId float32
}

func (r ApiGetLiveEventVideoAlt2Request) Execute() (*Video, *http.Response, error) {
	return r.ApiService.GetLiveEventVideoAlt2Execute(r)
}

/*
GetLiveEventVideoAlt2 Get a specific video in a live event

This method returns a single video in the specified event.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param liveEventId The ID of the event.
 @param videoId The ID of the video.
 @return ApiGetLiveEventVideoAlt2Request
*/
func (a *LiveEventVideosAPIService) GetLiveEventVideoAlt2(ctx context.Context, liveEventId float32, videoId float32) ApiGetLiveEventVideoAlt2Request {
	return ApiGetLiveEventVideoAlt2Request{
		ApiService: a,
		ctx: ctx,
		liveEventId: liveEventId,
		videoId: videoId,
	}
}

// Execute executes the request
//  @return Video
func (a *LiveEventVideosAPIService) GetLiveEventVideoAlt2Execute(r ApiGetLiveEventVideoAlt2Request) (*Video, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Video
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LiveEventVideosAPIService.GetLiveEventVideoAlt2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/live_events/{live_event_id}/videos/{video_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"live_event_id"+"}", url.PathEscape(parameterValueToString(r.liveEventId, "liveEventId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.video+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLiveEventVideosRequest struct {
	ctx context.Context
	ApiService LiveEventVideosAPI
	liveEventId float32
	userId float32
	containingUri *string
	direction *string
	filter *string
	filterEmbeddable *bool
	page *float32
	perPage *float32
	query *string
	sort *string
}

// The page that contains the video URI.
func (r ApiGetLiveEventVideosRequest) ContainingUri(containingUri string) ApiGetLiveEventVideosRequest {
	r.containingUri = &containingUri
	return r
}

// The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
func (r ApiGetLiveEventVideosRequest) Direction(direction string) ApiGetLiveEventVideosRequest {
	r.direction = &direction
	return r
}

// The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable events. 
func (r ApiGetLiveEventVideosRequest) Filter(filter string) ApiGetLiveEventVideosRequest {
	r.filter = &filter
	return r
}

// Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;.
func (r ApiGetLiveEventVideosRequest) FilterEmbeddable(filterEmbeddable bool) ApiGetLiveEventVideosRequest {
	r.filterEmbeddable = &filterEmbeddable
	return r
}

// The page number of the results to show.
func (r ApiGetLiveEventVideosRequest) Page(page float32) ApiGetLiveEventVideosRequest {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiGetLiveEventVideosRequest) PerPage(perPage float32) ApiGetLiveEventVideosRequest {
	r.perPage = &perPage
	return r
}

// The search query to use to filter the results.
func (r ApiGetLiveEventVideosRequest) Query(query string) ApiGetLiveEventVideosRequest {
	r.query = &query
	return r
}

// The way to sort the results.  Option descriptions:  * &#x60;added&#x60; - Sort the results by most recently added videos.  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;arranged&#x60; - Sort the results in the order that the user has arranged the videos.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by creation date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays. 
func (r ApiGetLiveEventVideosRequest) Sort(sort string) ApiGetLiveEventVideosRequest {
	r.sort = &sort
	return r
}

func (r ApiGetLiveEventVideosRequest) Execute() ([]Video, *http.Response, error) {
	return r.ApiService.GetLiveEventVideosExecute(r)
}

/*
GetLiveEventVideos Get all the videos in a live event

This method returns every video in the specified event.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param liveEventId The ID of the event.
 @param userId The ID of the user.
 @return ApiGetLiveEventVideosRequest
*/
func (a *LiveEventVideosAPIService) GetLiveEventVideos(ctx context.Context, liveEventId float32, userId float32) ApiGetLiveEventVideosRequest {
	return ApiGetLiveEventVideosRequest{
		ApiService: a,
		ctx: ctx,
		liveEventId: liveEventId,
		userId: userId,
	}
}

// Execute executes the request
//  @return []Video
func (a *LiveEventVideosAPIService) GetLiveEventVideosExecute(r ApiGetLiveEventVideosRequest) ([]Video, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Video
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LiveEventVideosAPIService.GetLiveEventVideos")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/live_events/{live_event_id}/videos"
	localVarPath = strings.Replace(localVarPath, "{"+"live_event_id"+"}", url.PathEscape(parameterValueToString(r.liveEventId, "liveEventId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.containingUri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "containing_uri", r.containingUri, "")
	}
	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.filterEmbeddable != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter_embeddable", r.filterEmbeddable, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	if r.query != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "query", r.query, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.video+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLiveEventVideosAlt1Request struct {
	ctx context.Context
	ApiService LiveEventVideosAPI
	liveEventId float32
	containingUri *string
	direction *string
	filter *string
	filterEmbeddable *bool
	page *float32
	perPage *float32
	query *string
	sort *string
}

// The page that contains the video URI.
func (r ApiGetLiveEventVideosAlt1Request) ContainingUri(containingUri string) ApiGetLiveEventVideosAlt1Request {
	r.containingUri = &containingUri
	return r
}

// The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
func (r ApiGetLiveEventVideosAlt1Request) Direction(direction string) ApiGetLiveEventVideosAlt1Request {
	r.direction = &direction
	return r
}

// The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable events. 
func (r ApiGetLiveEventVideosAlt1Request) Filter(filter string) ApiGetLiveEventVideosAlt1Request {
	r.filter = &filter
	return r
}

// Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;.
func (r ApiGetLiveEventVideosAlt1Request) FilterEmbeddable(filterEmbeddable bool) ApiGetLiveEventVideosAlt1Request {
	r.filterEmbeddable = &filterEmbeddable
	return r
}

// The page number of the results to show.
func (r ApiGetLiveEventVideosAlt1Request) Page(page float32) ApiGetLiveEventVideosAlt1Request {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiGetLiveEventVideosAlt1Request) PerPage(perPage float32) ApiGetLiveEventVideosAlt1Request {
	r.perPage = &perPage
	return r
}

// The search query to use to filter the results.
func (r ApiGetLiveEventVideosAlt1Request) Query(query string) ApiGetLiveEventVideosAlt1Request {
	r.query = &query
	return r
}

// The way to sort the results.  Option descriptions:  * &#x60;added&#x60; - Sort the results by most recently added videos.  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;arranged&#x60; - Sort the results in the order that the user has arranged the videos.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by creation date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays. 
func (r ApiGetLiveEventVideosAlt1Request) Sort(sort string) ApiGetLiveEventVideosAlt1Request {
	r.sort = &sort
	return r
}

func (r ApiGetLiveEventVideosAlt1Request) Execute() ([]Video, *http.Response, error) {
	return r.ApiService.GetLiveEventVideosAlt1Execute(r)
}

/*
GetLiveEventVideosAlt1 Get all the videos in a live event

This method returns every video in the specified event.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param liveEventId The ID of the event.
 @return ApiGetLiveEventVideosAlt1Request
*/
func (a *LiveEventVideosAPIService) GetLiveEventVideosAlt1(ctx context.Context, liveEventId float32) ApiGetLiveEventVideosAlt1Request {
	return ApiGetLiveEventVideosAlt1Request{
		ApiService: a,
		ctx: ctx,
		liveEventId: liveEventId,
	}
}

// Execute executes the request
//  @return []Video
func (a *LiveEventVideosAPIService) GetLiveEventVideosAlt1Execute(r ApiGetLiveEventVideosAlt1Request) ([]Video, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Video
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LiveEventVideosAPIService.GetLiveEventVideosAlt1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/live_events/{live_event_id}/videos"
	localVarPath = strings.Replace(localVarPath, "{"+"live_event_id"+"}", url.PathEscape(parameterValueToString(r.liveEventId, "liveEventId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.containingUri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "containing_uri", r.containingUri, "")
	}
	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.filterEmbeddable != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter_embeddable", r.filterEmbeddable, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	if r.query != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "query", r.query, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.video+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLiveEventVideosAlt2Request struct {
	ctx context.Context
	ApiService LiveEventVideosAPI
	liveEventId float32
	containingUri *string
	direction *string
	filter *string
	filterEmbeddable *bool
	page *float32
	perPage *float32
	query *string
	sort *string
}

// The page that contains the video URI.
func (r ApiGetLiveEventVideosAlt2Request) ContainingUri(containingUri string) ApiGetLiveEventVideosAlt2Request {
	r.containingUri = &containingUri
	return r
}

// The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
func (r ApiGetLiveEventVideosAlt2Request) Direction(direction string) ApiGetLiveEventVideosAlt2Request {
	r.direction = &direction
	return r
}

// The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable events. 
func (r ApiGetLiveEventVideosAlt2Request) Filter(filter string) ApiGetLiveEventVideosAlt2Request {
	r.filter = &filter
	return r
}

// Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;.
func (r ApiGetLiveEventVideosAlt2Request) FilterEmbeddable(filterEmbeddable bool) ApiGetLiveEventVideosAlt2Request {
	r.filterEmbeddable = &filterEmbeddable
	return r
}

// The page number of the results to show.
func (r ApiGetLiveEventVideosAlt2Request) Page(page float32) ApiGetLiveEventVideosAlt2Request {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiGetLiveEventVideosAlt2Request) PerPage(perPage float32) ApiGetLiveEventVideosAlt2Request {
	r.perPage = &perPage
	return r
}

// The search query to use to filter the results.
func (r ApiGetLiveEventVideosAlt2Request) Query(query string) ApiGetLiveEventVideosAlt2Request {
	r.query = &query
	return r
}

// The way to sort the results.  Option descriptions:  * &#x60;added&#x60; - Sort the results by most recently added videos.  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;arranged&#x60; - Sort the results in the order that the user has arranged the videos.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by creation date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays. 
func (r ApiGetLiveEventVideosAlt2Request) Sort(sort string) ApiGetLiveEventVideosAlt2Request {
	r.sort = &sort
	return r
}

func (r ApiGetLiveEventVideosAlt2Request) Execute() ([]Video, *http.Response, error) {
	return r.ApiService.GetLiveEventVideosAlt2Execute(r)
}

/*
GetLiveEventVideosAlt2 Get all the videos in a live event

This method returns every video in the specified event.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param liveEventId The ID of the event.
 @return ApiGetLiveEventVideosAlt2Request
*/
func (a *LiveEventVideosAPIService) GetLiveEventVideosAlt2(ctx context.Context, liveEventId float32) ApiGetLiveEventVideosAlt2Request {
	return ApiGetLiveEventVideosAlt2Request{
		ApiService: a,
		ctx: ctx,
		liveEventId: liveEventId,
	}
}

// Execute executes the request
//  @return []Video
func (a *LiveEventVideosAPIService) GetLiveEventVideosAlt2Execute(r ApiGetLiveEventVideosAlt2Request) ([]Video, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Video
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LiveEventVideosAPIService.GetLiveEventVideosAlt2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/live_events/{live_event_id}/videos"
	localVarPath = strings.Replace(localVarPath, "{"+"live_event_id"+"}", url.PathEscape(parameterValueToString(r.liveEventId, "liveEventId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.containingUri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "containing_uri", r.containingUri, "")
	}
	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.filterEmbeddable != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter_embeddable", r.filterEmbeddable, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	if r.query != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "query", r.query, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.video+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRemoveVideosFromLiveEventRequest struct {
	ctx context.Context
	ApiService LiveEventVideosAPI
	liveEventId float32
	userId float32
	removeVideosFromLiveEventAlt1Request *RemoveVideosFromLiveEventAlt1Request
}

func (r ApiRemoveVideosFromLiveEventRequest) RemoveVideosFromLiveEventAlt1Request(removeVideosFromLiveEventAlt1Request RemoveVideosFromLiveEventAlt1Request) ApiRemoveVideosFromLiveEventRequest {
	r.removeVideosFromLiveEventAlt1Request = &removeVideosFromLiveEventAlt1Request
	return r
}

func (r ApiRemoveVideosFromLiveEventRequest) Execute() (*http.Response, error) {
	return r.ApiService.RemoveVideosFromLiveEventExecute(r)
}

/*
RemoveVideosFromLiveEvent Remove a list of videos from a live event

This method removes multiple videos from the specified event.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param liveEventId The ID of the event.
 @param userId The ID of the user.
 @return ApiRemoveVideosFromLiveEventRequest
*/
func (a *LiveEventVideosAPIService) RemoveVideosFromLiveEvent(ctx context.Context, liveEventId float32, userId float32) ApiRemoveVideosFromLiveEventRequest {
	return ApiRemoveVideosFromLiveEventRequest{
		ApiService: a,
		ctx: ctx,
		liveEventId: liveEventId,
		userId: userId,
	}
}

// Execute executes the request
func (a *LiveEventVideosAPIService) RemoveVideosFromLiveEventExecute(r ApiRemoveVideosFromLiveEventRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LiveEventVideosAPIService.RemoveVideosFromLiveEvent")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/live_events/{live_event_id}/videos"
	localVarPath = strings.Replace(localVarPath, "{"+"live_event_id"+"}", url.PathEscape(parameterValueToString(r.liveEventId, "liveEventId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.removeVideosFromLiveEventAlt1Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiRemoveVideosFromLiveEventAlt1Request struct {
	ctx context.Context
	ApiService LiveEventVideosAPI
	liveEventId float32
	removeVideosFromLiveEventAlt1Request *RemoveVideosFromLiveEventAlt1Request
}

func (r ApiRemoveVideosFromLiveEventAlt1Request) RemoveVideosFromLiveEventAlt1Request(removeVideosFromLiveEventAlt1Request RemoveVideosFromLiveEventAlt1Request) ApiRemoveVideosFromLiveEventAlt1Request {
	r.removeVideosFromLiveEventAlt1Request = &removeVideosFromLiveEventAlt1Request
	return r
}

func (r ApiRemoveVideosFromLiveEventAlt1Request) Execute() (*http.Response, error) {
	return r.ApiService.RemoveVideosFromLiveEventAlt1Execute(r)
}

/*
RemoveVideosFromLiveEventAlt1 Remove a list of videos from a live event

This method removes multiple videos from the specified event.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param liveEventId The ID of the event.
 @return ApiRemoveVideosFromLiveEventAlt1Request
*/
func (a *LiveEventVideosAPIService) RemoveVideosFromLiveEventAlt1(ctx context.Context, liveEventId float32) ApiRemoveVideosFromLiveEventAlt1Request {
	return ApiRemoveVideosFromLiveEventAlt1Request{
		ApiService: a,
		ctx: ctx,
		liveEventId: liveEventId,
	}
}

// Execute executes the request
func (a *LiveEventVideosAPIService) RemoveVideosFromLiveEventAlt1Execute(r ApiRemoveVideosFromLiveEventAlt1Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LiveEventVideosAPIService.RemoveVideosFromLiveEventAlt1")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/live_events/{live_event_id}/videos"
	localVarPath = strings.Replace(localVarPath, "{"+"live_event_id"+"}", url.PathEscape(parameterValueToString(r.liveEventId, "liveEventId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.removeVideosFromLiveEventAlt1Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiRemoveVideosFromLiveEventAlt2Request struct {
	ctx context.Context
	ApiService LiveEventVideosAPI
	liveEventId float32
	removeVideosFromLiveEventAlt1Request *RemoveVideosFromLiveEventAlt1Request
}

func (r ApiRemoveVideosFromLiveEventAlt2Request) RemoveVideosFromLiveEventAlt1Request(removeVideosFromLiveEventAlt1Request RemoveVideosFromLiveEventAlt1Request) ApiRemoveVideosFromLiveEventAlt2Request {
	r.removeVideosFromLiveEventAlt1Request = &removeVideosFromLiveEventAlt1Request
	return r
}

func (r ApiRemoveVideosFromLiveEventAlt2Request) Execute() (*http.Response, error) {
	return r.ApiService.RemoveVideosFromLiveEventAlt2Execute(r)
}

/*
RemoveVideosFromLiveEventAlt2 Remove a list of videos from a live event

This method removes multiple videos from the specified event.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param liveEventId The ID of the event.
 @return ApiRemoveVideosFromLiveEventAlt2Request
*/
func (a *LiveEventVideosAPIService) RemoveVideosFromLiveEventAlt2(ctx context.Context, liveEventId float32) ApiRemoveVideosFromLiveEventAlt2Request {
	return ApiRemoveVideosFromLiveEventAlt2Request{
		ApiService: a,
		ctx: ctx,
		liveEventId: liveEventId,
	}
}

// Execute executes the request
func (a *LiveEventVideosAPIService) RemoveVideosFromLiveEventAlt2Execute(r ApiRemoveVideosFromLiveEventAlt2Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LiveEventVideosAPIService.RemoveVideosFromLiveEventAlt2")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/live_events/{live_event_id}/videos"
	localVarPath = strings.Replace(localVarPath, "{"+"live_event_id"+"}", url.PathEscape(parameterValueToString(r.liveEventId, "liveEventId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.removeVideosFromLiveEventAlt1Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
