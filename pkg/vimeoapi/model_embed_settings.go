/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EmbedSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmbedSettings{}

// EmbedSettings struct for EmbedSettings
type EmbedSettings struct {
	// Whether AirPlay is enabled in the embeddable player.
	Airplay bool `json:"airplay"`
	// Whether multiple audio tracks can appear in the embeddable player.
	AudioTracks bool `json:"audio_tracks"`
	// Whether automatic picture-in-picture is enabled.
	Autopip bool `json:"autopip"`
	Badges EmbedSettingsBadges `json:"badges"`
	Buttons EmbedSettingsButtons `json:"buttons"`
	// A collection of cards associated with the selected video.
	Cards []EmbedSettingsCardsInner `json:"cards"`
	// Whether chapters are enabled in the embeddable player.
	Chapters bool `json:"chapters"`
	// Whether the Chromecast button appears in the embeddable player.
	Chromecast bool `json:"chromecast"`
	// Whether closed captions are enabled in the embeddable player.
	ClosedCaptions bool `json:"closed_captions"`
	// The first player color, which controls the color of the progress bar, buttons, and more.
	Color string `json:"color"`
	Colors EmbedSettingsColors `json:"colors"`
	// The email capture form settings associated with the video.
	EmailCaptureForm EmailCaptureForm `json:"email_capture_form"`
	EndScreen EmbedSettingsEndScreen `json:"end_screen"`
	// Whether the embedded player should display the event schedule.
	EventSchedule bool `json:"event_schedule"`
	// Whether the video has cards.
	HasCards bool `json:"has_cards"`
	// The HTML code for embedding the video on a web page.
	Html *string `json:"html,omitempty"`
	// Whether the video is an interactive video.
	Interactive bool `json:"interactive"`
	Logos EmbedSettingsLogos `json:"logos"`
	// The type of the video outro.  Option descriptions:  * `beginning` - The outro is a thumbnail.  * `custom` - The outro is custom.  * `email` - The outro is an email form.  * `image` - The outro is an image.  * `link` - The outro is a link.  * `loop` - The outro is a loop.  * `nothing` - There is no outro.  * `share` - The outro is a share button.  * `text` - The outro is text.  * `threevideos` - The outro is three video suggestions.  * `videos` - The outro is video suggestions. 
	OutroType string `json:"outro_type"`
	// Whether picture-in-picture is enabled and the button appears in the embeddable player.
	Pip bool `json:"pip"`
	PlayButton EmbedSettingsPlayButton `json:"play_button"`
	// Whether the playbar appears in the embeddable player.
	Playbar bool `json:"playbar"`
	// Whether the quality selector appears in the embeddable player.
	QualitySelector bool `json:"quality_selector"`
	// Whether the embedded player should display the schedule timezone.
	ShowTimezone bool `json:"show_timezone"`
	// Whether the speed controls appear in the embeddable player.
	Speed bool `json:"speed"`
	Title EmbedSettingsTitle `json:"title"`
	// Whether the transcript controls appear in the embeddable player.
	Transcript bool `json:"transcript"`
	// The URI of the embed preset.
	Uri *string `json:"uri,omitempty"`
	// Whether the volume controls appear in the embeddable player.
	Volume bool `json:"volume"`
}

type _EmbedSettings EmbedSettings

// NewEmbedSettings instantiates a new EmbedSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmbedSettings(airplay bool, audioTracks bool, autopip bool, badges EmbedSettingsBadges, buttons EmbedSettingsButtons, cards []EmbedSettingsCardsInner, chapters bool, chromecast bool, closedCaptions bool, color string, colors EmbedSettingsColors, emailCaptureForm EmailCaptureForm, endScreen EmbedSettingsEndScreen, eventSchedule bool, hasCards bool, interactive bool, logos EmbedSettingsLogos, outroType string, pip bool, playButton EmbedSettingsPlayButton, playbar bool, qualitySelector bool, showTimezone bool, speed bool, title EmbedSettingsTitle, transcript bool, volume bool) *EmbedSettings {
	this := EmbedSettings{}
	this.Airplay = airplay
	this.AudioTracks = audioTracks
	this.Autopip = autopip
	this.Badges = badges
	this.Buttons = buttons
	this.Cards = cards
	this.Chapters = chapters
	this.Chromecast = chromecast
	this.ClosedCaptions = closedCaptions
	this.Color = color
	this.Colors = colors
	this.EmailCaptureForm = emailCaptureForm
	this.EndScreen = endScreen
	this.EventSchedule = eventSchedule
	this.HasCards = hasCards
	this.Interactive = interactive
	this.Logos = logos
	this.OutroType = outroType
	this.Pip = pip
	this.PlayButton = playButton
	this.Playbar = playbar
	this.QualitySelector = qualitySelector
	this.ShowTimezone = showTimezone
	this.Speed = speed
	this.Title = title
	this.Transcript = transcript
	this.Volume = volume
	return &this
}

// NewEmbedSettingsWithDefaults instantiates a new EmbedSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmbedSettingsWithDefaults() *EmbedSettings {
	this := EmbedSettings{}
	return &this
}

// GetAirplay returns the Airplay field value
func (o *EmbedSettings) GetAirplay() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Airplay
}

// GetAirplayOk returns a tuple with the Airplay field value
// and a boolean to check if the value has been set.
func (o *EmbedSettings) GetAirplayOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Airplay, true
}

// SetAirplay sets field value
func (o *EmbedSettings) SetAirplay(v bool) {
	o.Airplay = v
}

// GetAudioTracks returns the AudioTracks field value
func (o *EmbedSettings) GetAudioTracks() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AudioTracks
}

// GetAudioTracksOk returns a tuple with the AudioTracks field value
// and a boolean to check if the value has been set.
func (o *EmbedSettings) GetAudioTracksOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AudioTracks, true
}

// SetAudioTracks sets field value
func (o *EmbedSettings) SetAudioTracks(v bool) {
	o.AudioTracks = v
}

// GetAutopip returns the Autopip field value
func (o *EmbedSettings) GetAutopip() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Autopip
}

// GetAutopipOk returns a tuple with the Autopip field value
// and a boolean to check if the value has been set.
func (o *EmbedSettings) GetAutopipOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Autopip, true
}

// SetAutopip sets field value
func (o *EmbedSettings) SetAutopip(v bool) {
	o.Autopip = v
}

// GetBadges returns the Badges field value
func (o *EmbedSettings) GetBadges() EmbedSettingsBadges {
	if o == nil {
		var ret EmbedSettingsBadges
		return ret
	}

	return o.Badges
}

// GetBadgesOk returns a tuple with the Badges field value
// and a boolean to check if the value has been set.
func (o *EmbedSettings) GetBadgesOk() (*EmbedSettingsBadges, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Badges, true
}

// SetBadges sets field value
func (o *EmbedSettings) SetBadges(v EmbedSettingsBadges) {
	o.Badges = v
}

// GetButtons returns the Buttons field value
func (o *EmbedSettings) GetButtons() EmbedSettingsButtons {
	if o == nil {
		var ret EmbedSettingsButtons
		return ret
	}

	return o.Buttons
}

// GetButtonsOk returns a tuple with the Buttons field value
// and a boolean to check if the value has been set.
func (o *EmbedSettings) GetButtonsOk() (*EmbedSettingsButtons, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Buttons, true
}

// SetButtons sets field value
func (o *EmbedSettings) SetButtons(v EmbedSettingsButtons) {
	o.Buttons = v
}

// GetCards returns the Cards field value
func (o *EmbedSettings) GetCards() []EmbedSettingsCardsInner {
	if o == nil {
		var ret []EmbedSettingsCardsInner
		return ret
	}

	return o.Cards
}

// GetCardsOk returns a tuple with the Cards field value
// and a boolean to check if the value has been set.
func (o *EmbedSettings) GetCardsOk() ([]EmbedSettingsCardsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cards, true
}

// SetCards sets field value
func (o *EmbedSettings) SetCards(v []EmbedSettingsCardsInner) {
	o.Cards = v
}

// GetChapters returns the Chapters field value
func (o *EmbedSettings) GetChapters() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Chapters
}

// GetChaptersOk returns a tuple with the Chapters field value
// and a boolean to check if the value has been set.
func (o *EmbedSettings) GetChaptersOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Chapters, true
}

// SetChapters sets field value
func (o *EmbedSettings) SetChapters(v bool) {
	o.Chapters = v
}

// GetChromecast returns the Chromecast field value
func (o *EmbedSettings) GetChromecast() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Chromecast
}

// GetChromecastOk returns a tuple with the Chromecast field value
// and a boolean to check if the value has been set.
func (o *EmbedSettings) GetChromecastOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Chromecast, true
}

// SetChromecast sets field value
func (o *EmbedSettings) SetChromecast(v bool) {
	o.Chromecast = v
}

// GetClosedCaptions returns the ClosedCaptions field value
func (o *EmbedSettings) GetClosedCaptions() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ClosedCaptions
}

// GetClosedCaptionsOk returns a tuple with the ClosedCaptions field value
// and a boolean to check if the value has been set.
func (o *EmbedSettings) GetClosedCaptionsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClosedCaptions, true
}

// SetClosedCaptions sets field value
func (o *EmbedSettings) SetClosedCaptions(v bool) {
	o.ClosedCaptions = v
}

// GetColor returns the Color field value
func (o *EmbedSettings) GetColor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Color
}

// GetColorOk returns a tuple with the Color field value
// and a boolean to check if the value has been set.
func (o *EmbedSettings) GetColorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Color, true
}

// SetColor sets field value
func (o *EmbedSettings) SetColor(v string) {
	o.Color = v
}

// GetColors returns the Colors field value
func (o *EmbedSettings) GetColors() EmbedSettingsColors {
	if o == nil {
		var ret EmbedSettingsColors
		return ret
	}

	return o.Colors
}

// GetColorsOk returns a tuple with the Colors field value
// and a boolean to check if the value has been set.
func (o *EmbedSettings) GetColorsOk() (*EmbedSettingsColors, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Colors, true
}

// SetColors sets field value
func (o *EmbedSettings) SetColors(v EmbedSettingsColors) {
	o.Colors = v
}

// GetEmailCaptureForm returns the EmailCaptureForm field value
func (o *EmbedSettings) GetEmailCaptureForm() EmailCaptureForm {
	if o == nil {
		var ret EmailCaptureForm
		return ret
	}

	return o.EmailCaptureForm
}

// GetEmailCaptureFormOk returns a tuple with the EmailCaptureForm field value
// and a boolean to check if the value has been set.
func (o *EmbedSettings) GetEmailCaptureFormOk() (*EmailCaptureForm, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EmailCaptureForm, true
}

// SetEmailCaptureForm sets field value
func (o *EmbedSettings) SetEmailCaptureForm(v EmailCaptureForm) {
	o.EmailCaptureForm = v
}

// GetEndScreen returns the EndScreen field value
func (o *EmbedSettings) GetEndScreen() EmbedSettingsEndScreen {
	if o == nil {
		var ret EmbedSettingsEndScreen
		return ret
	}

	return o.EndScreen
}

// GetEndScreenOk returns a tuple with the EndScreen field value
// and a boolean to check if the value has been set.
func (o *EmbedSettings) GetEndScreenOk() (*EmbedSettingsEndScreen, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndScreen, true
}

// SetEndScreen sets field value
func (o *EmbedSettings) SetEndScreen(v EmbedSettingsEndScreen) {
	o.EndScreen = v
}

// GetEventSchedule returns the EventSchedule field value
func (o *EmbedSettings) GetEventSchedule() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.EventSchedule
}

// GetEventScheduleOk returns a tuple with the EventSchedule field value
// and a boolean to check if the value has been set.
func (o *EmbedSettings) GetEventScheduleOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventSchedule, true
}

// SetEventSchedule sets field value
func (o *EmbedSettings) SetEventSchedule(v bool) {
	o.EventSchedule = v
}

// GetHasCards returns the HasCards field value
func (o *EmbedSettings) GetHasCards() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasCards
}

// GetHasCardsOk returns a tuple with the HasCards field value
// and a boolean to check if the value has been set.
func (o *EmbedSettings) GetHasCardsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasCards, true
}

// SetHasCards sets field value
func (o *EmbedSettings) SetHasCards(v bool) {
	o.HasCards = v
}

// GetHtml returns the Html field value if set, zero value otherwise.
func (o *EmbedSettings) GetHtml() string {
	if o == nil || IsNil(o.Html) {
		var ret string
		return ret
	}
	return *o.Html
}

// GetHtmlOk returns a tuple with the Html field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbedSettings) GetHtmlOk() (*string, bool) {
	if o == nil || IsNil(o.Html) {
		return nil, false
	}
	return o.Html, true
}

// HasHtml returns a boolean if a field has been set.
func (o *EmbedSettings) HasHtml() bool {
	if o != nil && !IsNil(o.Html) {
		return true
	}

	return false
}

// SetHtml gets a reference to the given string and assigns it to the Html field.
func (o *EmbedSettings) SetHtml(v string) {
	o.Html = &v
}

// GetInteractive returns the Interactive field value
func (o *EmbedSettings) GetInteractive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Interactive
}

// GetInteractiveOk returns a tuple with the Interactive field value
// and a boolean to check if the value has been set.
func (o *EmbedSettings) GetInteractiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Interactive, true
}

// SetInteractive sets field value
func (o *EmbedSettings) SetInteractive(v bool) {
	o.Interactive = v
}

// GetLogos returns the Logos field value
func (o *EmbedSettings) GetLogos() EmbedSettingsLogos {
	if o == nil {
		var ret EmbedSettingsLogos
		return ret
	}

	return o.Logos
}

// GetLogosOk returns a tuple with the Logos field value
// and a boolean to check if the value has been set.
func (o *EmbedSettings) GetLogosOk() (*EmbedSettingsLogos, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Logos, true
}

// SetLogos sets field value
func (o *EmbedSettings) SetLogos(v EmbedSettingsLogos) {
	o.Logos = v
}

// GetOutroType returns the OutroType field value
func (o *EmbedSettings) GetOutroType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OutroType
}

// GetOutroTypeOk returns a tuple with the OutroType field value
// and a boolean to check if the value has been set.
func (o *EmbedSettings) GetOutroTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OutroType, true
}

// SetOutroType sets field value
func (o *EmbedSettings) SetOutroType(v string) {
	o.OutroType = v
}

// GetPip returns the Pip field value
func (o *EmbedSettings) GetPip() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Pip
}

// GetPipOk returns a tuple with the Pip field value
// and a boolean to check if the value has been set.
func (o *EmbedSettings) GetPipOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pip, true
}

// SetPip sets field value
func (o *EmbedSettings) SetPip(v bool) {
	o.Pip = v
}

// GetPlayButton returns the PlayButton field value
func (o *EmbedSettings) GetPlayButton() EmbedSettingsPlayButton {
	if o == nil {
		var ret EmbedSettingsPlayButton
		return ret
	}

	return o.PlayButton
}

// GetPlayButtonOk returns a tuple with the PlayButton field value
// and a boolean to check if the value has been set.
func (o *EmbedSettings) GetPlayButtonOk() (*EmbedSettingsPlayButton, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlayButton, true
}

// SetPlayButton sets field value
func (o *EmbedSettings) SetPlayButton(v EmbedSettingsPlayButton) {
	o.PlayButton = v
}

// GetPlaybar returns the Playbar field value
func (o *EmbedSettings) GetPlaybar() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Playbar
}

// GetPlaybarOk returns a tuple with the Playbar field value
// and a boolean to check if the value has been set.
func (o *EmbedSettings) GetPlaybarOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Playbar, true
}

// SetPlaybar sets field value
func (o *EmbedSettings) SetPlaybar(v bool) {
	o.Playbar = v
}

// GetQualitySelector returns the QualitySelector field value
func (o *EmbedSettings) GetQualitySelector() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.QualitySelector
}

// GetQualitySelectorOk returns a tuple with the QualitySelector field value
// and a boolean to check if the value has been set.
func (o *EmbedSettings) GetQualitySelectorOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QualitySelector, true
}

// SetQualitySelector sets field value
func (o *EmbedSettings) SetQualitySelector(v bool) {
	o.QualitySelector = v
}

// GetShowTimezone returns the ShowTimezone field value
func (o *EmbedSettings) GetShowTimezone() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ShowTimezone
}

// GetShowTimezoneOk returns a tuple with the ShowTimezone field value
// and a boolean to check if the value has been set.
func (o *EmbedSettings) GetShowTimezoneOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShowTimezone, true
}

// SetShowTimezone sets field value
func (o *EmbedSettings) SetShowTimezone(v bool) {
	o.ShowTimezone = v
}

// GetSpeed returns the Speed field value
func (o *EmbedSettings) GetSpeed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Speed
}

// GetSpeedOk returns a tuple with the Speed field value
// and a boolean to check if the value has been set.
func (o *EmbedSettings) GetSpeedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Speed, true
}

// SetSpeed sets field value
func (o *EmbedSettings) SetSpeed(v bool) {
	o.Speed = v
}

// GetTitle returns the Title field value
func (o *EmbedSettings) GetTitle() EmbedSettingsTitle {
	if o == nil {
		var ret EmbedSettingsTitle
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *EmbedSettings) GetTitleOk() (*EmbedSettingsTitle, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *EmbedSettings) SetTitle(v EmbedSettingsTitle) {
	o.Title = v
}

// GetTranscript returns the Transcript field value
func (o *EmbedSettings) GetTranscript() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Transcript
}

// GetTranscriptOk returns a tuple with the Transcript field value
// and a boolean to check if the value has been set.
func (o *EmbedSettings) GetTranscriptOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Transcript, true
}

// SetTranscript sets field value
func (o *EmbedSettings) SetTranscript(v bool) {
	o.Transcript = v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *EmbedSettings) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbedSettings) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *EmbedSettings) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *EmbedSettings) SetUri(v string) {
	o.Uri = &v
}

// GetVolume returns the Volume field value
func (o *EmbedSettings) GetVolume() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Volume
}

// GetVolumeOk returns a tuple with the Volume field value
// and a boolean to check if the value has been set.
func (o *EmbedSettings) GetVolumeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Volume, true
}

// SetVolume sets field value
func (o *EmbedSettings) SetVolume(v bool) {
	o.Volume = v
}

func (o EmbedSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmbedSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["airplay"] = o.Airplay
	toSerialize["audio_tracks"] = o.AudioTracks
	toSerialize["autopip"] = o.Autopip
	toSerialize["badges"] = o.Badges
	toSerialize["buttons"] = o.Buttons
	toSerialize["cards"] = o.Cards
	toSerialize["chapters"] = o.Chapters
	toSerialize["chromecast"] = o.Chromecast
	toSerialize["closed_captions"] = o.ClosedCaptions
	toSerialize["color"] = o.Color
	toSerialize["colors"] = o.Colors
	toSerialize["email_capture_form"] = o.EmailCaptureForm
	toSerialize["end_screen"] = o.EndScreen
	toSerialize["event_schedule"] = o.EventSchedule
	toSerialize["has_cards"] = o.HasCards
	if !IsNil(o.Html) {
		toSerialize["html"] = o.Html
	}
	toSerialize["interactive"] = o.Interactive
	toSerialize["logos"] = o.Logos
	toSerialize["outro_type"] = o.OutroType
	toSerialize["pip"] = o.Pip
	toSerialize["play_button"] = o.PlayButton
	toSerialize["playbar"] = o.Playbar
	toSerialize["quality_selector"] = o.QualitySelector
	toSerialize["show_timezone"] = o.ShowTimezone
	toSerialize["speed"] = o.Speed
	toSerialize["title"] = o.Title
	toSerialize["transcript"] = o.Transcript
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	toSerialize["volume"] = o.Volume
	return toSerialize, nil
}

func (o *EmbedSettings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"airplay",
		"audio_tracks",
		"autopip",
		"badges",
		"buttons",
		"cards",
		"chapters",
		"chromecast",
		"closed_captions",
		"color",
		"colors",
		"email_capture_form",
		"end_screen",
		"event_schedule",
		"has_cards",
		"interactive",
		"logos",
		"outro_type",
		"pip",
		"play_button",
		"playbar",
		"quality_selector",
		"show_timezone",
		"speed",
		"title",
		"transcript",
		"volume",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmbedSettings := _EmbedSettings{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEmbedSettings)

	if err != nil {
		return err
	}

	*o = EmbedSettings(varEmbedSettings)

	return err
}

type NullableEmbedSettings struct {
	value *EmbedSettings
	isSet bool
}

func (v NullableEmbedSettings) Get() *EmbedSettings {
	return v.value
}

func (v *NullableEmbedSettings) Set(val *EmbedSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbedSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbedSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbedSettings(val *EmbedSettings) *NullableEmbedSettings {
	return &NullableEmbedSettings{value: val, isSet: true}
}

func (v NullableEmbedSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbedSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


