/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AddVideosToChannelRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddVideosToChannelRequest{}

// AddVideosToChannelRequest struct for AddVideosToChannelRequest
type AddVideosToChannelRequest struct {
	// A member of an array representing the URIs of the videos to add. For each member in the array, use the format `{\"video_uri\":\"x\"}` where **x** is a video URI. For more information on batch requests like this, see [Using Common Formats and Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests).
	VideoUri string `json:"video_uri"`
}

type _AddVideosToChannelRequest AddVideosToChannelRequest

// NewAddVideosToChannelRequest instantiates a new AddVideosToChannelRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddVideosToChannelRequest(videoUri string) *AddVideosToChannelRequest {
	this := AddVideosToChannelRequest{}
	this.VideoUri = videoUri
	return &this
}

// NewAddVideosToChannelRequestWithDefaults instantiates a new AddVideosToChannelRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddVideosToChannelRequestWithDefaults() *AddVideosToChannelRequest {
	this := AddVideosToChannelRequest{}
	return &this
}

// GetVideoUri returns the VideoUri field value
func (o *AddVideosToChannelRequest) GetVideoUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VideoUri
}

// GetVideoUriOk returns a tuple with the VideoUri field value
// and a boolean to check if the value has been set.
func (o *AddVideosToChannelRequest) GetVideoUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VideoUri, true
}

// SetVideoUri sets field value
func (o *AddVideosToChannelRequest) SetVideoUri(v string) {
	o.VideoUri = v
}

func (o AddVideosToChannelRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddVideosToChannelRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["video_uri"] = o.VideoUri
	return toSerialize, nil
}

func (o *AddVideosToChannelRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"video_uri",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddVideosToChannelRequest := _AddVideosToChannelRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddVideosToChannelRequest)

	if err != nil {
		return err
	}

	*o = AddVideosToChannelRequest(varAddVideosToChannelRequest)

	return err
}

type NullableAddVideosToChannelRequest struct {
	value *AddVideosToChannelRequest
	isSet bool
}

func (v NullableAddVideosToChannelRequest) Get() *AddVideosToChannelRequest {
	return v.value
}

func (v *NullableAddVideosToChannelRequest) Set(val *AddVideosToChannelRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddVideosToChannelRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddVideosToChannelRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddVideosToChannelRequest(val *AddVideosToChannelRequest) *NullableAddVideosToChannelRequest {
	return &NullableAddVideosToChannelRequest{value: val, isSet: true}
}

func (v NullableAddVideosToChannelRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddVideosToChannelRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


