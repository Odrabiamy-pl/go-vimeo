/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AuthError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthError{}

// AuthError struct for AuthError
type AuthError struct {
	// The name of the error.
	Error string `json:"error"`
	// The description of the error.
	ErrorDescription string `json:"error_description"`
}

type _AuthError AuthError

// NewAuthError instantiates a new AuthError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthError(error_ string, errorDescription string) *AuthError {
	this := AuthError{}
	this.Error = error_
	this.ErrorDescription = errorDescription
	return &this
}

// NewAuthErrorWithDefaults instantiates a new AuthError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthErrorWithDefaults() *AuthError {
	this := AuthError{}
	return &this
}

// GetError returns the Error field value
func (o *AuthError) GetError() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Error
}

// GetErrorOk returns a tuple with the Error field value
// and a boolean to check if the value has been set.
func (o *AuthError) GetErrorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Error, true
}

// SetError sets field value
func (o *AuthError) SetError(v string) {
	o.Error = v
}

// GetErrorDescription returns the ErrorDescription field value
func (o *AuthError) GetErrorDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ErrorDescription
}

// GetErrorDescriptionOk returns a tuple with the ErrorDescription field value
// and a boolean to check if the value has been set.
func (o *AuthError) GetErrorDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorDescription, true
}

// SetErrorDescription sets field value
func (o *AuthError) SetErrorDescription(v string) {
	o.ErrorDescription = v
}

func (o AuthError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["error"] = o.Error
	toSerialize["error_description"] = o.ErrorDescription
	return toSerialize, nil
}

func (o *AuthError) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"error",
		"error_description",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuthError := _AuthError{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAuthError)

	if err != nil {
		return err
	}

	*o = AuthError(varAuthError)

	return err
}

type NullableAuthError struct {
	value *AuthError
	isSet bool
}

func (v NullableAuthError) Get() *AuthError {
	return v.value
}

func (v *NullableAuthError) Set(val *AuthError) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthError) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthError(val *AuthError) *NullableAuthError {
	return &NullableAuthError{value: val, isSet: true}
}

func (v NullableAuthError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


