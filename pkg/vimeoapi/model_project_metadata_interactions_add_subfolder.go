/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the ProjectMetadataInteractionsAddSubfolder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectMetadataInteractionsAddSubfolder{}

// ProjectMetadataInteractionsAddSubfolder Information about adding a subfolder to the current folder.
type ProjectMetadataInteractionsAddSubfolder struct {
	// Whether the folder can contain a subfolder.
	CanAddSubfolders bool `json:"can_add_subfolders"`
	// The subfolder content type.
	ContentType *string `json:"content_type,omitempty"`
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options,omitempty"`
	// Properties that can be added to the request body.
	Properties []map[string]interface{} `json:"properties,omitempty"`
	// Whether the user has reached the maximum subfolder depth.
	SubfolderDepthLimitReached bool `json:"subfolder_depth_limit_reached"`
	// The API URI that resolves to the connection data.
	Uri *string `json:"uri,omitempty"`
}

// NewProjectMetadataInteractionsAddSubfolder instantiates a new ProjectMetadataInteractionsAddSubfolder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectMetadataInteractionsAddSubfolder(canAddSubfolders bool, subfolderDepthLimitReached bool) *ProjectMetadataInteractionsAddSubfolder {
	this := ProjectMetadataInteractionsAddSubfolder{}
	this.CanAddSubfolders = canAddSubfolders
	this.SubfolderDepthLimitReached = subfolderDepthLimitReached
	return &this
}

// NewProjectMetadataInteractionsAddSubfolderWithDefaults instantiates a new ProjectMetadataInteractionsAddSubfolder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectMetadataInteractionsAddSubfolderWithDefaults() *ProjectMetadataInteractionsAddSubfolder {
	this := ProjectMetadataInteractionsAddSubfolder{}
	return &this
}

// GetCanAddSubfolders returns the CanAddSubfolders field value
func (o *ProjectMetadataInteractionsAddSubfolder) GetCanAddSubfolders() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CanAddSubfolders
}

// GetCanAddSubfoldersOk returns a tuple with the CanAddSubfolders field value
// and a boolean to check if the value has been set.
func (o *ProjectMetadataInteractionsAddSubfolder) GetCanAddSubfoldersOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CanAddSubfolders, true
}

// SetCanAddSubfolders sets field value
func (o *ProjectMetadataInteractionsAddSubfolder) SetCanAddSubfolders(v bool) {
	o.CanAddSubfolders = v
}

// GetContentType returns the ContentType field value if set, zero value otherwise.
func (o *ProjectMetadataInteractionsAddSubfolder) GetContentType() string {
	if o == nil || IsNil(o.ContentType) {
		var ret string
		return ret
	}
	return *o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectMetadataInteractionsAddSubfolder) GetContentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ContentType) {
		return nil, false
	}
	return o.ContentType, true
}

// HasContentType returns a boolean if a field has been set.
func (o *ProjectMetadataInteractionsAddSubfolder) HasContentType() bool {
	if o != nil && !IsNil(o.ContentType) {
		return true
	}

	return false
}

// SetContentType gets a reference to the given string and assigns it to the ContentType field.
func (o *ProjectMetadataInteractionsAddSubfolder) SetContentType(v string) {
	o.ContentType = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *ProjectMetadataInteractionsAddSubfolder) GetOptions() []string {
	if o == nil || IsNil(o.Options) {
		var ret []string
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectMetadataInteractionsAddSubfolder) GetOptionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *ProjectMetadataInteractionsAddSubfolder) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []string and assigns it to the Options field.
func (o *ProjectMetadataInteractionsAddSubfolder) SetOptions(v []string) {
	o.Options = v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *ProjectMetadataInteractionsAddSubfolder) GetProperties() []map[string]interface{} {
	if o == nil || IsNil(o.Properties) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectMetadataInteractionsAddSubfolder) GetPropertiesOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *ProjectMetadataInteractionsAddSubfolder) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given []map[string]interface{} and assigns it to the Properties field.
func (o *ProjectMetadataInteractionsAddSubfolder) SetProperties(v []map[string]interface{}) {
	o.Properties = v
}

// GetSubfolderDepthLimitReached returns the SubfolderDepthLimitReached field value
func (o *ProjectMetadataInteractionsAddSubfolder) GetSubfolderDepthLimitReached() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SubfolderDepthLimitReached
}

// GetSubfolderDepthLimitReachedOk returns a tuple with the SubfolderDepthLimitReached field value
// and a boolean to check if the value has been set.
func (o *ProjectMetadataInteractionsAddSubfolder) GetSubfolderDepthLimitReachedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubfolderDepthLimitReached, true
}

// SetSubfolderDepthLimitReached sets field value
func (o *ProjectMetadataInteractionsAddSubfolder) SetSubfolderDepthLimitReached(v bool) {
	o.SubfolderDepthLimitReached = v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *ProjectMetadataInteractionsAddSubfolder) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectMetadataInteractionsAddSubfolder) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *ProjectMetadataInteractionsAddSubfolder) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *ProjectMetadataInteractionsAddSubfolder) SetUri(v string) {
	o.Uri = &v
}

func (o ProjectMetadataInteractionsAddSubfolder) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectMetadataInteractionsAddSubfolder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["can_add_subfolders"] = o.CanAddSubfolders
	if !IsNil(o.ContentType) {
		toSerialize["content_type"] = o.ContentType
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	toSerialize["subfolder_depth_limit_reached"] = o.SubfolderDepthLimitReached
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	return toSerialize, nil
}

type NullableProjectMetadataInteractionsAddSubfolder struct {
	value *ProjectMetadataInteractionsAddSubfolder
	isSet bool
}

func (v NullableProjectMetadataInteractionsAddSubfolder) Get() *ProjectMetadataInteractionsAddSubfolder {
	return v.value
}

func (v *NullableProjectMetadataInteractionsAddSubfolder) Set(val *ProjectMetadataInteractionsAddSubfolder) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectMetadataInteractionsAddSubfolder) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectMetadataInteractionsAddSubfolder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectMetadataInteractionsAddSubfolder(val *ProjectMetadataInteractionsAddSubfolder) *NullableProjectMetadataInteractionsAddSubfolder {
	return &NullableProjectMetadataInteractionsAddSubfolder{value: val, isSet: true}
}

func (v NullableProjectMetadataInteractionsAddSubfolder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectMetadataInteractionsAddSubfolder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


