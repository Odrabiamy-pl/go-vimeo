/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the RemoveVideosFromChannelRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemoveVideosFromChannelRequest{}

// RemoveVideosFromChannelRequest struct for RemoveVideosFromChannelRequest
type RemoveVideosFromChannelRequest struct {
	// The URI of a video to remove.
	VideoUri string `json:"video_uri"`
}

// NewRemoveVideosFromChannelRequest instantiates a new RemoveVideosFromChannelRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoveVideosFromChannelRequest(videoUri string) *RemoveVideosFromChannelRequest {
	this := RemoveVideosFromChannelRequest{}
	this.VideoUri = videoUri
	return &this
}

// NewRemoveVideosFromChannelRequestWithDefaults instantiates a new RemoveVideosFromChannelRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoveVideosFromChannelRequestWithDefaults() *RemoveVideosFromChannelRequest {
	this := RemoveVideosFromChannelRequest{}
	return &this
}

// GetVideoUri returns the VideoUri field value
func (o *RemoveVideosFromChannelRequest) GetVideoUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VideoUri
}

// GetVideoUriOk returns a tuple with the VideoUri field value
// and a boolean to check if the value has been set.
func (o *RemoveVideosFromChannelRequest) GetVideoUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VideoUri, true
}

// SetVideoUri sets field value
func (o *RemoveVideosFromChannelRequest) SetVideoUri(v string) {
	o.VideoUri = v
}

func (o RemoveVideosFromChannelRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemoveVideosFromChannelRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["video_uri"] = o.VideoUri
	return toSerialize, nil
}

type NullableRemoveVideosFromChannelRequest struct {
	value *RemoveVideosFromChannelRequest
	isSet bool
}

func (v NullableRemoveVideosFromChannelRequest) Get() *RemoveVideosFromChannelRequest {
	return v.value
}

func (v *NullableRemoveVideosFromChannelRequest) Set(val *RemoveVideosFromChannelRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoveVideosFromChannelRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoveVideosFromChannelRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoveVideosFromChannelRequest(val *RemoveVideosFromChannelRequest) *NullableRemoveVideosFromChannelRequest {
	return &NullableRemoveVideosFromChannelRequest{value: val, isSet: true}
}

func (v NullableRemoveVideosFromChannelRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoveVideosFromChannelRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
