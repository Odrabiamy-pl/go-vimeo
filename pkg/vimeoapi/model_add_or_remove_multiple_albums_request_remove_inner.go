/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the AddOrRemoveMultipleAlbumsRequestRemoveInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddOrRemoveMultipleAlbumsRequestRemoveInner{}

// AddOrRemoveMultipleAlbumsRequestRemoveInner struct for AddOrRemoveMultipleAlbumsRequestRemoveInner
type AddOrRemoveMultipleAlbumsRequestRemoveInner struct {
	// The showcase URI to remove the video from.
	Uri *string `json:"uri,omitempty"`
}

// NewAddOrRemoveMultipleAlbumsRequestRemoveInner instantiates a new AddOrRemoveMultipleAlbumsRequestRemoveInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddOrRemoveMultipleAlbumsRequestRemoveInner() *AddOrRemoveMultipleAlbumsRequestRemoveInner {
	this := AddOrRemoveMultipleAlbumsRequestRemoveInner{}
	return &this
}

// NewAddOrRemoveMultipleAlbumsRequestRemoveInnerWithDefaults instantiates a new AddOrRemoveMultipleAlbumsRequestRemoveInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddOrRemoveMultipleAlbumsRequestRemoveInnerWithDefaults() *AddOrRemoveMultipleAlbumsRequestRemoveInner {
	this := AddOrRemoveMultipleAlbumsRequestRemoveInner{}
	return &this
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *AddOrRemoveMultipleAlbumsRequestRemoveInner) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddOrRemoveMultipleAlbumsRequestRemoveInner) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *AddOrRemoveMultipleAlbumsRequestRemoveInner) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *AddOrRemoveMultipleAlbumsRequestRemoveInner) SetUri(v string) {
	o.Uri = &v
}

func (o AddOrRemoveMultipleAlbumsRequestRemoveInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddOrRemoveMultipleAlbumsRequestRemoveInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	return toSerialize, nil
}

type NullableAddOrRemoveMultipleAlbumsRequestRemoveInner struct {
	value *AddOrRemoveMultipleAlbumsRequestRemoveInner
	isSet bool
}

func (v NullableAddOrRemoveMultipleAlbumsRequestRemoveInner) Get() *AddOrRemoveMultipleAlbumsRequestRemoveInner {
	return v.value
}

func (v *NullableAddOrRemoveMultipleAlbumsRequestRemoveInner) Set(val *AddOrRemoveMultipleAlbumsRequestRemoveInner) {
	v.value = val
	v.isSet = true
}

func (v NullableAddOrRemoveMultipleAlbumsRequestRemoveInner) IsSet() bool {
	return v.isSet
}

func (v *NullableAddOrRemoveMultipleAlbumsRequestRemoveInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddOrRemoveMultipleAlbumsRequestRemoveInner(val *AddOrRemoveMultipleAlbumsRequestRemoveInner) *NullableAddOrRemoveMultipleAlbumsRequestRemoveInner {
	return &NullableAddOrRemoveMultipleAlbumsRequestRemoveInner{value: val, isSet: true}
}

func (v NullableAddOrRemoveMultipleAlbumsRequestRemoveInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddOrRemoveMultipleAlbumsRequestRemoveInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
