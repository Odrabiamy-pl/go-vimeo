/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type LiveEmbedPrivacyAPI interface {

	/*
		GetLiveEventWhitelist Get all the domains on which a live event can be embedded

		This method returns every whitelisted domain for an event. The embed privacy setting must be `whitelist`.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param liveEventId The ID of the event.
		@param userId The ID of the user.
		@return ApiGetLiveEventWhitelistRequest
	*/
	GetLiveEventWhitelist(ctx context.Context, liveEventId float32, userId int32) ApiGetLiveEventWhitelistRequest

	// GetLiveEventWhitelistExecute executes the request
	//  @return []Domain
	GetLiveEventWhitelistExecute(r ApiGetLiveEventWhitelistRequest) ([]Domain, *http.Response, error)

	/*
		GetLiveEventWhitelistAlt1 Get all the domains on which a live event can be embedded

		This method returns every whitelisted domain for an event. The embed privacy setting must be `whitelist`.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param liveEventId The ID of the event.
		@return ApiGetLiveEventWhitelistAlt1Request
	*/
	GetLiveEventWhitelistAlt1(ctx context.Context, liveEventId float32) ApiGetLiveEventWhitelistAlt1Request

	// GetLiveEventWhitelistAlt1Execute executes the request
	//  @return []Domain
	GetLiveEventWhitelistAlt1Execute(r ApiGetLiveEventWhitelistAlt1Request) ([]Domain, *http.Response, error)

	/*
		GetLiveEventWhitelistAlt2 Get all the domains on which a live event can be embedded

		This method returns every whitelisted domain for an event. The embed privacy setting must be `whitelist`.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param liveEventId The ID of the event.
		@return ApiGetLiveEventWhitelistAlt2Request
	*/
	GetLiveEventWhitelistAlt2(ctx context.Context, liveEventId float32) ApiGetLiveEventWhitelistAlt2Request

	// GetLiveEventWhitelistAlt2Execute executes the request
	//  @return []Domain
	GetLiveEventWhitelistAlt2Execute(r ApiGetLiveEventWhitelistAlt2Request) ([]Domain, *http.Response, error)

	/*
		SetLiveEventWhitelist Embed a live event on one or more domains

		This method embeds an event on the specified domains. The embed privacy setting must be `whitelist`.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param liveEventId The ID of the event.
		@param userId The ID of the user.
		@return ApiSetLiveEventWhitelistRequest
	*/
	SetLiveEventWhitelist(ctx context.Context, liveEventId float32, userId int32) ApiSetLiveEventWhitelistRequest

	// SetLiveEventWhitelistExecute executes the request
	SetLiveEventWhitelistExecute(r ApiSetLiveEventWhitelistRequest) (*http.Response, error)

	/*
		SetLiveEventWhitelistAlt1 Embed a live event on one or more domains

		This method embeds an event on the specified domains. The embed privacy setting must be `whitelist`.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param liveEventId The ID of the event.
		@return ApiSetLiveEventWhitelistAlt1Request
	*/
	SetLiveEventWhitelistAlt1(ctx context.Context, liveEventId float32) ApiSetLiveEventWhitelistAlt1Request

	// SetLiveEventWhitelistAlt1Execute executes the request
	SetLiveEventWhitelistAlt1Execute(r ApiSetLiveEventWhitelistAlt1Request) (*http.Response, error)

	/*
		SetLiveEventWhitelistAlt2 Embed a live event on one or more domains

		This method embeds an event on the specified domains. The embed privacy setting must be `whitelist`.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param liveEventId The ID of the event.
		@return ApiSetLiveEventWhitelistAlt2Request
	*/
	SetLiveEventWhitelistAlt2(ctx context.Context, liveEventId float32) ApiSetLiveEventWhitelistAlt2Request

	// SetLiveEventWhitelistAlt2Execute executes the request
	SetLiveEventWhitelistAlt2Execute(r ApiSetLiveEventWhitelistAlt2Request) (*http.Response, error)
}

// LiveEmbedPrivacyAPIService LiveEmbedPrivacyAPI service
type LiveEmbedPrivacyAPIService service

type ApiGetLiveEventWhitelistRequest struct {
	ctx         context.Context
	ApiService  LiveEmbedPrivacyAPI
	liveEventId float32
	userId      int32
}

func (r ApiGetLiveEventWhitelistRequest) Execute() ([]Domain, *http.Response, error) {
	return r.ApiService.GetLiveEventWhitelistExecute(r)
}

/*
GetLiveEventWhitelist Get all the domains on which a live event can be embedded

This method returns every whitelisted domain for an event. The embed privacy setting must be `whitelist`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param liveEventId The ID of the event.
	@param userId The ID of the user.
	@return ApiGetLiveEventWhitelistRequest
*/
func (a *LiveEmbedPrivacyAPIService) GetLiveEventWhitelist(ctx context.Context, liveEventId float32, userId int32) ApiGetLiveEventWhitelistRequest {
	return ApiGetLiveEventWhitelistRequest{
		ApiService:  a,
		ctx:         ctx,
		liveEventId: liveEventId,
		userId:      userId,
	}
}

// Execute executes the request
//
//	@return []Domain
func (a *LiveEmbedPrivacyAPIService) GetLiveEventWhitelistExecute(r ApiGetLiveEventWhitelistRequest) ([]Domain, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Domain
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LiveEmbedPrivacyAPIService.GetLiveEventWhitelist")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/live_events/{live_event_id}/privacy/domains"
	localVarPath = strings.Replace(localVarPath, "{"+"live_event_id"+"}", url.PathEscape(parameterValueToString(r.liveEventId, "liveEventId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.domain+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLiveEventWhitelistAlt1Request struct {
	ctx         context.Context
	ApiService  LiveEmbedPrivacyAPI
	liveEventId float32
}

func (r ApiGetLiveEventWhitelistAlt1Request) Execute() ([]Domain, *http.Response, error) {
	return r.ApiService.GetLiveEventWhitelistAlt1Execute(r)
}

/*
GetLiveEventWhitelistAlt1 Get all the domains on which a live event can be embedded

This method returns every whitelisted domain for an event. The embed privacy setting must be `whitelist`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param liveEventId The ID of the event.
	@return ApiGetLiveEventWhitelistAlt1Request
*/
func (a *LiveEmbedPrivacyAPIService) GetLiveEventWhitelistAlt1(ctx context.Context, liveEventId float32) ApiGetLiveEventWhitelistAlt1Request {
	return ApiGetLiveEventWhitelistAlt1Request{
		ApiService:  a,
		ctx:         ctx,
		liveEventId: liveEventId,
	}
}

// Execute executes the request
//
//	@return []Domain
func (a *LiveEmbedPrivacyAPIService) GetLiveEventWhitelistAlt1Execute(r ApiGetLiveEventWhitelistAlt1Request) ([]Domain, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Domain
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LiveEmbedPrivacyAPIService.GetLiveEventWhitelistAlt1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/live_events/{live_event_id}/privacy/domains"
	localVarPath = strings.Replace(localVarPath, "{"+"live_event_id"+"}", url.PathEscape(parameterValueToString(r.liveEventId, "liveEventId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.domain+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLiveEventWhitelistAlt2Request struct {
	ctx         context.Context
	ApiService  LiveEmbedPrivacyAPI
	liveEventId float32
}

func (r ApiGetLiveEventWhitelistAlt2Request) Execute() ([]Domain, *http.Response, error) {
	return r.ApiService.GetLiveEventWhitelistAlt2Execute(r)
}

/*
GetLiveEventWhitelistAlt2 Get all the domains on which a live event can be embedded

This method returns every whitelisted domain for an event. The embed privacy setting must be `whitelist`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param liveEventId The ID of the event.
	@return ApiGetLiveEventWhitelistAlt2Request
*/
func (a *LiveEmbedPrivacyAPIService) GetLiveEventWhitelistAlt2(ctx context.Context, liveEventId float32) ApiGetLiveEventWhitelistAlt2Request {
	return ApiGetLiveEventWhitelistAlt2Request{
		ApiService:  a,
		ctx:         ctx,
		liveEventId: liveEventId,
	}
}

// Execute executes the request
//
//	@return []Domain
func (a *LiveEmbedPrivacyAPIService) GetLiveEventWhitelistAlt2Execute(r ApiGetLiveEventWhitelistAlt2Request) ([]Domain, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Domain
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LiveEmbedPrivacyAPIService.GetLiveEventWhitelistAlt2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/live_events/{live_event_id}/privacy/domains"
	localVarPath = strings.Replace(localVarPath, "{"+"live_event_id"+"}", url.PathEscape(parameterValueToString(r.liveEventId, "liveEventId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.domain+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSetLiveEventWhitelistRequest struct {
	ctx                              context.Context
	ApiService                       LiveEmbedPrivacyAPI
	liveEventId                      float32
	userId                           int32
	setLiveEventWhitelistAlt1Request *SetLiveEventWhitelistAlt1Request
}

func (r ApiSetLiveEventWhitelistRequest) SetLiveEventWhitelistAlt1Request(setLiveEventWhitelistAlt1Request SetLiveEventWhitelistAlt1Request) ApiSetLiveEventWhitelistRequest {
	r.setLiveEventWhitelistAlt1Request = &setLiveEventWhitelistAlt1Request
	return r
}

func (r ApiSetLiveEventWhitelistRequest) Execute() (*http.Response, error) {
	return r.ApiService.SetLiveEventWhitelistExecute(r)
}

/*
SetLiveEventWhitelist Embed a live event on one or more domains

This method embeds an event on the specified domains. The embed privacy setting must be `whitelist`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param liveEventId The ID of the event.
	@param userId The ID of the user.
	@return ApiSetLiveEventWhitelistRequest
*/
func (a *LiveEmbedPrivacyAPIService) SetLiveEventWhitelist(ctx context.Context, liveEventId float32, userId int32) ApiSetLiveEventWhitelistRequest {
	return ApiSetLiveEventWhitelistRequest{
		ApiService:  a,
		ctx:         ctx,
		liveEventId: liveEventId,
		userId:      userId,
	}
}

// Execute executes the request
func (a *LiveEmbedPrivacyAPIService) SetLiveEventWhitelistExecute(r ApiSetLiveEventWhitelistRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LiveEmbedPrivacyAPIService.SetLiveEventWhitelist")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/live_events/{live_event_id}/privacy/domains"
	localVarPath = strings.Replace(localVarPath, "{"+"live_event_id"+"}", url.PathEscape(parameterValueToString(r.liveEventId, "liveEventId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.setLiveEventWhitelistAlt1Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSetLiveEventWhitelistAlt1Request struct {
	ctx                              context.Context
	ApiService                       LiveEmbedPrivacyAPI
	liveEventId                      float32
	setLiveEventWhitelistAlt1Request *SetLiveEventWhitelistAlt1Request
}

func (r ApiSetLiveEventWhitelistAlt1Request) SetLiveEventWhitelistAlt1Request(setLiveEventWhitelistAlt1Request SetLiveEventWhitelistAlt1Request) ApiSetLiveEventWhitelistAlt1Request {
	r.setLiveEventWhitelistAlt1Request = &setLiveEventWhitelistAlt1Request
	return r
}

func (r ApiSetLiveEventWhitelistAlt1Request) Execute() (*http.Response, error) {
	return r.ApiService.SetLiveEventWhitelistAlt1Execute(r)
}

/*
SetLiveEventWhitelistAlt1 Embed a live event on one or more domains

This method embeds an event on the specified domains. The embed privacy setting must be `whitelist`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param liveEventId The ID of the event.
	@return ApiSetLiveEventWhitelistAlt1Request
*/
func (a *LiveEmbedPrivacyAPIService) SetLiveEventWhitelistAlt1(ctx context.Context, liveEventId float32) ApiSetLiveEventWhitelistAlt1Request {
	return ApiSetLiveEventWhitelistAlt1Request{
		ApiService:  a,
		ctx:         ctx,
		liveEventId: liveEventId,
	}
}

// Execute executes the request
func (a *LiveEmbedPrivacyAPIService) SetLiveEventWhitelistAlt1Execute(r ApiSetLiveEventWhitelistAlt1Request) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LiveEmbedPrivacyAPIService.SetLiveEventWhitelistAlt1")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/live_events/{live_event_id}/privacy/domains"
	localVarPath = strings.Replace(localVarPath, "{"+"live_event_id"+"}", url.PathEscape(parameterValueToString(r.liveEventId, "liveEventId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.setLiveEventWhitelistAlt1Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSetLiveEventWhitelistAlt2Request struct {
	ctx                              context.Context
	ApiService                       LiveEmbedPrivacyAPI
	liveEventId                      float32
	setLiveEventWhitelistAlt1Request *SetLiveEventWhitelistAlt1Request
}

func (r ApiSetLiveEventWhitelistAlt2Request) SetLiveEventWhitelistAlt1Request(setLiveEventWhitelistAlt1Request SetLiveEventWhitelistAlt1Request) ApiSetLiveEventWhitelistAlt2Request {
	r.setLiveEventWhitelistAlt1Request = &setLiveEventWhitelistAlt1Request
	return r
}

func (r ApiSetLiveEventWhitelistAlt2Request) Execute() (*http.Response, error) {
	return r.ApiService.SetLiveEventWhitelistAlt2Execute(r)
}

/*
SetLiveEventWhitelistAlt2 Embed a live event on one or more domains

This method embeds an event on the specified domains. The embed privacy setting must be `whitelist`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param liveEventId The ID of the event.
	@return ApiSetLiveEventWhitelistAlt2Request
*/
func (a *LiveEmbedPrivacyAPIService) SetLiveEventWhitelistAlt2(ctx context.Context, liveEventId float32) ApiSetLiveEventWhitelistAlt2Request {
	return ApiSetLiveEventWhitelistAlt2Request{
		ApiService:  a,
		ctx:         ctx,
		liveEventId: liveEventId,
	}
}

// Execute executes the request
func (a *LiveEmbedPrivacyAPIService) SetLiveEventWhitelistAlt2Execute(r ApiSetLiveEventWhitelistAlt2Request) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LiveEmbedPrivacyAPIService.SetLiveEventWhitelistAlt2")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/live_events/{live_event_id}/privacy/domains"
	localVarPath = strings.Replace(localVarPath, "{"+"live_event_id"+"}", url.PathEscape(parameterValueToString(r.liveEventId, "liveEventId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.setLiveEventWhitelistAlt1Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
