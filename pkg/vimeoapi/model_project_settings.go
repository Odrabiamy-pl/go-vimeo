/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the ProjectSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectSettings{}

// ProjectSettings The settings of the folder.
type ProjectSettings struct {
	// The hexadecimal code of the folder color.
	Color string `json:"color"`
	// The URI of the folder.
	FolderUri NullableString `json:"folder_uri"`
}

// NewProjectSettings instantiates a new ProjectSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectSettings(color string, folderUri NullableString) *ProjectSettings {
	this := ProjectSettings{}
	this.Color = color
	this.FolderUri = folderUri
	return &this
}

// NewProjectSettingsWithDefaults instantiates a new ProjectSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectSettingsWithDefaults() *ProjectSettings {
	this := ProjectSettings{}
	return &this
}

// GetColor returns the Color field value
func (o *ProjectSettings) GetColor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Color
}

// GetColorOk returns a tuple with the Color field value
// and a boolean to check if the value has been set.
func (o *ProjectSettings) GetColorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Color, true
}

// SetColor sets field value
func (o *ProjectSettings) SetColor(v string) {
	o.Color = v
}

// GetFolderUri returns the FolderUri field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ProjectSettings) GetFolderUri() string {
	if o == nil || o.FolderUri.Get() == nil {
		var ret string
		return ret
	}

	return *o.FolderUri.Get()
}

// GetFolderUriOk returns a tuple with the FolderUri field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectSettings) GetFolderUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FolderUri.Get(), o.FolderUri.IsSet()
}

// SetFolderUri sets field value
func (o *ProjectSettings) SetFolderUri(v string) {
	o.FolderUri.Set(&v)
}

func (o ProjectSettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["color"] = o.Color
	toSerialize["folder_uri"] = o.FolderUri.Get()
	return toSerialize, nil
}

type NullableProjectSettings struct {
	value *ProjectSettings
	isSet bool
}

func (v NullableProjectSettings) Get() *ProjectSettings {
	return v.value
}

func (v *NullableProjectSettings) Set(val *ProjectSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectSettings(val *ProjectSettings) *NullableProjectSettings {
	return &NullableProjectSettings{value: val, isSet: true}
}

func (v NullableProjectSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
