/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type OnDemandGenresAPI interface {

	/*
		AddVodGenre Add a genre to an On Demand page

		This method adds the specified genre designation to an On Demand page. A page can be associated with a maximum of two genres. The authenticated user must be the owner of the page.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param genreId The ID of the genre.
		@param ondemandId The ID of the On Demand page.
		@return ApiAddVodGenreRequest
	*/
	AddVodGenre(ctx context.Context, genreId string, ondemandId float32) ApiAddVodGenreRequest

	// AddVodGenreExecute executes the request
	//  @return OnDemandGenre
	AddVodGenreExecute(r ApiAddVodGenreRequest) (*OnDemandGenre, *http.Response, error)

	/*
		DeleteVodGenre Remove a genre from an On Demand page

		This method removes a genre association from the specified On Demand page. The authenticated user must be the owner of the page.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param genreId The ID of the genre.
		@param ondemandId The ID of the On Demand page.
		@return ApiDeleteVodGenreRequest
	*/
	DeleteVodGenre(ctx context.Context, genreId string, ondemandId float32) ApiDeleteVodGenreRequest

	// DeleteVodGenreExecute executes the request
	DeleteVodGenreExecute(r ApiDeleteVodGenreRequest) (*http.Response, error)

	/*
		GetGenreVod Get a specific On Demand page in a genre

		This method returns a single On Demand page that belongs to the specified genre.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param genreId The ID of the genre.
		@param ondemandId The ID of the On Demand page.
		@return ApiGetGenreVodRequest
	*/
	GetGenreVod(ctx context.Context, genreId string, ondemandId float32) ApiGetGenreVodRequest

	// GetGenreVodExecute executes the request
	//  @return OnDemandPage
	GetGenreVodExecute(r ApiGetGenreVodRequest) (*OnDemandPage, *http.Response, error)

	/*
		GetGenreVods Get all the On Demand pages in a genre

		This method returns every On Demand page that belongs to the specified genre.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param genreId The ID of the genre.
		@return ApiGetGenreVodsRequest
	*/
	GetGenreVods(ctx context.Context, genreId string) ApiGetGenreVodsRequest

	// GetGenreVodsExecute executes the request
	//  @return []OnDemandPage
	GetGenreVodsExecute(r ApiGetGenreVodsRequest) ([]OnDemandPage, *http.Response, error)

	/*
		GetVodGenre Get a specific On Demand genre

		This method returns a single On Demand genre.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param genreId The ID of the genre.
		@return ApiGetVodGenreRequest
	*/
	GetVodGenre(ctx context.Context, genreId string) ApiGetVodGenreRequest

	// GetVodGenreExecute executes the request
	//  @return OnDemandGenre
	GetVodGenreExecute(r ApiGetVodGenreRequest) (*OnDemandGenre, *http.Response, error)

	/*
		GetVodGenreByOndemandId Check whether an On Demand page belongs to a specific genre

		This method determines whether an On Demand page is associated with the specified genre.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param genreId The ID of the genre.
		@param ondemandId The ID of the On Demand page.
		@return ApiGetVodGenreByOndemandIdRequest
	*/
	GetVodGenreByOndemandId(ctx context.Context, genreId string, ondemandId float32) ApiGetVodGenreByOndemandIdRequest

	// GetVodGenreByOndemandIdExecute executes the request
	//  @return OnDemandGenre
	GetVodGenreByOndemandIdExecute(r ApiGetVodGenreByOndemandIdRequest) (*OnDemandGenre, *http.Response, error)

	/*
		GetVodGenres Get all On Demand genres

		This method returns every existing On Demand genre.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiGetVodGenresRequest
	*/
	GetVodGenres(ctx context.Context) ApiGetVodGenresRequest

	// GetVodGenresExecute executes the request
	//  @return []OnDemandGenre
	GetVodGenresExecute(r ApiGetVodGenresRequest) ([]OnDemandGenre, *http.Response, error)

	/*
		GetVodGenresByOndemandId Get all the genres of an On Demand page

		This method returns every genre associated with the specified On Demand page.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param ondemandId The ID of the On Demand page.
		@return ApiGetVodGenresByOndemandIdRequest
	*/
	GetVodGenresByOndemandId(ctx context.Context, ondemandId float32) ApiGetVodGenresByOndemandIdRequest

	// GetVodGenresByOndemandIdExecute executes the request
	//  @return []OnDemandGenre
	GetVodGenresByOndemandIdExecute(r ApiGetVodGenresByOndemandIdRequest) ([]OnDemandGenre, *http.Response, error)
}

// OnDemandGenresAPIService OnDemandGenresAPI service
type OnDemandGenresAPIService service

type ApiAddVodGenreRequest struct {
	ctx        context.Context
	ApiService OnDemandGenresAPI
	genreId    string
	ondemandId float32
}

func (r ApiAddVodGenreRequest) Execute() (*OnDemandGenre, *http.Response, error) {
	return r.ApiService.AddVodGenreExecute(r)
}

/*
AddVodGenre Add a genre to an On Demand page

This method adds the specified genre designation to an On Demand page. A page can be associated with a maximum of two genres. The authenticated user must be the owner of the page.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param genreId The ID of the genre.
	@param ondemandId The ID of the On Demand page.
	@return ApiAddVodGenreRequest
*/
func (a *OnDemandGenresAPIService) AddVodGenre(ctx context.Context, genreId string, ondemandId float32) ApiAddVodGenreRequest {
	return ApiAddVodGenreRequest{
		ApiService: a,
		ctx:        ctx,
		genreId:    genreId,
		ondemandId: ondemandId,
	}
}

// Execute executes the request
//
//	@return OnDemandGenre
func (a *OnDemandGenresAPIService) AddVodGenreExecute(r ApiAddVodGenreRequest) (*OnDemandGenre, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OnDemandGenre
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnDemandGenresAPIService.AddVodGenre")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ondemand/pages/{ondemand_id}/genres/{genre_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"genre_id"+"}", url.PathEscape(parameterValueToString(r.genreId, "genreId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ondemand_id"+"}", url.PathEscape(parameterValueToString(r.ondemandId, "ondemandId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.ondemand.genre+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteVodGenreRequest struct {
	ctx        context.Context
	ApiService OnDemandGenresAPI
	genreId    string
	ondemandId float32
}

func (r ApiDeleteVodGenreRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteVodGenreExecute(r)
}

/*
DeleteVodGenre Remove a genre from an On Demand page

This method removes a genre association from the specified On Demand page. The authenticated user must be the owner of the page.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param genreId The ID of the genre.
	@param ondemandId The ID of the On Demand page.
	@return ApiDeleteVodGenreRequest
*/
func (a *OnDemandGenresAPIService) DeleteVodGenre(ctx context.Context, genreId string, ondemandId float32) ApiDeleteVodGenreRequest {
	return ApiDeleteVodGenreRequest{
		ApiService: a,
		ctx:        ctx,
		genreId:    genreId,
		ondemandId: ondemandId,
	}
}

// Execute executes the request
func (a *OnDemandGenresAPIService) DeleteVodGenreExecute(r ApiDeleteVodGenreRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnDemandGenresAPIService.DeleteVodGenre")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ondemand/pages/{ondemand_id}/genres/{genre_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"genre_id"+"}", url.PathEscape(parameterValueToString(r.genreId, "genreId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ondemand_id"+"}", url.PathEscape(parameterValueToString(r.ondemandId, "ondemandId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.ondemand.genre+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetGenreVodRequest struct {
	ctx        context.Context
	ApiService OnDemandGenresAPI
	genreId    string
	ondemandId float32
}

func (r ApiGetGenreVodRequest) Execute() (*OnDemandPage, *http.Response, error) {
	return r.ApiService.GetGenreVodExecute(r)
}

/*
GetGenreVod Get a specific On Demand page in a genre

This method returns a single On Demand page that belongs to the specified genre.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param genreId The ID of the genre.
	@param ondemandId The ID of the On Demand page.
	@return ApiGetGenreVodRequest
*/
func (a *OnDemandGenresAPIService) GetGenreVod(ctx context.Context, genreId string, ondemandId float32) ApiGetGenreVodRequest {
	return ApiGetGenreVodRequest{
		ApiService: a,
		ctx:        ctx,
		genreId:    genreId,
		ondemandId: ondemandId,
	}
}

// Execute executes the request
//
//	@return OnDemandPage
func (a *OnDemandGenresAPIService) GetGenreVodExecute(r ApiGetGenreVodRequest) (*OnDemandPage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OnDemandPage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnDemandGenresAPIService.GetGenreVod")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ondemand/genres/{genre_id}/pages/{ondemand_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"genre_id"+"}", url.PathEscape(parameterValueToString(r.genreId, "genreId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ondemand_id"+"}", url.PathEscape(parameterValueToString(r.ondemandId, "ondemandId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.ondemand.page+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetGenreVodsRequest struct {
	ctx        context.Context
	ApiService OnDemandGenresAPI
	genreId    string
	direction  *string
	filter     *string
	page       *float32
	perPage    *float32
	query      *string
	sort       *string
}

// The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.
func (r ApiGetGenreVodsRequest) Direction(direction string) ApiGetGenreVodsRequest {
	r.direction = &direction
	return r
}

// The attribute by which to filter the results.  Option descriptions:  * &#x60;country&#x60; - Sort the results by country.  * &#x60;my_region&#x60; - Sort the results by user&#39;s region.
func (r ApiGetGenreVodsRequest) Filter(filter string) ApiGetGenreVodsRequest {
	r.filter = &filter
	return r
}

// The page number of the results to show.
func (r ApiGetGenreVodsRequest) Page(page float32) ApiGetGenreVodsRequest {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiGetGenreVodsRequest) PerPage(perPage float32) ApiGetGenreVodsRequest {
	r.perPage = &perPage
	return r
}

// The search query to use to filter the results.
func (r ApiGetGenreVodsRequest) Query(query string) ApiGetGenreVodsRequest {
	r.query = &query
	return r
}

// The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;name&#x60; - Sort the results by name.  * &#x60;publish.time&#x60; - Sort the results by time of publishing.  * &#x60;videos&#x60; - Sort the results by video.
func (r ApiGetGenreVodsRequest) Sort(sort string) ApiGetGenreVodsRequest {
	r.sort = &sort
	return r
}

func (r ApiGetGenreVodsRequest) Execute() ([]OnDemandPage, *http.Response, error) {
	return r.ApiService.GetGenreVodsExecute(r)
}

/*
GetGenreVods Get all the On Demand pages in a genre

This method returns every On Demand page that belongs to the specified genre.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param genreId The ID of the genre.
	@return ApiGetGenreVodsRequest
*/
func (a *OnDemandGenresAPIService) GetGenreVods(ctx context.Context, genreId string) ApiGetGenreVodsRequest {
	return ApiGetGenreVodsRequest{
		ApiService: a,
		ctx:        ctx,
		genreId:    genreId,
	}
}

// Execute executes the request
//
//	@return []OnDemandPage
func (a *OnDemandGenresAPIService) GetGenreVodsExecute(r ApiGetGenreVodsRequest) ([]OnDemandPage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []OnDemandPage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnDemandGenresAPIService.GetGenreVods")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ondemand/genres/{genre_id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"genre_id"+"}", url.PathEscape(parameterValueToString(r.genreId, "genreId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	if r.query != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "query", r.query, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.ondemand.page+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetVodGenreRequest struct {
	ctx        context.Context
	ApiService OnDemandGenresAPI
	genreId    string
}

func (r ApiGetVodGenreRequest) Execute() (*OnDemandGenre, *http.Response, error) {
	return r.ApiService.GetVodGenreExecute(r)
}

/*
GetVodGenre Get a specific On Demand genre

This method returns a single On Demand genre.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param genreId The ID of the genre.
	@return ApiGetVodGenreRequest
*/
func (a *OnDemandGenresAPIService) GetVodGenre(ctx context.Context, genreId string) ApiGetVodGenreRequest {
	return ApiGetVodGenreRequest{
		ApiService: a,
		ctx:        ctx,
		genreId:    genreId,
	}
}

// Execute executes the request
//
//	@return OnDemandGenre
func (a *OnDemandGenresAPIService) GetVodGenreExecute(r ApiGetVodGenreRequest) (*OnDemandGenre, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OnDemandGenre
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnDemandGenresAPIService.GetVodGenre")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ondemand/genres/{genre_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"genre_id"+"}", url.PathEscape(parameterValueToString(r.genreId, "genreId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.ondemand.genre+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetVodGenreByOndemandIdRequest struct {
	ctx        context.Context
	ApiService OnDemandGenresAPI
	genreId    string
	ondemandId float32
}

func (r ApiGetVodGenreByOndemandIdRequest) Execute() (*OnDemandGenre, *http.Response, error) {
	return r.ApiService.GetVodGenreByOndemandIdExecute(r)
}

/*
GetVodGenreByOndemandId Check whether an On Demand page belongs to a specific genre

This method determines whether an On Demand page is associated with the specified genre.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param genreId The ID of the genre.
	@param ondemandId The ID of the On Demand page.
	@return ApiGetVodGenreByOndemandIdRequest
*/
func (a *OnDemandGenresAPIService) GetVodGenreByOndemandId(ctx context.Context, genreId string, ondemandId float32) ApiGetVodGenreByOndemandIdRequest {
	return ApiGetVodGenreByOndemandIdRequest{
		ApiService: a,
		ctx:        ctx,
		genreId:    genreId,
		ondemandId: ondemandId,
	}
}

// Execute executes the request
//
//	@return OnDemandGenre
func (a *OnDemandGenresAPIService) GetVodGenreByOndemandIdExecute(r ApiGetVodGenreByOndemandIdRequest) (*OnDemandGenre, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OnDemandGenre
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnDemandGenresAPIService.GetVodGenreByOndemandId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ondemand/pages/{ondemand_id}/genres/{genre_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"genre_id"+"}", url.PathEscape(parameterValueToString(r.genreId, "genreId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ondemand_id"+"}", url.PathEscape(parameterValueToString(r.ondemandId, "ondemandId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.ondemand.genre+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetVodGenresRequest struct {
	ctx        context.Context
	ApiService OnDemandGenresAPI
}

func (r ApiGetVodGenresRequest) Execute() ([]OnDemandGenre, *http.Response, error) {
	return r.ApiService.GetVodGenresExecute(r)
}

/*
GetVodGenres Get all On Demand genres

This method returns every existing On Demand genre.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetVodGenresRequest
*/
func (a *OnDemandGenresAPIService) GetVodGenres(ctx context.Context) ApiGetVodGenresRequest {
	return ApiGetVodGenresRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []OnDemandGenre
func (a *OnDemandGenresAPIService) GetVodGenresExecute(r ApiGetVodGenresRequest) ([]OnDemandGenre, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []OnDemandGenre
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnDemandGenresAPIService.GetVodGenres")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ondemand/genres"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.ondemand.genre+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetVodGenresByOndemandIdRequest struct {
	ctx        context.Context
	ApiService OnDemandGenresAPI
	ondemandId float32
}

func (r ApiGetVodGenresByOndemandIdRequest) Execute() ([]OnDemandGenre, *http.Response, error) {
	return r.ApiService.GetVodGenresByOndemandIdExecute(r)
}

/*
GetVodGenresByOndemandId Get all the genres of an On Demand page

This method returns every genre associated with the specified On Demand page.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ondemandId The ID of the On Demand page.
	@return ApiGetVodGenresByOndemandIdRequest
*/
func (a *OnDemandGenresAPIService) GetVodGenresByOndemandId(ctx context.Context, ondemandId float32) ApiGetVodGenresByOndemandIdRequest {
	return ApiGetVodGenresByOndemandIdRequest{
		ApiService: a,
		ctx:        ctx,
		ondemandId: ondemandId,
	}
}

// Execute executes the request
//
//	@return []OnDemandGenre
func (a *OnDemandGenresAPIService) GetVodGenresByOndemandIdExecute(r ApiGetVodGenresByOndemandIdRequest) ([]OnDemandGenre, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []OnDemandGenre
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnDemandGenresAPIService.GetVodGenresByOndemandId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ondemand/pages/{ondemand_id}/genres"
	localVarPath = strings.Replace(localVarPath, "{"+"ondemand_id"+"}", url.PathEscape(parameterValueToString(r.ondemandId, "ondemandId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.ondemand.genre+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
