/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserWebsitesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserWebsitesInner{}

// UserWebsitesInner struct for UserWebsitesInner
type UserWebsitesInner struct {
	// The website's description.
	Description NullableString `json:"description"`
	// The URL of the website.
	Link string `json:"link"`
	// The name of the website.
	Name NullableString `json:"name"`
	// The URL type of the website.
	Type string `json:"type"`
	// The URI of the custom website or social media page belonging to the user.
	Uri string `json:"uri"`
}

type _UserWebsitesInner UserWebsitesInner

// NewUserWebsitesInner instantiates a new UserWebsitesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserWebsitesInner(description NullableString, link string, name NullableString, type_ string, uri string) *UserWebsitesInner {
	this := UserWebsitesInner{}
	this.Description = description
	this.Link = link
	this.Name = name
	this.Type = type_
	this.Uri = uri
	return &this
}

// NewUserWebsitesInnerWithDefaults instantiates a new UserWebsitesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserWebsitesInnerWithDefaults() *UserWebsitesInner {
	this := UserWebsitesInner{}
	return &this
}

// GetDescription returns the Description field value
// If the value is explicit nil, the zero value for string will be returned
func (o *UserWebsitesInner) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}

	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserWebsitesInner) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// SetDescription sets field value
func (o *UserWebsitesInner) SetDescription(v string) {
	o.Description.Set(&v)
}

// GetLink returns the Link field value
func (o *UserWebsitesInner) GetLink() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Link
}

// GetLinkOk returns a tuple with the Link field value
// and a boolean to check if the value has been set.
func (o *UserWebsitesInner) GetLinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Link, true
}

// SetLink sets field value
func (o *UserWebsitesInner) SetLink(v string) {
	o.Link = v
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *UserWebsitesInner) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserWebsitesInner) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *UserWebsitesInner) SetName(v string) {
	o.Name.Set(&v)
}

// GetType returns the Type field value
func (o *UserWebsitesInner) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *UserWebsitesInner) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *UserWebsitesInner) SetType(v string) {
	o.Type = v
}

// GetUri returns the Uri field value
func (o *UserWebsitesInner) GetUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uri
}

// GetUriOk returns a tuple with the Uri field value
// and a boolean to check if the value has been set.
func (o *UserWebsitesInner) GetUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uri, true
}

// SetUri sets field value
func (o *UserWebsitesInner) SetUri(v string) {
	o.Uri = v
}

func (o UserWebsitesInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserWebsitesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["description"] = o.Description.Get()
	toSerialize["link"] = o.Link
	toSerialize["name"] = o.Name.Get()
	toSerialize["type"] = o.Type
	toSerialize["uri"] = o.Uri
	return toSerialize, nil
}

func (o *UserWebsitesInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"description",
		"link",
		"name",
		"type",
		"uri",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserWebsitesInner := _UserWebsitesInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserWebsitesInner)

	if err != nil {
		return err
	}

	*o = UserWebsitesInner(varUserWebsitesInner)

	return err
}

type NullableUserWebsitesInner struct {
	value *UserWebsitesInner
	isSet bool
}

func (v NullableUserWebsitesInner) Get() *UserWebsitesInner {
	return v.value
}

func (v *NullableUserWebsitesInner) Set(val *UserWebsitesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableUserWebsitesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableUserWebsitesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserWebsitesInner(val *UserWebsitesInner) *NullableUserWebsitesInner {
	return &NullableUserWebsitesInner{value: val, isSet: true}
}

func (v NullableUserWebsitesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserWebsitesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


