/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the EditVodRequestPublish type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EditVodRequestPublish{}

// EditVodRequestPublish struct for EditVodRequestPublish
type EditVodRequestPublish struct {
	// Whether to publish the On Demand page.
	Active *bool `json:"active,omitempty"`
}

// NewEditVodRequestPublish instantiates a new EditVodRequestPublish object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditVodRequestPublish() *EditVodRequestPublish {
	this := EditVodRequestPublish{}
	return &this
}

// NewEditVodRequestPublishWithDefaults instantiates a new EditVodRequestPublish object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditVodRequestPublishWithDefaults() *EditVodRequestPublish {
	this := EditVodRequestPublish{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *EditVodRequestPublish) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditVodRequestPublish) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *EditVodRequestPublish) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *EditVodRequestPublish) SetActive(v bool) {
	o.Active = &v
}

func (o EditVodRequestPublish) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EditVodRequestPublish) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	return toSerialize, nil
}

type NullableEditVodRequestPublish struct {
	value *EditVodRequestPublish
	isSet bool
}

func (v NullableEditVodRequestPublish) Get() *EditVodRequestPublish {
	return v.value
}

func (v *NullableEditVodRequestPublish) Set(val *EditVodRequestPublish) {
	v.value = val
	v.isSet = true
}

func (v NullableEditVodRequestPublish) IsSet() bool {
	return v.isSet
}

func (v *NullableEditVodRequestPublish) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditVodRequestPublish(val *EditVodRequestPublish) *NullableEditVodRequestPublish {
	return &NullableEditVodRequestPublish{value: val, isSet: true}
}

func (v NullableEditVodRequestPublish) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditVodRequestPublish) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


