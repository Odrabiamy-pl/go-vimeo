/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AlbumMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlbumMetadata{}

// AlbumMetadata Metadata about the showcase.
type AlbumMetadata struct {
	Connections AlbumMetadataConnections `json:"connections"`
	Interactions NullableAlbumMetadataInteractions `json:"interactions"`
}

type _AlbumMetadata AlbumMetadata

// NewAlbumMetadata instantiates a new AlbumMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlbumMetadata(connections AlbumMetadataConnections, interactions NullableAlbumMetadataInteractions) *AlbumMetadata {
	this := AlbumMetadata{}
	this.Connections = connections
	this.Interactions = interactions
	return &this
}

// NewAlbumMetadataWithDefaults instantiates a new AlbumMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlbumMetadataWithDefaults() *AlbumMetadata {
	this := AlbumMetadata{}
	return &this
}

// GetConnections returns the Connections field value
func (o *AlbumMetadata) GetConnections() AlbumMetadataConnections {
	if o == nil {
		var ret AlbumMetadataConnections
		return ret
	}

	return o.Connections
}

// GetConnectionsOk returns a tuple with the Connections field value
// and a boolean to check if the value has been set.
func (o *AlbumMetadata) GetConnectionsOk() (*AlbumMetadataConnections, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Connections, true
}

// SetConnections sets field value
func (o *AlbumMetadata) SetConnections(v AlbumMetadataConnections) {
	o.Connections = v
}

// GetInteractions returns the Interactions field value
// If the value is explicit nil, the zero value for AlbumMetadataInteractions will be returned
func (o *AlbumMetadata) GetInteractions() AlbumMetadataInteractions {
	if o == nil || o.Interactions.Get() == nil {
		var ret AlbumMetadataInteractions
		return ret
	}

	return *o.Interactions.Get()
}

// GetInteractionsOk returns a tuple with the Interactions field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlbumMetadata) GetInteractionsOk() (*AlbumMetadataInteractions, bool) {
	if o == nil {
		return nil, false
	}
	return o.Interactions.Get(), o.Interactions.IsSet()
}

// SetInteractions sets field value
func (o *AlbumMetadata) SetInteractions(v AlbumMetadataInteractions) {
	o.Interactions.Set(&v)
}

func (o AlbumMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlbumMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["connections"] = o.Connections
	toSerialize["interactions"] = o.Interactions.Get()
	return toSerialize, nil
}

func (o *AlbumMetadata) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"connections",
		"interactions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAlbumMetadata := _AlbumMetadata{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAlbumMetadata)

	if err != nil {
		return err
	}

	*o = AlbumMetadata(varAlbumMetadata)

	return err
}

type NullableAlbumMetadata struct {
	value *AlbumMetadata
	isSet bool
}

func (v NullableAlbumMetadata) Get() *AlbumMetadata {
	return v.value
}

func (v *NullableAlbumMetadata) Set(val *AlbumMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableAlbumMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableAlbumMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlbumMetadata(val *AlbumMetadata) *NullableAlbumMetadata {
	return &NullableAlbumMetadata{value: val, isSet: true}
}

func (v NullableAlbumMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlbumMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


