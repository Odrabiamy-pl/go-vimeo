/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the VideoVod type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VideoVod{}

// VideoVod The video's Vimeo On Demand information.
type VideoVod struct {
	// The video's Vimeo On Demand ID.
	Id NullableFloat32 `json:"id"`
}

// NewVideoVod instantiates a new VideoVod object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVideoVod(id NullableFloat32) *VideoVod {
	this := VideoVod{}
	this.Id = id
	return &this
}

// NewVideoVodWithDefaults instantiates a new VideoVod object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVideoVodWithDefaults() *VideoVod {
	this := VideoVod{}
	return &this
}

// GetId returns the Id field value
// If the value is explicit nil, the zero value for float32 will be returned
func (o *VideoVod) GetId() float32 {
	if o == nil || o.Id.Get() == nil {
		var ret float32
		return ret
	}

	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VideoVod) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// SetId sets field value
func (o *VideoVod) SetId(v float32) {
	o.Id.Set(&v)
}

func (o VideoVod) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VideoVod) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id.Get()
	return toSerialize, nil
}

type NullableVideoVod struct {
	value *VideoVod
	isSet bool
}

func (v NullableVideoVod) Get() *VideoVod {
	return v.value
}

func (v *NullableVideoVod) Set(val *VideoVod) {
	v.value = val
	v.isSet = true
}

func (v NullableVideoVod) IsSet() bool {
	return v.isSet
}

func (v *NullableVideoVod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVideoVod(val *VideoVod) *NullableVideoVod {
	return &NullableVideoVod{value: val, isSet: true}
}

func (v NullableVideoVod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVideoVod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


