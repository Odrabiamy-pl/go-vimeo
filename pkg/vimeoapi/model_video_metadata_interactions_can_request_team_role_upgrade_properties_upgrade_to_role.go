/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole{}

// VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole An object containing data on the value of **upgrade_to_role** and whether it's required for the interaction.
type VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole struct {
	// Whether the upgrade role must be sent to achieve the desired action.
	Required bool `json:"required"`
	// The value of the team role to which the user should be upgraded.
	Value float32 `json:"value"`
}

type _VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole

// NewVideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole instantiates a new VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole(required bool, value float32) *VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole {
	this := VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole{}
	this.Required = required
	this.Value = value
	return &this
}

// NewVideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRoleWithDefaults instantiates a new VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRoleWithDefaults() *VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole {
	this := VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole{}
	return &this
}

// GetRequired returns the Required field value
func (o *VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole) GetRequired() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Required
}

// GetRequiredOk returns a tuple with the Required field value
// and a boolean to check if the value has been set.
func (o *VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole) GetRequiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Required, true
}

// SetRequired sets field value
func (o *VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole) SetRequired(v bool) {
	o.Required = v
}

// GetValue returns the Value field value
func (o *VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole) GetValue() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole) GetValueOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole) SetValue(v float32) {
	o.Value = v
}

func (o VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["required"] = o.Required
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

func (o *VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"required",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole := _VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole)

	if err != nil {
		return err
	}

	*o = VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole(varVideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole)

	return err
}

type NullableVideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole struct {
	value *VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole
	isSet bool
}

func (v NullableVideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole) Get() *VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole {
	return v.value
}

func (v *NullableVideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole) Set(val *VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole) {
	v.value = val
	v.isSet = true
}

func (v NullableVideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole) IsSet() bool {
	return v.isSet
}

func (v *NullableVideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole(val *VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole) *NullableVideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole {
	return &NullableVideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole{value: val, isSet: true}
}

func (v NullableVideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


