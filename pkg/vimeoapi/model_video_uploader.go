/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VideoUploader type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VideoUploader{}

// VideoUploader The video's uploader.
type VideoUploader struct {
	// The profile link of the user who uploaded the video.
	Link string `json:"link"`
	// The display name of the user who uploaded the video.
	Name string `json:"name"`
	// The active portrait of the user who uploaded the video.
	Pictures Picture `json:"pictures"`
}

type _VideoUploader VideoUploader

// NewVideoUploader instantiates a new VideoUploader object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVideoUploader(link string, name string, pictures Picture) *VideoUploader {
	this := VideoUploader{}
	this.Link = link
	this.Name = name
	this.Pictures = pictures
	return &this
}

// NewVideoUploaderWithDefaults instantiates a new VideoUploader object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVideoUploaderWithDefaults() *VideoUploader {
	this := VideoUploader{}
	return &this
}

// GetLink returns the Link field value
func (o *VideoUploader) GetLink() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Link
}

// GetLinkOk returns a tuple with the Link field value
// and a boolean to check if the value has been set.
func (o *VideoUploader) GetLinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Link, true
}

// SetLink sets field value
func (o *VideoUploader) SetLink(v string) {
	o.Link = v
}

// GetName returns the Name field value
func (o *VideoUploader) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VideoUploader) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VideoUploader) SetName(v string) {
	o.Name = v
}

// GetPictures returns the Pictures field value
func (o *VideoUploader) GetPictures() Picture {
	if o == nil {
		var ret Picture
		return ret
	}

	return o.Pictures
}

// GetPicturesOk returns a tuple with the Pictures field value
// and a boolean to check if the value has been set.
func (o *VideoUploader) GetPicturesOk() (*Picture, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pictures, true
}

// SetPictures sets field value
func (o *VideoUploader) SetPictures(v Picture) {
	o.Pictures = v
}

func (o VideoUploader) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VideoUploader) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["link"] = o.Link
	toSerialize["name"] = o.Name
	toSerialize["pictures"] = o.Pictures
	return toSerialize, nil
}

func (o *VideoUploader) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"link",
		"name",
		"pictures",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVideoUploader := _VideoUploader{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVideoUploader)

	if err != nil {
		return err
	}

	*o = VideoUploader(varVideoUploader)

	return err
}

type NullableVideoUploader struct {
	value *VideoUploader
	isSet bool
}

func (v NullableVideoUploader) Get() *VideoUploader {
	return v.value
}

func (v *NullableVideoUploader) Set(val *VideoUploader) {
	v.value = val
	v.isSet = true
}

func (v NullableVideoUploader) IsSet() bool {
	return v.isSet
}

func (v *NullableVideoUploader) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVideoUploader(val *VideoUploader) *NullableVideoUploader {
	return &NullableVideoUploader{value: val, isSet: true}
}

func (v NullableVideoUploader) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVideoUploader) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


