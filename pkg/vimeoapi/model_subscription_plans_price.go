/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SubscriptionPlansPrice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionPlansPrice{}

// SubscriptionPlansPrice Information about the prices associated with the plan.
type SubscriptionPlansPrice struct {
	// The annual price, charged annually.
	Annual float32 `json:"annual"`
	// The monthly price, charged annually.
	AnnualMonthly float32 `json:"annual_monthly"`
	// The monthly price, charged monthly.
	Monthly *float32 `json:"monthly,omitempty"`
}

type _SubscriptionPlansPrice SubscriptionPlansPrice

// NewSubscriptionPlansPrice instantiates a new SubscriptionPlansPrice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionPlansPrice(annual float32, annualMonthly float32) *SubscriptionPlansPrice {
	this := SubscriptionPlansPrice{}
	this.Annual = annual
	this.AnnualMonthly = annualMonthly
	return &this
}

// NewSubscriptionPlansPriceWithDefaults instantiates a new SubscriptionPlansPrice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionPlansPriceWithDefaults() *SubscriptionPlansPrice {
	this := SubscriptionPlansPrice{}
	return &this
}

// GetAnnual returns the Annual field value
func (o *SubscriptionPlansPrice) GetAnnual() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Annual
}

// GetAnnualOk returns a tuple with the Annual field value
// and a boolean to check if the value has been set.
func (o *SubscriptionPlansPrice) GetAnnualOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Annual, true
}

// SetAnnual sets field value
func (o *SubscriptionPlansPrice) SetAnnual(v float32) {
	o.Annual = v
}

// GetAnnualMonthly returns the AnnualMonthly field value
func (o *SubscriptionPlansPrice) GetAnnualMonthly() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.AnnualMonthly
}

// GetAnnualMonthlyOk returns a tuple with the AnnualMonthly field value
// and a boolean to check if the value has been set.
func (o *SubscriptionPlansPrice) GetAnnualMonthlyOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AnnualMonthly, true
}

// SetAnnualMonthly sets field value
func (o *SubscriptionPlansPrice) SetAnnualMonthly(v float32) {
	o.AnnualMonthly = v
}

// GetMonthly returns the Monthly field value if set, zero value otherwise.
func (o *SubscriptionPlansPrice) GetMonthly() float32 {
	if o == nil || IsNil(o.Monthly) {
		var ret float32
		return ret
	}
	return *o.Monthly
}

// GetMonthlyOk returns a tuple with the Monthly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionPlansPrice) GetMonthlyOk() (*float32, bool) {
	if o == nil || IsNil(o.Monthly) {
		return nil, false
	}
	return o.Monthly, true
}

// HasMonthly returns a boolean if a field has been set.
func (o *SubscriptionPlansPrice) HasMonthly() bool {
	if o != nil && !IsNil(o.Monthly) {
		return true
	}

	return false
}

// SetMonthly gets a reference to the given float32 and assigns it to the Monthly field.
func (o *SubscriptionPlansPrice) SetMonthly(v float32) {
	o.Monthly = &v
}

func (o SubscriptionPlansPrice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionPlansPrice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["annual"] = o.Annual
	toSerialize["annual_monthly"] = o.AnnualMonthly
	if !IsNil(o.Monthly) {
		toSerialize["monthly"] = o.Monthly
	}
	return toSerialize, nil
}

func (o *SubscriptionPlansPrice) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"annual",
		"annual_monthly",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubscriptionPlansPrice := _SubscriptionPlansPrice{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubscriptionPlansPrice)

	if err != nil {
		return err
	}

	*o = SubscriptionPlansPrice(varSubscriptionPlansPrice)

	return err
}

type NullableSubscriptionPlansPrice struct {
	value *SubscriptionPlansPrice
	isSet bool
}

func (v NullableSubscriptionPlansPrice) Get() *SubscriptionPlansPrice {
	return v.value
}

func (v *NullableSubscriptionPlansPrice) Set(val *SubscriptionPlansPrice) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionPlansPrice) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionPlansPrice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionPlansPrice(val *SubscriptionPlansPrice) *NullableSubscriptionPlansPrice {
	return &NullableSubscriptionPlansPrice{value: val, isSet: true}
}

func (v NullableSubscriptionPlansPrice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionPlansPrice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


