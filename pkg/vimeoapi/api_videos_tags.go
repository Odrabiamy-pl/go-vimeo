/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type VideosTagsAPI interface {

	/*
		AddVideoTag Add a specific tag to a video

		This method adds a single tag to the specified video. The authenticated user must be the owner of the video.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param videoId The ID of the video.
		@param word The tag word.
		@return ApiAddVideoTagRequest
	*/
	AddVideoTag(ctx context.Context, videoId int32, word string) ApiAddVideoTagRequest

	// AddVideoTagExecute executes the request
	//  @return Tag
	AddVideoTagExecute(r ApiAddVideoTagRequest) (*Tag, *http.Response, error)

	/*
		AddVideoTags Add a list of tags to a video

		This method adds multiple tags to the specified video. Include the tags as a JSON array  as the body of the request with the  **name** field, like this: `[{ "name": "funny"}, {"name": "concert" }]`. The authenticated user must have edit access to the video. For more information on batch requests like this one, see [Using Common Formats and Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests).

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param videoId The ID of the video.
		@return ApiAddVideoTagsRequest
	*/
	AddVideoTags(ctx context.Context, videoId int32) ApiAddVideoTagsRequest

	// AddVideoTagsExecute executes the request
	//  @return []Tag
	AddVideoTagsExecute(r ApiAddVideoTagsRequest) ([]Tag, *http.Response, error)

	/*
		CheckVideoForTag Check if a tag has been added to a video

		This method determines whether the specified tag has been added to a video. The authenticated user must be the owner of the video.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param videoId The ID of the video.
		@param word The tag word.
		@return ApiCheckVideoForTagRequest
	*/
	CheckVideoForTag(ctx context.Context, videoId int32, word string) ApiCheckVideoForTagRequest

	// CheckVideoForTagExecute executes the request
	//  @return Tag
	CheckVideoForTagExecute(r ApiCheckVideoForTagRequest) (*Tag, *http.Response, error)

	/*
		DeleteVideoTag Remove a tag from a video

		This method removes the specified tag from a video. The authenticated user must have edit access to the video.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param videoId The ID of the video.
		@param word The tag word.
		@return ApiDeleteVideoTagRequest
	*/
	DeleteVideoTag(ctx context.Context, videoId int32, word string) ApiDeleteVideoTagRequest

	// DeleteVideoTagExecute executes the request
	DeleteVideoTagExecute(r ApiDeleteVideoTagRequest) (*http.Response, error)

	/*
		GetVideoTags Get all the tags of a video

		This method returns all the tags associated with the specified video. The authenticated user must be the owner of the video.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param videoId The ID of the video.
		@return ApiGetVideoTagsRequest
	*/
	GetVideoTags(ctx context.Context, videoId int32) ApiGetVideoTagsRequest

	// GetVideoTagsExecute executes the request
	//  @return []Tag
	GetVideoTagsExecute(r ApiGetVideoTagsRequest) ([]Tag, *http.Response, error)

	/*
		GetVideosWithTag Get all the videos with a specific tag

		This method returns all the public videos associated with the specified tag.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param word The tag word.
		@return ApiGetVideosWithTagRequest
	*/
	GetVideosWithTag(ctx context.Context, word string) ApiGetVideosWithTagRequest

	// GetVideosWithTagExecute executes the request
	//  @return []Video
	GetVideosWithTagExecute(r ApiGetVideosWithTagRequest) ([]Video, *http.Response, error)
}

// VideosTagsAPIService VideosTagsAPI service
type VideosTagsAPIService service

type ApiAddVideoTagRequest struct {
	ctx        context.Context
	ApiService VideosTagsAPI
	videoId    int32
	word       string
}

func (r ApiAddVideoTagRequest) Execute() (*Tag, *http.Response, error) {
	return r.ApiService.AddVideoTagExecute(r)
}

/*
AddVideoTag Add a specific tag to a video

This method adds a single tag to the specified video. The authenticated user must be the owner of the video.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param videoId The ID of the video.
	@param word The tag word.
	@return ApiAddVideoTagRequest
*/
func (a *VideosTagsAPIService) AddVideoTag(ctx context.Context, videoId int32, word string) ApiAddVideoTagRequest {
	return ApiAddVideoTagRequest{
		ApiService: a,
		ctx:        ctx,
		videoId:    videoId,
		word:       word,
	}
}

// Execute executes the request
//
//	@return Tag
func (a *VideosTagsAPIService) AddVideoTagExecute(r ApiAddVideoTagRequest) (*Tag, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Tag
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosTagsAPIService.AddVideoTag")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos/{video_id}/tags/{word}"
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"word"+"}", url.PathEscape(parameterValueToString(r.word, "word")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.tag+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAddVideoTagsRequest struct {
	ctx        context.Context
	ApiService VideosTagsAPI
	videoId    int32
	page       *float32
	perPage    *float32
}

// The page number of the results to show.
func (r ApiAddVideoTagsRequest) Page(page float32) ApiAddVideoTagsRequest {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiAddVideoTagsRequest) PerPage(perPage float32) ApiAddVideoTagsRequest {
	r.perPage = &perPage
	return r
}

func (r ApiAddVideoTagsRequest) Execute() ([]Tag, *http.Response, error) {
	return r.ApiService.AddVideoTagsExecute(r)
}

/*
AddVideoTags Add a list of tags to a video

This method adds multiple tags to the specified video. Include the tags as a JSON array  as the body of the request with the  **name** field, like this: `[{ "name": "funny"}, {"name": "concert" }]`. The authenticated user must have edit access to the video. For more information on batch requests like this one, see [Using Common Formats and Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests).

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param videoId The ID of the video.
	@return ApiAddVideoTagsRequest
*/
func (a *VideosTagsAPIService) AddVideoTags(ctx context.Context, videoId int32) ApiAddVideoTagsRequest {
	return ApiAddVideoTagsRequest{
		ApiService: a,
		ctx:        ctx,
		videoId:    videoId,
	}
}

// Execute executes the request
//
//	@return []Tag
func (a *VideosTagsAPIService) AddVideoTagsExecute(r ApiAddVideoTagsRequest) ([]Tag, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Tag
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosTagsAPIService.AddVideoTags")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos/{video_id}/tags"
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.tag+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCheckVideoForTagRequest struct {
	ctx        context.Context
	ApiService VideosTagsAPI
	videoId    int32
	word       string
}

func (r ApiCheckVideoForTagRequest) Execute() (*Tag, *http.Response, error) {
	return r.ApiService.CheckVideoForTagExecute(r)
}

/*
CheckVideoForTag Check if a tag has been added to a video

This method determines whether the specified tag has been added to a video. The authenticated user must be the owner of the video.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param videoId The ID of the video.
	@param word The tag word.
	@return ApiCheckVideoForTagRequest
*/
func (a *VideosTagsAPIService) CheckVideoForTag(ctx context.Context, videoId int32, word string) ApiCheckVideoForTagRequest {
	return ApiCheckVideoForTagRequest{
		ApiService: a,
		ctx:        ctx,
		videoId:    videoId,
		word:       word,
	}
}

// Execute executes the request
//
//	@return Tag
func (a *VideosTagsAPIService) CheckVideoForTagExecute(r ApiCheckVideoForTagRequest) (*Tag, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Tag
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosTagsAPIService.CheckVideoForTag")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos/{video_id}/tags/{word}"
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"word"+"}", url.PathEscape(parameterValueToString(r.word, "word")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.tag+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteVideoTagRequest struct {
	ctx        context.Context
	ApiService VideosTagsAPI
	videoId    int32
	word       string
}

func (r ApiDeleteVideoTagRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteVideoTagExecute(r)
}

/*
DeleteVideoTag Remove a tag from a video

This method removes the specified tag from a video. The authenticated user must have edit access to the video.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param videoId The ID of the video.
	@param word The tag word.
	@return ApiDeleteVideoTagRequest
*/
func (a *VideosTagsAPIService) DeleteVideoTag(ctx context.Context, videoId int32, word string) ApiDeleteVideoTagRequest {
	return ApiDeleteVideoTagRequest{
		ApiService: a,
		ctx:        ctx,
		videoId:    videoId,
		word:       word,
	}
}

// Execute executes the request
func (a *VideosTagsAPIService) DeleteVideoTagExecute(r ApiDeleteVideoTagRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosTagsAPIService.DeleteVideoTag")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos/{video_id}/tags/{word}"
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"word"+"}", url.PathEscape(parameterValueToString(r.word, "word")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.tag+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetVideoTagsRequest struct {
	ctx        context.Context
	ApiService VideosTagsAPI
	videoId    int32
	page       *float32
	perPage    *float32
}

// The page number of the results to show.
func (r ApiGetVideoTagsRequest) Page(page float32) ApiGetVideoTagsRequest {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiGetVideoTagsRequest) PerPage(perPage float32) ApiGetVideoTagsRequest {
	r.perPage = &perPage
	return r
}

func (r ApiGetVideoTagsRequest) Execute() ([]Tag, *http.Response, error) {
	return r.ApiService.GetVideoTagsExecute(r)
}

/*
GetVideoTags Get all the tags of a video

This method returns all the tags associated with the specified video. The authenticated user must be the owner of the video.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param videoId The ID of the video.
	@return ApiGetVideoTagsRequest
*/
func (a *VideosTagsAPIService) GetVideoTags(ctx context.Context, videoId int32) ApiGetVideoTagsRequest {
	return ApiGetVideoTagsRequest{
		ApiService: a,
		ctx:        ctx,
		videoId:    videoId,
	}
}

// Execute executes the request
//
//	@return []Tag
func (a *VideosTagsAPIService) GetVideoTagsExecute(r ApiGetVideoTagsRequest) ([]Tag, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Tag
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosTagsAPIService.GetVideoTags")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos/{video_id}/tags"
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.tag+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetVideosWithTagRequest struct {
	ctx        context.Context
	ApiService VideosTagsAPI
	word       string
	direction  *string
	page       *float32
	perPage    *float32
	sort       *string
}

// The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.
func (r ApiGetVideosWithTagRequest) Direction(direction string) ApiGetVideosWithTagRequest {
	r.direction = &direction
	return r
}

// The page number of the results to show.
func (r ApiGetVideosWithTagRequest) Page(page float32) ApiGetVideosWithTagRequest {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiGetVideosWithTagRequest) PerPage(perPage float32) ApiGetVideosWithTagRequest {
	r.perPage = &perPage
	return r
}

// The way to sort the results.  Option descriptions:  * &#x60;created_time&#x60; - Sort the results by creation time.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;name&#x60; - Sort the results by name.
func (r ApiGetVideosWithTagRequest) Sort(sort string) ApiGetVideosWithTagRequest {
	r.sort = &sort
	return r
}

func (r ApiGetVideosWithTagRequest) Execute() ([]Video, *http.Response, error) {
	return r.ApiService.GetVideosWithTagExecute(r)
}

/*
GetVideosWithTag Get all the videos with a specific tag

This method returns all the public videos associated with the specified tag.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param word The tag word.
	@return ApiGetVideosWithTagRequest
*/
func (a *VideosTagsAPIService) GetVideosWithTag(ctx context.Context, word string) ApiGetVideosWithTagRequest {
	return ApiGetVideosWithTagRequest{
		ApiService: a,
		ctx:        ctx,
		word:       word,
	}
}

// Execute executes the request
//
//	@return []Video
func (a *VideosTagsAPIService) GetVideosWithTagExecute(r ApiGetVideosWithTagRequest) ([]Video, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Video
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosTagsAPIService.GetVideosWithTag")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tags/{word}/videos"
	localVarPath = strings.Replace(localVarPath, "{"+"word"+"}", url.PathEscape(parameterValueToString(r.word, "word")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.video+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
