/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the EditingSession type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EditingSession{}

// EditingSession struct for EditingSession
type EditingSession struct {
	// Whether the video has a watermark.
	HasWatermark bool `json:"has_watermark"`
	// Whether the video has been edited by Transcript Video Editing.
	IsEditedByTve bool `json:"is_edited_by_tve"`
	// Whether the current version of the video is at the maximum resolution.
	IsMaxResolution bool `json:"is_max_resolution"`
	// Whether the video has licensed music.
	IsMusicLicensed bool `json:"is_music_licensed"`
	// Whether the video has been rated.
	IsRated bool `json:"is_rated"`
	// The minimum required Vimeo membership for the user to be able to share the video.
	MinTierForMovie string `json:"min_tier_for_movie"`
	// The result video hash for the created video.
	ResultVideoHash string `json:"result_video_hash"`
	// The status of the video.  Option descriptions:  * `done` - The video is finished processing.  * `processing` - The video is still being processed.
	Status string `json:"status"`
	// The version's canonical relative URI.
	VersionUri *string `json:"version_uri,omitempty"`
	// The ID of the video's editing session.
	Vsid float32 `json:"vsid"`
}

// NewEditingSession instantiates a new EditingSession object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditingSession(hasWatermark bool, isEditedByTve bool, isMaxResolution bool, isMusicLicensed bool, isRated bool, minTierForMovie string, resultVideoHash string, status string, vsid float32) *EditingSession {
	this := EditingSession{}
	this.HasWatermark = hasWatermark
	this.IsEditedByTve = isEditedByTve
	this.IsMaxResolution = isMaxResolution
	this.IsMusicLicensed = isMusicLicensed
	this.IsRated = isRated
	this.MinTierForMovie = minTierForMovie
	this.ResultVideoHash = resultVideoHash
	this.Status = status
	this.Vsid = vsid
	return &this
}

// NewEditingSessionWithDefaults instantiates a new EditingSession object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditingSessionWithDefaults() *EditingSession {
	this := EditingSession{}
	return &this
}

// GetHasWatermark returns the HasWatermark field value
func (o *EditingSession) GetHasWatermark() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasWatermark
}

// GetHasWatermarkOk returns a tuple with the HasWatermark field value
// and a boolean to check if the value has been set.
func (o *EditingSession) GetHasWatermarkOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasWatermark, true
}

// SetHasWatermark sets field value
func (o *EditingSession) SetHasWatermark(v bool) {
	o.HasWatermark = v
}

// GetIsEditedByTve returns the IsEditedByTve field value
func (o *EditingSession) GetIsEditedByTve() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsEditedByTve
}

// GetIsEditedByTveOk returns a tuple with the IsEditedByTve field value
// and a boolean to check if the value has been set.
func (o *EditingSession) GetIsEditedByTveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsEditedByTve, true
}

// SetIsEditedByTve sets field value
func (o *EditingSession) SetIsEditedByTve(v bool) {
	o.IsEditedByTve = v
}

// GetIsMaxResolution returns the IsMaxResolution field value
func (o *EditingSession) GetIsMaxResolution() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsMaxResolution
}

// GetIsMaxResolutionOk returns a tuple with the IsMaxResolution field value
// and a boolean to check if the value has been set.
func (o *EditingSession) GetIsMaxResolutionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsMaxResolution, true
}

// SetIsMaxResolution sets field value
func (o *EditingSession) SetIsMaxResolution(v bool) {
	o.IsMaxResolution = v
}

// GetIsMusicLicensed returns the IsMusicLicensed field value
func (o *EditingSession) GetIsMusicLicensed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsMusicLicensed
}

// GetIsMusicLicensedOk returns a tuple with the IsMusicLicensed field value
// and a boolean to check if the value has been set.
func (o *EditingSession) GetIsMusicLicensedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsMusicLicensed, true
}

// SetIsMusicLicensed sets field value
func (o *EditingSession) SetIsMusicLicensed(v bool) {
	o.IsMusicLicensed = v
}

// GetIsRated returns the IsRated field value
func (o *EditingSession) GetIsRated() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsRated
}

// GetIsRatedOk returns a tuple with the IsRated field value
// and a boolean to check if the value has been set.
func (o *EditingSession) GetIsRatedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsRated, true
}

// SetIsRated sets field value
func (o *EditingSession) SetIsRated(v bool) {
	o.IsRated = v
}

// GetMinTierForMovie returns the MinTierForMovie field value
func (o *EditingSession) GetMinTierForMovie() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MinTierForMovie
}

// GetMinTierForMovieOk returns a tuple with the MinTierForMovie field value
// and a boolean to check if the value has been set.
func (o *EditingSession) GetMinTierForMovieOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinTierForMovie, true
}

// SetMinTierForMovie sets field value
func (o *EditingSession) SetMinTierForMovie(v string) {
	o.MinTierForMovie = v
}

// GetResultVideoHash returns the ResultVideoHash field value
func (o *EditingSession) GetResultVideoHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResultVideoHash
}

// GetResultVideoHashOk returns a tuple with the ResultVideoHash field value
// and a boolean to check if the value has been set.
func (o *EditingSession) GetResultVideoHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResultVideoHash, true
}

// SetResultVideoHash sets field value
func (o *EditingSession) SetResultVideoHash(v string) {
	o.ResultVideoHash = v
}

// GetStatus returns the Status field value
func (o *EditingSession) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *EditingSession) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *EditingSession) SetStatus(v string) {
	o.Status = v
}

// GetVersionUri returns the VersionUri field value if set, zero value otherwise.
func (o *EditingSession) GetVersionUri() string {
	if o == nil || IsNil(o.VersionUri) {
		var ret string
		return ret
	}
	return *o.VersionUri
}

// GetVersionUriOk returns a tuple with the VersionUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditingSession) GetVersionUriOk() (*string, bool) {
	if o == nil || IsNil(o.VersionUri) {
		return nil, false
	}
	return o.VersionUri, true
}

// HasVersionUri returns a boolean if a field has been set.
func (o *EditingSession) HasVersionUri() bool {
	if o != nil && !IsNil(o.VersionUri) {
		return true
	}

	return false
}

// SetVersionUri gets a reference to the given string and assigns it to the VersionUri field.
func (o *EditingSession) SetVersionUri(v string) {
	o.VersionUri = &v
}

// GetVsid returns the Vsid field value
func (o *EditingSession) GetVsid() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Vsid
}

// GetVsidOk returns a tuple with the Vsid field value
// and a boolean to check if the value has been set.
func (o *EditingSession) GetVsidOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vsid, true
}

// SetVsid sets field value
func (o *EditingSession) SetVsid(v float32) {
	o.Vsid = v
}

func (o EditingSession) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EditingSession) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["has_watermark"] = o.HasWatermark
	toSerialize["is_edited_by_tve"] = o.IsEditedByTve
	toSerialize["is_max_resolution"] = o.IsMaxResolution
	toSerialize["is_music_licensed"] = o.IsMusicLicensed
	toSerialize["is_rated"] = o.IsRated
	toSerialize["min_tier_for_movie"] = o.MinTierForMovie
	toSerialize["result_video_hash"] = o.ResultVideoHash
	toSerialize["status"] = o.Status
	if !IsNil(o.VersionUri) {
		toSerialize["version_uri"] = o.VersionUri
	}
	toSerialize["vsid"] = o.Vsid
	return toSerialize, nil
}

type NullableEditingSession struct {
	value *EditingSession
	isSet bool
}

func (v NullableEditingSession) Get() *EditingSession {
	return v.value
}

func (v *NullableEditingSession) Set(val *EditingSession) {
	v.value = val
	v.isSet = true
}

func (v NullableEditingSession) IsSet() bool {
	return v.isSet
}

func (v *NullableEditingSession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditingSession(val *EditingSession) *NullableEditingSession {
	return &NullableEditingSession{value: val, isSet: true}
}

func (v NullableEditingSession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditingSession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
