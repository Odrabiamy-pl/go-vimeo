/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the RecurringLiveEventLowLatency type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecurringLiveEventLowLatency{}

// RecurringLiveEventLowLatency struct for RecurringLiveEventLowLatency
type RecurringLiveEventLowLatency struct {
	// Whether the low-latency option is enabled.
	LowLatency bool `json:"lowLatency"`
}

// NewRecurringLiveEventLowLatency instantiates a new RecurringLiveEventLowLatency object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecurringLiveEventLowLatency(lowLatency bool) *RecurringLiveEventLowLatency {
	this := RecurringLiveEventLowLatency{}
	this.LowLatency = lowLatency
	return &this
}

// NewRecurringLiveEventLowLatencyWithDefaults instantiates a new RecurringLiveEventLowLatency object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecurringLiveEventLowLatencyWithDefaults() *RecurringLiveEventLowLatency {
	this := RecurringLiveEventLowLatency{}
	return &this
}

// GetLowLatency returns the LowLatency field value
func (o *RecurringLiveEventLowLatency) GetLowLatency() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.LowLatency
}

// GetLowLatencyOk returns a tuple with the LowLatency field value
// and a boolean to check if the value has been set.
func (o *RecurringLiveEventLowLatency) GetLowLatencyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LowLatency, true
}

// SetLowLatency sets field value
func (o *RecurringLiveEventLowLatency) SetLowLatency(v bool) {
	o.LowLatency = v
}

func (o RecurringLiveEventLowLatency) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecurringLiveEventLowLatency) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["lowLatency"] = o.LowLatency
	return toSerialize, nil
}

type NullableRecurringLiveEventLowLatency struct {
	value *RecurringLiveEventLowLatency
	isSet bool
}

func (v NullableRecurringLiveEventLowLatency) Get() *RecurringLiveEventLowLatency {
	return v.value
}

func (v *NullableRecurringLiveEventLowLatency) Set(val *RecurringLiveEventLowLatency) {
	v.value = val
	v.isSet = true
}

func (v NullableRecurringLiveEventLowLatency) IsSet() bool {
	return v.isSet
}

func (v *NullableRecurringLiveEventLowLatency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecurringLiveEventLowLatency(val *RecurringLiveEventLowLatency) *NullableRecurringLiveEventLowLatency {
	return &NullableRecurringLiveEventLowLatency{value: val, isSet: true}
}

func (v NullableRecurringLiveEventLowLatency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecurringLiveEventLowLatency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
