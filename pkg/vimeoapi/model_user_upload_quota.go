/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserUploadQuota type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserUploadQuota{}

// UserUploadQuota The upload quota. This information appears only when the authenticated user has upload access and is looking at their own user record.
type UserUploadQuota struct {
	Lifetime UserUploadQuotaLifetime `json:"lifetime"`
	Periodic UserUploadQuotaPeriodic `json:"periodic"`
	Space UserUploadQuotaSpace `json:"space"`
}

type _UserUploadQuota UserUploadQuota

// NewUserUploadQuota instantiates a new UserUploadQuota object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserUploadQuota(lifetime UserUploadQuotaLifetime, periodic UserUploadQuotaPeriodic, space UserUploadQuotaSpace) *UserUploadQuota {
	this := UserUploadQuota{}
	this.Lifetime = lifetime
	this.Periodic = periodic
	this.Space = space
	return &this
}

// NewUserUploadQuotaWithDefaults instantiates a new UserUploadQuota object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserUploadQuotaWithDefaults() *UserUploadQuota {
	this := UserUploadQuota{}
	return &this
}

// GetLifetime returns the Lifetime field value
func (o *UserUploadQuota) GetLifetime() UserUploadQuotaLifetime {
	if o == nil {
		var ret UserUploadQuotaLifetime
		return ret
	}

	return o.Lifetime
}

// GetLifetimeOk returns a tuple with the Lifetime field value
// and a boolean to check if the value has been set.
func (o *UserUploadQuota) GetLifetimeOk() (*UserUploadQuotaLifetime, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Lifetime, true
}

// SetLifetime sets field value
func (o *UserUploadQuota) SetLifetime(v UserUploadQuotaLifetime) {
	o.Lifetime = v
}

// GetPeriodic returns the Periodic field value
func (o *UserUploadQuota) GetPeriodic() UserUploadQuotaPeriodic {
	if o == nil {
		var ret UserUploadQuotaPeriodic
		return ret
	}

	return o.Periodic
}

// GetPeriodicOk returns a tuple with the Periodic field value
// and a boolean to check if the value has been set.
func (o *UserUploadQuota) GetPeriodicOk() (*UserUploadQuotaPeriodic, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Periodic, true
}

// SetPeriodic sets field value
func (o *UserUploadQuota) SetPeriodic(v UserUploadQuotaPeriodic) {
	o.Periodic = v
}

// GetSpace returns the Space field value
func (o *UserUploadQuota) GetSpace() UserUploadQuotaSpace {
	if o == nil {
		var ret UserUploadQuotaSpace
		return ret
	}

	return o.Space
}

// GetSpaceOk returns a tuple with the Space field value
// and a boolean to check if the value has been set.
func (o *UserUploadQuota) GetSpaceOk() (*UserUploadQuotaSpace, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Space, true
}

// SetSpace sets field value
func (o *UserUploadQuota) SetSpace(v UserUploadQuotaSpace) {
	o.Space = v
}

func (o UserUploadQuota) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserUploadQuota) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["lifetime"] = o.Lifetime
	toSerialize["periodic"] = o.Periodic
	toSerialize["space"] = o.Space
	return toSerialize, nil
}

func (o *UserUploadQuota) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"lifetime",
		"periodic",
		"space",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserUploadQuota := _UserUploadQuota{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserUploadQuota)

	if err != nil {
		return err
	}

	*o = UserUploadQuota(varUserUploadQuota)

	return err
}

type NullableUserUploadQuota struct {
	value *UserUploadQuota
	isSet bool
}

func (v NullableUserUploadQuota) Get() *UserUploadQuota {
	return v.value
}

func (v *NullableUserUploadQuota) Set(val *UserUploadQuota) {
	v.value = val
	v.isSet = true
}

func (v NullableUserUploadQuota) IsSet() bool {
	return v.isSet
}

func (v *NullableUserUploadQuota) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserUploadQuota(val *UserUploadQuota) *NullableUserUploadQuota {
	return &NullableUserUploadQuota{value: val, isSet: true}
}

func (v NullableUserUploadQuota) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserUploadQuota) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


