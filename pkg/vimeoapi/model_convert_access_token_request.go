/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConvertAccessTokenRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConvertAccessTokenRequest{}

// ConvertAccessTokenRequest struct for ConvertAccessTokenRequest
type ConvertAccessTokenRequest struct {
	// The grant type. The value of this field must be `vimeo_oauth1`.
	GrantType string `json:"grant_type"`
	// The OAuth 1 token.
	Token string `json:"token"`
	// The OAuth 1 token secret.
	TokenSecret string `json:"token_secret"`
}

type _ConvertAccessTokenRequest ConvertAccessTokenRequest

// NewConvertAccessTokenRequest instantiates a new ConvertAccessTokenRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConvertAccessTokenRequest(grantType string, token string, tokenSecret string) *ConvertAccessTokenRequest {
	this := ConvertAccessTokenRequest{}
	this.GrantType = grantType
	this.Token = token
	this.TokenSecret = tokenSecret
	return &this
}

// NewConvertAccessTokenRequestWithDefaults instantiates a new ConvertAccessTokenRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConvertAccessTokenRequestWithDefaults() *ConvertAccessTokenRequest {
	this := ConvertAccessTokenRequest{}
	return &this
}

// GetGrantType returns the GrantType field value
func (o *ConvertAccessTokenRequest) GetGrantType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GrantType
}

// GetGrantTypeOk returns a tuple with the GrantType field value
// and a boolean to check if the value has been set.
func (o *ConvertAccessTokenRequest) GetGrantTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GrantType, true
}

// SetGrantType sets field value
func (o *ConvertAccessTokenRequest) SetGrantType(v string) {
	o.GrantType = v
}

// GetToken returns the Token field value
func (o *ConvertAccessTokenRequest) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *ConvertAccessTokenRequest) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *ConvertAccessTokenRequest) SetToken(v string) {
	o.Token = v
}

// GetTokenSecret returns the TokenSecret field value
func (o *ConvertAccessTokenRequest) GetTokenSecret() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenSecret
}

// GetTokenSecretOk returns a tuple with the TokenSecret field value
// and a boolean to check if the value has been set.
func (o *ConvertAccessTokenRequest) GetTokenSecretOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenSecret, true
}

// SetTokenSecret sets field value
func (o *ConvertAccessTokenRequest) SetTokenSecret(v string) {
	o.TokenSecret = v
}

func (o ConvertAccessTokenRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConvertAccessTokenRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["grant_type"] = o.GrantType
	toSerialize["token"] = o.Token
	toSerialize["token_secret"] = o.TokenSecret
	return toSerialize, nil
}

func (o *ConvertAccessTokenRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"grant_type",
		"token",
		"token_secret",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConvertAccessTokenRequest := _ConvertAccessTokenRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConvertAccessTokenRequest)

	if err != nil {
		return err
	}

	*o = ConvertAccessTokenRequest(varConvertAccessTokenRequest)

	return err
}

type NullableConvertAccessTokenRequest struct {
	value *ConvertAccessTokenRequest
	isSet bool
}

func (v NullableConvertAccessTokenRequest) Get() *ConvertAccessTokenRequest {
	return v.value
}

func (v *NullableConvertAccessTokenRequest) Set(val *ConvertAccessTokenRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableConvertAccessTokenRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableConvertAccessTokenRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConvertAccessTokenRequest(val *ConvertAccessTokenRequest) *NullableConvertAccessTokenRequest {
	return &NullableConvertAccessTokenRequest{value: val, isSet: true}
}

func (v NullableConvertAccessTokenRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConvertAccessTokenRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


