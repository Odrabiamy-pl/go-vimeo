/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AddVideoToVodRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddVideoToVodRequest{}

// AddVideoToVodRequest struct for AddVideoToVodRequest
type AddVideoToVodRequest struct {
	Buy *AddVideoToVodRequestBuy `json:"buy,omitempty"`
	// The position of the video in the On Demand collection.
	Position *float32 `json:"position,omitempty"`
	// The release year of the video.
	ReleaseYear *float32 `json:"release_year,omitempty"`
	Rent *AddVideoToVodRequestRent `json:"rent,omitempty"`
	// The type of the video.  Option descriptions:  * `extra` - The video type is extra footage.  * `main` - The video type is the main video.  * `trailer` - The video type is a trailer. 
	Type string `json:"type"`
}

type _AddVideoToVodRequest AddVideoToVodRequest

// NewAddVideoToVodRequest instantiates a new AddVideoToVodRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddVideoToVodRequest(type_ string) *AddVideoToVodRequest {
	this := AddVideoToVodRequest{}
	this.Type = type_
	return &this
}

// NewAddVideoToVodRequestWithDefaults instantiates a new AddVideoToVodRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddVideoToVodRequestWithDefaults() *AddVideoToVodRequest {
	this := AddVideoToVodRequest{}
	return &this
}

// GetBuy returns the Buy field value if set, zero value otherwise.
func (o *AddVideoToVodRequest) GetBuy() AddVideoToVodRequestBuy {
	if o == nil || IsNil(o.Buy) {
		var ret AddVideoToVodRequestBuy
		return ret
	}
	return *o.Buy
}

// GetBuyOk returns a tuple with the Buy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddVideoToVodRequest) GetBuyOk() (*AddVideoToVodRequestBuy, bool) {
	if o == nil || IsNil(o.Buy) {
		return nil, false
	}
	return o.Buy, true
}

// HasBuy returns a boolean if a field has been set.
func (o *AddVideoToVodRequest) HasBuy() bool {
	if o != nil && !IsNil(o.Buy) {
		return true
	}

	return false
}

// SetBuy gets a reference to the given AddVideoToVodRequestBuy and assigns it to the Buy field.
func (o *AddVideoToVodRequest) SetBuy(v AddVideoToVodRequestBuy) {
	o.Buy = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *AddVideoToVodRequest) GetPosition() float32 {
	if o == nil || IsNil(o.Position) {
		var ret float32
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddVideoToVodRequest) GetPositionOk() (*float32, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *AddVideoToVodRequest) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given float32 and assigns it to the Position field.
func (o *AddVideoToVodRequest) SetPosition(v float32) {
	o.Position = &v
}

// GetReleaseYear returns the ReleaseYear field value if set, zero value otherwise.
func (o *AddVideoToVodRequest) GetReleaseYear() float32 {
	if o == nil || IsNil(o.ReleaseYear) {
		var ret float32
		return ret
	}
	return *o.ReleaseYear
}

// GetReleaseYearOk returns a tuple with the ReleaseYear field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddVideoToVodRequest) GetReleaseYearOk() (*float32, bool) {
	if o == nil || IsNil(o.ReleaseYear) {
		return nil, false
	}
	return o.ReleaseYear, true
}

// HasReleaseYear returns a boolean if a field has been set.
func (o *AddVideoToVodRequest) HasReleaseYear() bool {
	if o != nil && !IsNil(o.ReleaseYear) {
		return true
	}

	return false
}

// SetReleaseYear gets a reference to the given float32 and assigns it to the ReleaseYear field.
func (o *AddVideoToVodRequest) SetReleaseYear(v float32) {
	o.ReleaseYear = &v
}

// GetRent returns the Rent field value if set, zero value otherwise.
func (o *AddVideoToVodRequest) GetRent() AddVideoToVodRequestRent {
	if o == nil || IsNil(o.Rent) {
		var ret AddVideoToVodRequestRent
		return ret
	}
	return *o.Rent
}

// GetRentOk returns a tuple with the Rent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddVideoToVodRequest) GetRentOk() (*AddVideoToVodRequestRent, bool) {
	if o == nil || IsNil(o.Rent) {
		return nil, false
	}
	return o.Rent, true
}

// HasRent returns a boolean if a field has been set.
func (o *AddVideoToVodRequest) HasRent() bool {
	if o != nil && !IsNil(o.Rent) {
		return true
	}

	return false
}

// SetRent gets a reference to the given AddVideoToVodRequestRent and assigns it to the Rent field.
func (o *AddVideoToVodRequest) SetRent(v AddVideoToVodRequestRent) {
	o.Rent = &v
}

// GetType returns the Type field value
func (o *AddVideoToVodRequest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AddVideoToVodRequest) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AddVideoToVodRequest) SetType(v string) {
	o.Type = v
}

func (o AddVideoToVodRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddVideoToVodRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Buy) {
		toSerialize["buy"] = o.Buy
	}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if !IsNil(o.ReleaseYear) {
		toSerialize["release_year"] = o.ReleaseYear
	}
	if !IsNil(o.Rent) {
		toSerialize["rent"] = o.Rent
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *AddVideoToVodRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddVideoToVodRequest := _AddVideoToVodRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddVideoToVodRequest)

	if err != nil {
		return err
	}

	*o = AddVideoToVodRequest(varAddVideoToVodRequest)

	return err
}

type NullableAddVideoToVodRequest struct {
	value *AddVideoToVodRequest
	isSet bool
}

func (v NullableAddVideoToVodRequest) Get() *AddVideoToVodRequest {
	return v.value
}

func (v *NullableAddVideoToVodRequest) Set(val *AddVideoToVodRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddVideoToVodRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddVideoToVodRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddVideoToVodRequest(val *AddVideoToVodRequest) *NullableAddVideoToVodRequest {
	return &NullableAddVideoToVodRequest{value: val, isSet: true}
}

func (v NullableAddVideoToVodRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddVideoToVodRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


