/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the UserUploadQuotaPeriodic type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserUploadQuotaPeriodic{}

// UserUploadQuotaPeriodic Information about the authenticated user's usage for the current period.
type UserUploadQuotaPeriodic struct {
	// The number of bytes or video count remaining in the authenticated user's upload quota for the current period.
	Free NullableFloat32 `json:"free"`
	// The total number of bytes or videos that the authenticated user can upload per period.
	Max NullableFloat32 `json:"max"`
	// The renewal frequency of the quota.  Option descriptions:  * `lifetime` - The user doesn't have a periodic quota.  * `month` - The quota renews monthly.  * `week` - The quota renews weekly.  * `year` - The quota renews yearly. 
	Period NullableString `json:"period"`
	// The time in ISO 8601 format when the authenticated user's upload quota resets.
	ResetDate NullableString `json:"reset_date"`
	// The unit that's used to compute quota.  Option descriptions:  * `video_count` - The quota is calculated using the count of the videos.  * `video_size` - The quota is calculated using the byte size of the videos. 
	Unit NullableString `json:"unit"`
	// The number of bytes or video count that the authenticated user has already uploaded against their quota in the current period.
	Used NullableFloat32 `json:"used"`
}

// NewUserUploadQuotaPeriodic instantiates a new UserUploadQuotaPeriodic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserUploadQuotaPeriodic(free NullableFloat32, max NullableFloat32, period NullableString, resetDate NullableString, unit NullableString, used NullableFloat32) *UserUploadQuotaPeriodic {
	this := UserUploadQuotaPeriodic{}
	this.Free = free
	this.Max = max
	this.Period = period
	this.ResetDate = resetDate
	this.Unit = unit
	this.Used = used
	return &this
}

// NewUserUploadQuotaPeriodicWithDefaults instantiates a new UserUploadQuotaPeriodic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserUploadQuotaPeriodicWithDefaults() *UserUploadQuotaPeriodic {
	this := UserUploadQuotaPeriodic{}
	return &this
}

// GetFree returns the Free field value
// If the value is explicit nil, the zero value for float32 will be returned
func (o *UserUploadQuotaPeriodic) GetFree() float32 {
	if o == nil || o.Free.Get() == nil {
		var ret float32
		return ret
	}

	return *o.Free.Get()
}

// GetFreeOk returns a tuple with the Free field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserUploadQuotaPeriodic) GetFreeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Free.Get(), o.Free.IsSet()
}

// SetFree sets field value
func (o *UserUploadQuotaPeriodic) SetFree(v float32) {
	o.Free.Set(&v)
}

// GetMax returns the Max field value
// If the value is explicit nil, the zero value for float32 will be returned
func (o *UserUploadQuotaPeriodic) GetMax() float32 {
	if o == nil || o.Max.Get() == nil {
		var ret float32
		return ret
	}

	return *o.Max.Get()
}

// GetMaxOk returns a tuple with the Max field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserUploadQuotaPeriodic) GetMaxOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Max.Get(), o.Max.IsSet()
}

// SetMax sets field value
func (o *UserUploadQuotaPeriodic) SetMax(v float32) {
	o.Max.Set(&v)
}

// GetPeriod returns the Period field value
// If the value is explicit nil, the zero value for string will be returned
func (o *UserUploadQuotaPeriodic) GetPeriod() string {
	if o == nil || o.Period.Get() == nil {
		var ret string
		return ret
	}

	return *o.Period.Get()
}

// GetPeriodOk returns a tuple with the Period field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserUploadQuotaPeriodic) GetPeriodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Period.Get(), o.Period.IsSet()
}

// SetPeriod sets field value
func (o *UserUploadQuotaPeriodic) SetPeriod(v string) {
	o.Period.Set(&v)
}

// GetResetDate returns the ResetDate field value
// If the value is explicit nil, the zero value for string will be returned
func (o *UserUploadQuotaPeriodic) GetResetDate() string {
	if o == nil || o.ResetDate.Get() == nil {
		var ret string
		return ret
	}

	return *o.ResetDate.Get()
}

// GetResetDateOk returns a tuple with the ResetDate field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserUploadQuotaPeriodic) GetResetDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResetDate.Get(), o.ResetDate.IsSet()
}

// SetResetDate sets field value
func (o *UserUploadQuotaPeriodic) SetResetDate(v string) {
	o.ResetDate.Set(&v)
}

// GetUnit returns the Unit field value
// If the value is explicit nil, the zero value for string will be returned
func (o *UserUploadQuotaPeriodic) GetUnit() string {
	if o == nil || o.Unit.Get() == nil {
		var ret string
		return ret
	}

	return *o.Unit.Get()
}

// GetUnitOk returns a tuple with the Unit field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserUploadQuotaPeriodic) GetUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Unit.Get(), o.Unit.IsSet()
}

// SetUnit sets field value
func (o *UserUploadQuotaPeriodic) SetUnit(v string) {
	o.Unit.Set(&v)
}

// GetUsed returns the Used field value
// If the value is explicit nil, the zero value for float32 will be returned
func (o *UserUploadQuotaPeriodic) GetUsed() float32 {
	if o == nil || o.Used.Get() == nil {
		var ret float32
		return ret
	}

	return *o.Used.Get()
}

// GetUsedOk returns a tuple with the Used field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserUploadQuotaPeriodic) GetUsedOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Used.Get(), o.Used.IsSet()
}

// SetUsed sets field value
func (o *UserUploadQuotaPeriodic) SetUsed(v float32) {
	o.Used.Set(&v)
}

func (o UserUploadQuotaPeriodic) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserUploadQuotaPeriodic) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["free"] = o.Free.Get()
	toSerialize["max"] = o.Max.Get()
	toSerialize["period"] = o.Period.Get()
	toSerialize["reset_date"] = o.ResetDate.Get()
	toSerialize["unit"] = o.Unit.Get()
	toSerialize["used"] = o.Used.Get()
	return toSerialize, nil
}

type NullableUserUploadQuotaPeriodic struct {
	value *UserUploadQuotaPeriodic
	isSet bool
}

func (v NullableUserUploadQuotaPeriodic) Get() *UserUploadQuotaPeriodic {
	return v.value
}

func (v *NullableUserUploadQuotaPeriodic) Set(val *UserUploadQuotaPeriodic) {
	v.value = val
	v.isSet = true
}

func (v NullableUserUploadQuotaPeriodic) IsSet() bool {
	return v.isSet
}

func (v *NullableUserUploadQuotaPeriodic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserUploadQuotaPeriodic(val *UserUploadQuotaPeriodic) *NullableUserUploadQuotaPeriodic {
	return &NullableUserUploadQuotaPeriodic{value: val, isSet: true}
}

func (v NullableUserUploadQuotaPeriodic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserUploadQuotaPeriodic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


