/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type LiveEventThumbnailsAPI interface {

	/*
	CreateLiveEventThumbnail Create a live event thumbnail

	This method creates a thumbnail image for the specified event.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param liveEventId The ID of the event.
	@param userId The ID of the user.
	@return ApiCreateLiveEventThumbnailRequest
	*/
	CreateLiveEventThumbnail(ctx context.Context, liveEventId float32, userId float32) ApiCreateLiveEventThumbnailRequest

	// CreateLiveEventThumbnailExecute executes the request
	//  @return Picture
	CreateLiveEventThumbnailExecute(r ApiCreateLiveEventThumbnailRequest) (*Picture, *http.Response, error)

	/*
	CreateLiveEventThumbnailAlt1 Create a live event thumbnail

	This method creates a thumbnail image for the specified event.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param liveEventId The ID of the event.
	@return ApiCreateLiveEventThumbnailAlt1Request
	*/
	CreateLiveEventThumbnailAlt1(ctx context.Context, liveEventId float32) ApiCreateLiveEventThumbnailAlt1Request

	// CreateLiveEventThumbnailAlt1Execute executes the request
	//  @return Picture
	CreateLiveEventThumbnailAlt1Execute(r ApiCreateLiveEventThumbnailAlt1Request) (*Picture, *http.Response, error)

	/*
	CreateLiveEventThumbnailAlt2 Create a live event thumbnail

	This method creates a thumbnail image for the specified event.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param liveEventId The ID of the event.
	@return ApiCreateLiveEventThumbnailAlt2Request
	*/
	CreateLiveEventThumbnailAlt2(ctx context.Context, liveEventId float32) ApiCreateLiveEventThumbnailAlt2Request

	// CreateLiveEventThumbnailAlt2Execute executes the request
	//  @return Picture
	CreateLiveEventThumbnailAlt2Execute(r ApiCreateLiveEventThumbnailAlt2Request) (*Picture, *http.Response, error)

	/*
	DeleteLiveEventThumbnail Delete a live event thumbnail

	This method deletes a thumbnail image for the specified event.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param liveEventId The ID of the event.
	@param thumbnailId The ID of the thumbnail.
	@param userId The ID of the user.
	@return ApiDeleteLiveEventThumbnailRequest
	*/
	DeleteLiveEventThumbnail(ctx context.Context, liveEventId float32, thumbnailId float32, userId float32) ApiDeleteLiveEventThumbnailRequest

	// DeleteLiveEventThumbnailExecute executes the request
	DeleteLiveEventThumbnailExecute(r ApiDeleteLiveEventThumbnailRequest) (*http.Response, error)

	/*
	DeleteLiveEventThumbnailAlt1 Delete a live event thumbnail

	This method deletes a thumbnail image for the specified event.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param liveEventId The ID of the event.
	@param thumbnailId The ID of the thumbnail.
	@return ApiDeleteLiveEventThumbnailAlt1Request
	*/
	DeleteLiveEventThumbnailAlt1(ctx context.Context, liveEventId float32, thumbnailId float32) ApiDeleteLiveEventThumbnailAlt1Request

	// DeleteLiveEventThumbnailAlt1Execute executes the request
	DeleteLiveEventThumbnailAlt1Execute(r ApiDeleteLiveEventThumbnailAlt1Request) (*http.Response, error)

	/*
	DeleteLiveEventThumbnailAlt2 Delete a live event thumbnail

	This method deletes a thumbnail image for the specified event.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param liveEventId The ID of the event.
	@param thumbnailId The ID of the thumbnail.
	@return ApiDeleteLiveEventThumbnailAlt2Request
	*/
	DeleteLiveEventThumbnailAlt2(ctx context.Context, liveEventId float32, thumbnailId float32) ApiDeleteLiveEventThumbnailAlt2Request

	// DeleteLiveEventThumbnailAlt2Execute executes the request
	DeleteLiveEventThumbnailAlt2Execute(r ApiDeleteLiveEventThumbnailAlt2Request) (*http.Response, error)

	/*
	EditLiveEventThumbnail Edit a live event thumbnail

	This method edits a thumbnail image for the specified event.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param liveEventId The ID of the event.
	@param thumbnailId The ID of the thumbnail.
	@param userId The ID of the user.
	@return ApiEditLiveEventThumbnailRequest
	*/
	EditLiveEventThumbnail(ctx context.Context, liveEventId float32, thumbnailId float32, userId float32) ApiEditLiveEventThumbnailRequest

	// EditLiveEventThumbnailExecute executes the request
	//  @return Picture
	EditLiveEventThumbnailExecute(r ApiEditLiveEventThumbnailRequest) (*Picture, *http.Response, error)

	/*
	EditLiveEventThumbnailAlt1 Edit a live event thumbnail

	This method edits a thumbnail image for the specified event.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param liveEventId The ID of the event.
	@param thumbnailId The ID of the thumbnail.
	@return ApiEditLiveEventThumbnailAlt1Request
	*/
	EditLiveEventThumbnailAlt1(ctx context.Context, liveEventId float32, thumbnailId float32) ApiEditLiveEventThumbnailAlt1Request

	// EditLiveEventThumbnailAlt1Execute executes the request
	//  @return Picture
	EditLiveEventThumbnailAlt1Execute(r ApiEditLiveEventThumbnailAlt1Request) (*Picture, *http.Response, error)

	/*
	EditLiveEventThumbnailAlt2 Edit a live event thumbnail

	This method edits a thumbnail image for the specified event.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param liveEventId The ID of the event.
	@param thumbnailId The ID of the thumbnail.
	@return ApiEditLiveEventThumbnailAlt2Request
	*/
	EditLiveEventThumbnailAlt2(ctx context.Context, liveEventId float32, thumbnailId float32) ApiEditLiveEventThumbnailAlt2Request

	// EditLiveEventThumbnailAlt2Execute executes the request
	//  @return Picture
	EditLiveEventThumbnailAlt2Execute(r ApiEditLiveEventThumbnailAlt2Request) (*Picture, *http.Response, error)

	/*
	GetLiveEventThumbnail Get a specific live event thumbnail

	This method returns a single thumbnail image of the specified event.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param liveEventId The ID of the event.
	@param thumbnailId The ID of the thumbnail.
	@param userId The ID of the user.
	@return ApiGetLiveEventThumbnailRequest
	*/
	GetLiveEventThumbnail(ctx context.Context, liveEventId float32, thumbnailId float32, userId float32) ApiGetLiveEventThumbnailRequest

	// GetLiveEventThumbnailExecute executes the request
	//  @return Picture
	GetLiveEventThumbnailExecute(r ApiGetLiveEventThumbnailRequest) (*Picture, *http.Response, error)

	/*
	GetLiveEventThumbnailAlt1 Get a specific live event thumbnail

	This method returns a single thumbnail image of the specified event.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param liveEventId The ID of the event.
	@param thumbnailId The ID of the thumbnail.
	@return ApiGetLiveEventThumbnailAlt1Request
	*/
	GetLiveEventThumbnailAlt1(ctx context.Context, liveEventId float32, thumbnailId float32) ApiGetLiveEventThumbnailAlt1Request

	// GetLiveEventThumbnailAlt1Execute executes the request
	//  @return Picture
	GetLiveEventThumbnailAlt1Execute(r ApiGetLiveEventThumbnailAlt1Request) (*Picture, *http.Response, error)

	/*
	GetLiveEventThumbnailAlt2 Get a specific live event thumbnail

	This method returns a single thumbnail image of the specified event.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param liveEventId The ID of the event.
	@param thumbnailId The ID of the thumbnail.
	@return ApiGetLiveEventThumbnailAlt2Request
	*/
	GetLiveEventThumbnailAlt2(ctx context.Context, liveEventId float32, thumbnailId float32) ApiGetLiveEventThumbnailAlt2Request

	// GetLiveEventThumbnailAlt2Execute executes the request
	//  @return Picture
	GetLiveEventThumbnailAlt2Execute(r ApiGetLiveEventThumbnailAlt2Request) (*Picture, *http.Response, error)

	/*
	GetLiveEventThumbnails Get all the thumbnails of a live event

	This method returns every thumbnail image of the specified event.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param liveEventId The ID of the event.
	@param userId The ID of the user.
	@return ApiGetLiveEventThumbnailsRequest
	*/
	GetLiveEventThumbnails(ctx context.Context, liveEventId float32, userId float32) ApiGetLiveEventThumbnailsRequest

	// GetLiveEventThumbnailsExecute executes the request
	//  @return []Picture
	GetLiveEventThumbnailsExecute(r ApiGetLiveEventThumbnailsRequest) ([]Picture, *http.Response, error)

	/*
	GetLiveEventThumbnailsAlt1 Get all the thumbnails of a live event

	This method returns every thumbnail image of the specified event.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param liveEventId The ID of the event.
	@return ApiGetLiveEventThumbnailsAlt1Request
	*/
	GetLiveEventThumbnailsAlt1(ctx context.Context, liveEventId float32) ApiGetLiveEventThumbnailsAlt1Request

	// GetLiveEventThumbnailsAlt1Execute executes the request
	//  @return []Picture
	GetLiveEventThumbnailsAlt1Execute(r ApiGetLiveEventThumbnailsAlt1Request) ([]Picture, *http.Response, error)

	/*
	GetLiveEventThumbnailsAlt2 Get all the thumbnails of a live event

	This method returns every thumbnail image of the specified event.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param liveEventId The ID of the event.
	@return ApiGetLiveEventThumbnailsAlt2Request
	*/
	GetLiveEventThumbnailsAlt2(ctx context.Context, liveEventId float32) ApiGetLiveEventThumbnailsAlt2Request

	// GetLiveEventThumbnailsAlt2Execute executes the request
	//  @return []Picture
	GetLiveEventThumbnailsAlt2Execute(r ApiGetLiveEventThumbnailsAlt2Request) ([]Picture, *http.Response, error)
}

// LiveEventThumbnailsAPIService LiveEventThumbnailsAPI service
type LiveEventThumbnailsAPIService service

type ApiCreateLiveEventThumbnailRequest struct {
	ctx context.Context
	ApiService LiveEventThumbnailsAPI
	liveEventId float32
	userId float32
	createLiveEventThumbnailAlt1Request *CreateLiveEventThumbnailAlt1Request
}

func (r ApiCreateLiveEventThumbnailRequest) CreateLiveEventThumbnailAlt1Request(createLiveEventThumbnailAlt1Request CreateLiveEventThumbnailAlt1Request) ApiCreateLiveEventThumbnailRequest {
	r.createLiveEventThumbnailAlt1Request = &createLiveEventThumbnailAlt1Request
	return r
}

func (r ApiCreateLiveEventThumbnailRequest) Execute() (*Picture, *http.Response, error) {
	return r.ApiService.CreateLiveEventThumbnailExecute(r)
}

/*
CreateLiveEventThumbnail Create a live event thumbnail

This method creates a thumbnail image for the specified event.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param liveEventId The ID of the event.
 @param userId The ID of the user.
 @return ApiCreateLiveEventThumbnailRequest
*/
func (a *LiveEventThumbnailsAPIService) CreateLiveEventThumbnail(ctx context.Context, liveEventId float32, userId float32) ApiCreateLiveEventThumbnailRequest {
	return ApiCreateLiveEventThumbnailRequest{
		ApiService: a,
		ctx: ctx,
		liveEventId: liveEventId,
		userId: userId,
	}
}

// Execute executes the request
//  @return Picture
func (a *LiveEventThumbnailsAPIService) CreateLiveEventThumbnailExecute(r ApiCreateLiveEventThumbnailRequest) (*Picture, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Picture
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LiveEventThumbnailsAPIService.CreateLiveEventThumbnail")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/live_events/{live_event_id}/pictures"
	localVarPath = strings.Replace(localVarPath, "{"+"live_event_id"+"}", url.PathEscape(parameterValueToString(r.liveEventId, "liveEventId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.vimeo.picture+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.picture+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createLiveEventThumbnailAlt1Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateLiveEventThumbnailAlt1Request struct {
	ctx context.Context
	ApiService LiveEventThumbnailsAPI
	liveEventId float32
	createLiveEventThumbnailAlt1Request *CreateLiveEventThumbnailAlt1Request
}

func (r ApiCreateLiveEventThumbnailAlt1Request) CreateLiveEventThumbnailAlt1Request(createLiveEventThumbnailAlt1Request CreateLiveEventThumbnailAlt1Request) ApiCreateLiveEventThumbnailAlt1Request {
	r.createLiveEventThumbnailAlt1Request = &createLiveEventThumbnailAlt1Request
	return r
}

func (r ApiCreateLiveEventThumbnailAlt1Request) Execute() (*Picture, *http.Response, error) {
	return r.ApiService.CreateLiveEventThumbnailAlt1Execute(r)
}

/*
CreateLiveEventThumbnailAlt1 Create a live event thumbnail

This method creates a thumbnail image for the specified event.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param liveEventId The ID of the event.
 @return ApiCreateLiveEventThumbnailAlt1Request
*/
func (a *LiveEventThumbnailsAPIService) CreateLiveEventThumbnailAlt1(ctx context.Context, liveEventId float32) ApiCreateLiveEventThumbnailAlt1Request {
	return ApiCreateLiveEventThumbnailAlt1Request{
		ApiService: a,
		ctx: ctx,
		liveEventId: liveEventId,
	}
}

// Execute executes the request
//  @return Picture
func (a *LiveEventThumbnailsAPIService) CreateLiveEventThumbnailAlt1Execute(r ApiCreateLiveEventThumbnailAlt1Request) (*Picture, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Picture
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LiveEventThumbnailsAPIService.CreateLiveEventThumbnailAlt1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/live_events/{live_event_id}/pictures"
	localVarPath = strings.Replace(localVarPath, "{"+"live_event_id"+"}", url.PathEscape(parameterValueToString(r.liveEventId, "liveEventId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.vimeo.picture+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.picture+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createLiveEventThumbnailAlt1Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateLiveEventThumbnailAlt2Request struct {
	ctx context.Context
	ApiService LiveEventThumbnailsAPI
	liveEventId float32
	createLiveEventThumbnailAlt1Request *CreateLiveEventThumbnailAlt1Request
}

func (r ApiCreateLiveEventThumbnailAlt2Request) CreateLiveEventThumbnailAlt1Request(createLiveEventThumbnailAlt1Request CreateLiveEventThumbnailAlt1Request) ApiCreateLiveEventThumbnailAlt2Request {
	r.createLiveEventThumbnailAlt1Request = &createLiveEventThumbnailAlt1Request
	return r
}

func (r ApiCreateLiveEventThumbnailAlt2Request) Execute() (*Picture, *http.Response, error) {
	return r.ApiService.CreateLiveEventThumbnailAlt2Execute(r)
}

/*
CreateLiveEventThumbnailAlt2 Create a live event thumbnail

This method creates a thumbnail image for the specified event.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param liveEventId The ID of the event.
 @return ApiCreateLiveEventThumbnailAlt2Request
*/
func (a *LiveEventThumbnailsAPIService) CreateLiveEventThumbnailAlt2(ctx context.Context, liveEventId float32) ApiCreateLiveEventThumbnailAlt2Request {
	return ApiCreateLiveEventThumbnailAlt2Request{
		ApiService: a,
		ctx: ctx,
		liveEventId: liveEventId,
	}
}

// Execute executes the request
//  @return Picture
func (a *LiveEventThumbnailsAPIService) CreateLiveEventThumbnailAlt2Execute(r ApiCreateLiveEventThumbnailAlt2Request) (*Picture, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Picture
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LiveEventThumbnailsAPIService.CreateLiveEventThumbnailAlt2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/live_events/{live_event_id}/pictures"
	localVarPath = strings.Replace(localVarPath, "{"+"live_event_id"+"}", url.PathEscape(parameterValueToString(r.liveEventId, "liveEventId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.vimeo.picture+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.picture+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createLiveEventThumbnailAlt1Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteLiveEventThumbnailRequest struct {
	ctx context.Context
	ApiService LiveEventThumbnailsAPI
	liveEventId float32
	thumbnailId float32
	userId float32
}

func (r ApiDeleteLiveEventThumbnailRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteLiveEventThumbnailExecute(r)
}

/*
DeleteLiveEventThumbnail Delete a live event thumbnail

This method deletes a thumbnail image for the specified event.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param liveEventId The ID of the event.
 @param thumbnailId The ID of the thumbnail.
 @param userId The ID of the user.
 @return ApiDeleteLiveEventThumbnailRequest
*/
func (a *LiveEventThumbnailsAPIService) DeleteLiveEventThumbnail(ctx context.Context, liveEventId float32, thumbnailId float32, userId float32) ApiDeleteLiveEventThumbnailRequest {
	return ApiDeleteLiveEventThumbnailRequest{
		ApiService: a,
		ctx: ctx,
		liveEventId: liveEventId,
		thumbnailId: thumbnailId,
		userId: userId,
	}
}

// Execute executes the request
func (a *LiveEventThumbnailsAPIService) DeleteLiveEventThumbnailExecute(r ApiDeleteLiveEventThumbnailRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LiveEventThumbnailsAPIService.DeleteLiveEventThumbnail")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/live_events/{live_event_id}/pictures/{thumbnail_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"live_event_id"+"}", url.PathEscape(parameterValueToString(r.liveEventId, "liveEventId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"thumbnail_id"+"}", url.PathEscape(parameterValueToString(r.thumbnailId, "thumbnailId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteLiveEventThumbnailAlt1Request struct {
	ctx context.Context
	ApiService LiveEventThumbnailsAPI
	liveEventId float32
	thumbnailId float32
}

func (r ApiDeleteLiveEventThumbnailAlt1Request) Execute() (*http.Response, error) {
	return r.ApiService.DeleteLiveEventThumbnailAlt1Execute(r)
}

/*
DeleteLiveEventThumbnailAlt1 Delete a live event thumbnail

This method deletes a thumbnail image for the specified event.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param liveEventId The ID of the event.
 @param thumbnailId The ID of the thumbnail.
 @return ApiDeleteLiveEventThumbnailAlt1Request
*/
func (a *LiveEventThumbnailsAPIService) DeleteLiveEventThumbnailAlt1(ctx context.Context, liveEventId float32, thumbnailId float32) ApiDeleteLiveEventThumbnailAlt1Request {
	return ApiDeleteLiveEventThumbnailAlt1Request{
		ApiService: a,
		ctx: ctx,
		liveEventId: liveEventId,
		thumbnailId: thumbnailId,
	}
}

// Execute executes the request
func (a *LiveEventThumbnailsAPIService) DeleteLiveEventThumbnailAlt1Execute(r ApiDeleteLiveEventThumbnailAlt1Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LiveEventThumbnailsAPIService.DeleteLiveEventThumbnailAlt1")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/live_events/{live_event_id}/pictures/{thumbnail_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"live_event_id"+"}", url.PathEscape(parameterValueToString(r.liveEventId, "liveEventId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"thumbnail_id"+"}", url.PathEscape(parameterValueToString(r.thumbnailId, "thumbnailId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteLiveEventThumbnailAlt2Request struct {
	ctx context.Context
	ApiService LiveEventThumbnailsAPI
	liveEventId float32
	thumbnailId float32
}

func (r ApiDeleteLiveEventThumbnailAlt2Request) Execute() (*http.Response, error) {
	return r.ApiService.DeleteLiveEventThumbnailAlt2Execute(r)
}

/*
DeleteLiveEventThumbnailAlt2 Delete a live event thumbnail

This method deletes a thumbnail image for the specified event.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param liveEventId The ID of the event.
 @param thumbnailId The ID of the thumbnail.
 @return ApiDeleteLiveEventThumbnailAlt2Request
*/
func (a *LiveEventThumbnailsAPIService) DeleteLiveEventThumbnailAlt2(ctx context.Context, liveEventId float32, thumbnailId float32) ApiDeleteLiveEventThumbnailAlt2Request {
	return ApiDeleteLiveEventThumbnailAlt2Request{
		ApiService: a,
		ctx: ctx,
		liveEventId: liveEventId,
		thumbnailId: thumbnailId,
	}
}

// Execute executes the request
func (a *LiveEventThumbnailsAPIService) DeleteLiveEventThumbnailAlt2Execute(r ApiDeleteLiveEventThumbnailAlt2Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LiveEventThumbnailsAPIService.DeleteLiveEventThumbnailAlt2")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/live_events/{live_event_id}/pictures/{thumbnail_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"live_event_id"+"}", url.PathEscape(parameterValueToString(r.liveEventId, "liveEventId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"thumbnail_id"+"}", url.PathEscape(parameterValueToString(r.thumbnailId, "thumbnailId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEditLiveEventThumbnailRequest struct {
	ctx context.Context
	ApiService LiveEventThumbnailsAPI
	liveEventId float32
	thumbnailId float32
	userId float32
	createLiveEventThumbnailAlt1Request *CreateLiveEventThumbnailAlt1Request
}

func (r ApiEditLiveEventThumbnailRequest) CreateLiveEventThumbnailAlt1Request(createLiveEventThumbnailAlt1Request CreateLiveEventThumbnailAlt1Request) ApiEditLiveEventThumbnailRequest {
	r.createLiveEventThumbnailAlt1Request = &createLiveEventThumbnailAlt1Request
	return r
}

func (r ApiEditLiveEventThumbnailRequest) Execute() (*Picture, *http.Response, error) {
	return r.ApiService.EditLiveEventThumbnailExecute(r)
}

/*
EditLiveEventThumbnail Edit a live event thumbnail

This method edits a thumbnail image for the specified event.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param liveEventId The ID of the event.
 @param thumbnailId The ID of the thumbnail.
 @param userId The ID of the user.
 @return ApiEditLiveEventThumbnailRequest
*/
func (a *LiveEventThumbnailsAPIService) EditLiveEventThumbnail(ctx context.Context, liveEventId float32, thumbnailId float32, userId float32) ApiEditLiveEventThumbnailRequest {
	return ApiEditLiveEventThumbnailRequest{
		ApiService: a,
		ctx: ctx,
		liveEventId: liveEventId,
		thumbnailId: thumbnailId,
		userId: userId,
	}
}

// Execute executes the request
//  @return Picture
func (a *LiveEventThumbnailsAPIService) EditLiveEventThumbnailExecute(r ApiEditLiveEventThumbnailRequest) (*Picture, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Picture
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LiveEventThumbnailsAPIService.EditLiveEventThumbnail")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/live_events/{live_event_id}/pictures/{thumbnail_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"live_event_id"+"}", url.PathEscape(parameterValueToString(r.liveEventId, "liveEventId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"thumbnail_id"+"}", url.PathEscape(parameterValueToString(r.thumbnailId, "thumbnailId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.vimeo.picture+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.picture+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createLiveEventThumbnailAlt1Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEditLiveEventThumbnailAlt1Request struct {
	ctx context.Context
	ApiService LiveEventThumbnailsAPI
	liveEventId float32
	thumbnailId float32
	createLiveEventThumbnailAlt1Request *CreateLiveEventThumbnailAlt1Request
}

func (r ApiEditLiveEventThumbnailAlt1Request) CreateLiveEventThumbnailAlt1Request(createLiveEventThumbnailAlt1Request CreateLiveEventThumbnailAlt1Request) ApiEditLiveEventThumbnailAlt1Request {
	r.createLiveEventThumbnailAlt1Request = &createLiveEventThumbnailAlt1Request
	return r
}

func (r ApiEditLiveEventThumbnailAlt1Request) Execute() (*Picture, *http.Response, error) {
	return r.ApiService.EditLiveEventThumbnailAlt1Execute(r)
}

/*
EditLiveEventThumbnailAlt1 Edit a live event thumbnail

This method edits a thumbnail image for the specified event.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param liveEventId The ID of the event.
 @param thumbnailId The ID of the thumbnail.
 @return ApiEditLiveEventThumbnailAlt1Request
*/
func (a *LiveEventThumbnailsAPIService) EditLiveEventThumbnailAlt1(ctx context.Context, liveEventId float32, thumbnailId float32) ApiEditLiveEventThumbnailAlt1Request {
	return ApiEditLiveEventThumbnailAlt1Request{
		ApiService: a,
		ctx: ctx,
		liveEventId: liveEventId,
		thumbnailId: thumbnailId,
	}
}

// Execute executes the request
//  @return Picture
func (a *LiveEventThumbnailsAPIService) EditLiveEventThumbnailAlt1Execute(r ApiEditLiveEventThumbnailAlt1Request) (*Picture, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Picture
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LiveEventThumbnailsAPIService.EditLiveEventThumbnailAlt1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/live_events/{live_event_id}/pictures/{thumbnail_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"live_event_id"+"}", url.PathEscape(parameterValueToString(r.liveEventId, "liveEventId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"thumbnail_id"+"}", url.PathEscape(parameterValueToString(r.thumbnailId, "thumbnailId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.vimeo.picture+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.picture+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createLiveEventThumbnailAlt1Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEditLiveEventThumbnailAlt2Request struct {
	ctx context.Context
	ApiService LiveEventThumbnailsAPI
	liveEventId float32
	thumbnailId float32
	createLiveEventThumbnailAlt1Request *CreateLiveEventThumbnailAlt1Request
}

func (r ApiEditLiveEventThumbnailAlt2Request) CreateLiveEventThumbnailAlt1Request(createLiveEventThumbnailAlt1Request CreateLiveEventThumbnailAlt1Request) ApiEditLiveEventThumbnailAlt2Request {
	r.createLiveEventThumbnailAlt1Request = &createLiveEventThumbnailAlt1Request
	return r
}

func (r ApiEditLiveEventThumbnailAlt2Request) Execute() (*Picture, *http.Response, error) {
	return r.ApiService.EditLiveEventThumbnailAlt2Execute(r)
}

/*
EditLiveEventThumbnailAlt2 Edit a live event thumbnail

This method edits a thumbnail image for the specified event.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param liveEventId The ID of the event.
 @param thumbnailId The ID of the thumbnail.
 @return ApiEditLiveEventThumbnailAlt2Request
*/
func (a *LiveEventThumbnailsAPIService) EditLiveEventThumbnailAlt2(ctx context.Context, liveEventId float32, thumbnailId float32) ApiEditLiveEventThumbnailAlt2Request {
	return ApiEditLiveEventThumbnailAlt2Request{
		ApiService: a,
		ctx: ctx,
		liveEventId: liveEventId,
		thumbnailId: thumbnailId,
	}
}

// Execute executes the request
//  @return Picture
func (a *LiveEventThumbnailsAPIService) EditLiveEventThumbnailAlt2Execute(r ApiEditLiveEventThumbnailAlt2Request) (*Picture, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Picture
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LiveEventThumbnailsAPIService.EditLiveEventThumbnailAlt2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/live_events/{live_event_id}/pictures/{thumbnail_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"live_event_id"+"}", url.PathEscape(parameterValueToString(r.liveEventId, "liveEventId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"thumbnail_id"+"}", url.PathEscape(parameterValueToString(r.thumbnailId, "thumbnailId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.vimeo.picture+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.picture+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createLiveEventThumbnailAlt1Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLiveEventThumbnailRequest struct {
	ctx context.Context
	ApiService LiveEventThumbnailsAPI
	liveEventId float32
	thumbnailId float32
	userId float32
}

func (r ApiGetLiveEventThumbnailRequest) Execute() (*Picture, *http.Response, error) {
	return r.ApiService.GetLiveEventThumbnailExecute(r)
}

/*
GetLiveEventThumbnail Get a specific live event thumbnail

This method returns a single thumbnail image of the specified event.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param liveEventId The ID of the event.
 @param thumbnailId The ID of the thumbnail.
 @param userId The ID of the user.
 @return ApiGetLiveEventThumbnailRequest
*/
func (a *LiveEventThumbnailsAPIService) GetLiveEventThumbnail(ctx context.Context, liveEventId float32, thumbnailId float32, userId float32) ApiGetLiveEventThumbnailRequest {
	return ApiGetLiveEventThumbnailRequest{
		ApiService: a,
		ctx: ctx,
		liveEventId: liveEventId,
		thumbnailId: thumbnailId,
		userId: userId,
	}
}

// Execute executes the request
//  @return Picture
func (a *LiveEventThumbnailsAPIService) GetLiveEventThumbnailExecute(r ApiGetLiveEventThumbnailRequest) (*Picture, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Picture
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LiveEventThumbnailsAPIService.GetLiveEventThumbnail")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/live_events/{live_event_id}/pictures/{thumbnail_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"live_event_id"+"}", url.PathEscape(parameterValueToString(r.liveEventId, "liveEventId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"thumbnail_id"+"}", url.PathEscape(parameterValueToString(r.thumbnailId, "thumbnailId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.picture+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLiveEventThumbnailAlt1Request struct {
	ctx context.Context
	ApiService LiveEventThumbnailsAPI
	liveEventId float32
	thumbnailId float32
}

func (r ApiGetLiveEventThumbnailAlt1Request) Execute() (*Picture, *http.Response, error) {
	return r.ApiService.GetLiveEventThumbnailAlt1Execute(r)
}

/*
GetLiveEventThumbnailAlt1 Get a specific live event thumbnail

This method returns a single thumbnail image of the specified event.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param liveEventId The ID of the event.
 @param thumbnailId The ID of the thumbnail.
 @return ApiGetLiveEventThumbnailAlt1Request
*/
func (a *LiveEventThumbnailsAPIService) GetLiveEventThumbnailAlt1(ctx context.Context, liveEventId float32, thumbnailId float32) ApiGetLiveEventThumbnailAlt1Request {
	return ApiGetLiveEventThumbnailAlt1Request{
		ApiService: a,
		ctx: ctx,
		liveEventId: liveEventId,
		thumbnailId: thumbnailId,
	}
}

// Execute executes the request
//  @return Picture
func (a *LiveEventThumbnailsAPIService) GetLiveEventThumbnailAlt1Execute(r ApiGetLiveEventThumbnailAlt1Request) (*Picture, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Picture
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LiveEventThumbnailsAPIService.GetLiveEventThumbnailAlt1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/live_events/{live_event_id}/pictures/{thumbnail_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"live_event_id"+"}", url.PathEscape(parameterValueToString(r.liveEventId, "liveEventId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"thumbnail_id"+"}", url.PathEscape(parameterValueToString(r.thumbnailId, "thumbnailId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.picture+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLiveEventThumbnailAlt2Request struct {
	ctx context.Context
	ApiService LiveEventThumbnailsAPI
	liveEventId float32
	thumbnailId float32
}

func (r ApiGetLiveEventThumbnailAlt2Request) Execute() (*Picture, *http.Response, error) {
	return r.ApiService.GetLiveEventThumbnailAlt2Execute(r)
}

/*
GetLiveEventThumbnailAlt2 Get a specific live event thumbnail

This method returns a single thumbnail image of the specified event.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param liveEventId The ID of the event.
 @param thumbnailId The ID of the thumbnail.
 @return ApiGetLiveEventThumbnailAlt2Request
*/
func (a *LiveEventThumbnailsAPIService) GetLiveEventThumbnailAlt2(ctx context.Context, liveEventId float32, thumbnailId float32) ApiGetLiveEventThumbnailAlt2Request {
	return ApiGetLiveEventThumbnailAlt2Request{
		ApiService: a,
		ctx: ctx,
		liveEventId: liveEventId,
		thumbnailId: thumbnailId,
	}
}

// Execute executes the request
//  @return Picture
func (a *LiveEventThumbnailsAPIService) GetLiveEventThumbnailAlt2Execute(r ApiGetLiveEventThumbnailAlt2Request) (*Picture, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Picture
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LiveEventThumbnailsAPIService.GetLiveEventThumbnailAlt2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/live_events/{live_event_id}/pictures/{thumbnail_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"live_event_id"+"}", url.PathEscape(parameterValueToString(r.liveEventId, "liveEventId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"thumbnail_id"+"}", url.PathEscape(parameterValueToString(r.thumbnailId, "thumbnailId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.picture+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLiveEventThumbnailsRequest struct {
	ctx context.Context
	ApiService LiveEventThumbnailsAPI
	liveEventId float32
	userId float32
}

func (r ApiGetLiveEventThumbnailsRequest) Execute() ([]Picture, *http.Response, error) {
	return r.ApiService.GetLiveEventThumbnailsExecute(r)
}

/*
GetLiveEventThumbnails Get all the thumbnails of a live event

This method returns every thumbnail image of the specified event.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param liveEventId The ID of the event.
 @param userId The ID of the user.
 @return ApiGetLiveEventThumbnailsRequest
*/
func (a *LiveEventThumbnailsAPIService) GetLiveEventThumbnails(ctx context.Context, liveEventId float32, userId float32) ApiGetLiveEventThumbnailsRequest {
	return ApiGetLiveEventThumbnailsRequest{
		ApiService: a,
		ctx: ctx,
		liveEventId: liveEventId,
		userId: userId,
	}
}

// Execute executes the request
//  @return []Picture
func (a *LiveEventThumbnailsAPIService) GetLiveEventThumbnailsExecute(r ApiGetLiveEventThumbnailsRequest) ([]Picture, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Picture
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LiveEventThumbnailsAPIService.GetLiveEventThumbnails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/live_events/{live_event_id}/pictures"
	localVarPath = strings.Replace(localVarPath, "{"+"live_event_id"+"}", url.PathEscape(parameterValueToString(r.liveEventId, "liveEventId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.picture+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLiveEventThumbnailsAlt1Request struct {
	ctx context.Context
	ApiService LiveEventThumbnailsAPI
	liveEventId float32
}

func (r ApiGetLiveEventThumbnailsAlt1Request) Execute() ([]Picture, *http.Response, error) {
	return r.ApiService.GetLiveEventThumbnailsAlt1Execute(r)
}

/*
GetLiveEventThumbnailsAlt1 Get all the thumbnails of a live event

This method returns every thumbnail image of the specified event.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param liveEventId The ID of the event.
 @return ApiGetLiveEventThumbnailsAlt1Request
*/
func (a *LiveEventThumbnailsAPIService) GetLiveEventThumbnailsAlt1(ctx context.Context, liveEventId float32) ApiGetLiveEventThumbnailsAlt1Request {
	return ApiGetLiveEventThumbnailsAlt1Request{
		ApiService: a,
		ctx: ctx,
		liveEventId: liveEventId,
	}
}

// Execute executes the request
//  @return []Picture
func (a *LiveEventThumbnailsAPIService) GetLiveEventThumbnailsAlt1Execute(r ApiGetLiveEventThumbnailsAlt1Request) ([]Picture, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Picture
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LiveEventThumbnailsAPIService.GetLiveEventThumbnailsAlt1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/live_events/{live_event_id}/pictures"
	localVarPath = strings.Replace(localVarPath, "{"+"live_event_id"+"}", url.PathEscape(parameterValueToString(r.liveEventId, "liveEventId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.picture+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLiveEventThumbnailsAlt2Request struct {
	ctx context.Context
	ApiService LiveEventThumbnailsAPI
	liveEventId float32
}

func (r ApiGetLiveEventThumbnailsAlt2Request) Execute() ([]Picture, *http.Response, error) {
	return r.ApiService.GetLiveEventThumbnailsAlt2Execute(r)
}

/*
GetLiveEventThumbnailsAlt2 Get all the thumbnails of a live event

This method returns every thumbnail image of the specified event.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param liveEventId The ID of the event.
 @return ApiGetLiveEventThumbnailsAlt2Request
*/
func (a *LiveEventThumbnailsAPIService) GetLiveEventThumbnailsAlt2(ctx context.Context, liveEventId float32) ApiGetLiveEventThumbnailsAlt2Request {
	return ApiGetLiveEventThumbnailsAlt2Request{
		ApiService: a,
		ctx: ctx,
		liveEventId: liveEventId,
	}
}

// Execute executes the request
//  @return []Picture
func (a *LiveEventThumbnailsAPIService) GetLiveEventThumbnailsAlt2Execute(r ApiGetLiveEventThumbnailsAlt2Request) ([]Picture, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Picture
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LiveEventThumbnailsAPIService.GetLiveEventThumbnailsAlt2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/live_events/{live_event_id}/pictures"
	localVarPath = strings.Replace(localVarPath, "{"+"live_event_id"+"}", url.PathEscape(parameterValueToString(r.liveEventId, "liveEventId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.picture+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
