/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the UpdateLiveEventAlt1Request type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateLiveEventAlt1Request{}

// UpdateLiveEventAlt1Request struct for UpdateLiveEventAlt1Request
type UpdateLiveEventAlt1Request struct {
	// Whether automated closed captions are enabled for the event.
	AutoCcEnabled *bool `json:"auto_cc_enabled,omitempty"`
	// A comma-separated list of keywords for enhancing the speech detection of automated closed captions.
	AutoCcKeywords *string `json:"auto_cc_keywords,omitempty"`
	// The language of the automated closed captions.  Option descriptions:  * `de-DE` - The language is German.  * `en-US` - The language is English.  * `es-ES` - The language is Spanish.  * `fr-FR` - The language is French.  * `pt-BR` - The language is Portuguese. 
	AutoCcLanguage *string `json:"auto_cc_language,omitempty"`
	// Whether the title for the next video in the event is generated based on the time of the stream and the **title** field of the event.
	AutomaticallyTitleStream *bool `json:"automatically_title_stream,omitempty"`
	// Whether to display the live chat client on the Vimeo event page.
	ChatEnabled *bool `json:"chat_enabled,omitempty"`
	// A list of values describing the content in this event. To return the list of all possible content rating values, use the [`/contentratings`](https://developer.vimeo.com/api/reference/videos#get_content_ratings) endpoint.
	ContentRating []string `json:"content_rating,omitempty"`
	// Whether the DVR feature is enabled.
	Dvr *bool `json:"dvr,omitempty"`
	Embed *UpdateLiveEventAlt1RequestEmbed `json:"embed,omitempty"`
	InteractionToolsSettings *CreateLiveEventAlt1RequestInteractionToolsSettings `json:"interaction_tools_settings,omitempty"`
	// The order in which the videos of the event appear within the event's playlist.  Option descriptions:  * `added_first` - The most recently added videos appear first.  * `added_last` - The most recently added videos appear last.  * `alphabetical` - The videos appear in alphabetical order.  * `arranged` - The videos appear in the order in which the user has arranged them.  * `comments` - The videos appear in order of number of comments.  * `duration` - The videos appear in order of duration.  * `likes` - The videos appear in order of number of likes.  * `newest` - The newest videos appear first.  * `oldest` - The oldest videos appear first.  * `plays` - The videos appear in order of number of plays. 
	PlaylistSort *string `json:"playlist_sort,omitempty"`
	Schedule *CreateLiveEventAlt1RequestSchedule `json:"schedule,omitempty"`
	// Whether the scheduled playback feature is enabled.
	ScheduledPlayback *bool `json:"scheduled_playback,omitempty"`
	// The description of the next video to be streamed to the event.
	StreamDescription *string `json:"stream_description,omitempty"`
	StreamEmbed *CreateLiveEventAlt1RequestStreamEmbed `json:"stream_embed,omitempty"`
	// The stream mode of the event.  Option descriptions:  * `live` - The stream is live playback.  * `record` - The stream is in record mode.  * `simulive` - The stream is scheduled media playback. 
	StreamMode *string `json:"stream_mode,omitempty"`
	// The password when **stream_privacy.view** is `password`. Anyone with the password can view the videos generated by streaming to the event.
	StreamPassword *string `json:"stream_password,omitempty"`
	StreamPrivacy *CreateLiveEventAlt1RequestStreamPrivacy `json:"stream_privacy,omitempty"`
	// The title of the next video to be streamed to the event. This parameter is required when **automatically_title_stream** is `false`.
	StreamTitle *string `json:"stream_title,omitempty"`
	// The time zone used in resolving the timestamps that are included in automatically generated video titles.
	TimeZone *string `json:"time_zone,omitempty"`
	// The title of the event. If **automatically_title_stream** is `true`, this value is the base title for videos created by streaming to this event.
	Title *string `json:"title,omitempty"`
}

// NewUpdateLiveEventAlt1Request instantiates a new UpdateLiveEventAlt1Request object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateLiveEventAlt1Request() *UpdateLiveEventAlt1Request {
	this := UpdateLiveEventAlt1Request{}
	return &this
}

// NewUpdateLiveEventAlt1RequestWithDefaults instantiates a new UpdateLiveEventAlt1Request object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateLiveEventAlt1RequestWithDefaults() *UpdateLiveEventAlt1Request {
	this := UpdateLiveEventAlt1Request{}
	return &this
}

// GetAutoCcEnabled returns the AutoCcEnabled field value if set, zero value otherwise.
func (o *UpdateLiveEventAlt1Request) GetAutoCcEnabled() bool {
	if o == nil || IsNil(o.AutoCcEnabled) {
		var ret bool
		return ret
	}
	return *o.AutoCcEnabled
}

// GetAutoCcEnabledOk returns a tuple with the AutoCcEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLiveEventAlt1Request) GetAutoCcEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoCcEnabled) {
		return nil, false
	}
	return o.AutoCcEnabled, true
}

// HasAutoCcEnabled returns a boolean if a field has been set.
func (o *UpdateLiveEventAlt1Request) HasAutoCcEnabled() bool {
	if o != nil && !IsNil(o.AutoCcEnabled) {
		return true
	}

	return false
}

// SetAutoCcEnabled gets a reference to the given bool and assigns it to the AutoCcEnabled field.
func (o *UpdateLiveEventAlt1Request) SetAutoCcEnabled(v bool) {
	o.AutoCcEnabled = &v
}

// GetAutoCcKeywords returns the AutoCcKeywords field value if set, zero value otherwise.
func (o *UpdateLiveEventAlt1Request) GetAutoCcKeywords() string {
	if o == nil || IsNil(o.AutoCcKeywords) {
		var ret string
		return ret
	}
	return *o.AutoCcKeywords
}

// GetAutoCcKeywordsOk returns a tuple with the AutoCcKeywords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLiveEventAlt1Request) GetAutoCcKeywordsOk() (*string, bool) {
	if o == nil || IsNil(o.AutoCcKeywords) {
		return nil, false
	}
	return o.AutoCcKeywords, true
}

// HasAutoCcKeywords returns a boolean if a field has been set.
func (o *UpdateLiveEventAlt1Request) HasAutoCcKeywords() bool {
	if o != nil && !IsNil(o.AutoCcKeywords) {
		return true
	}

	return false
}

// SetAutoCcKeywords gets a reference to the given string and assigns it to the AutoCcKeywords field.
func (o *UpdateLiveEventAlt1Request) SetAutoCcKeywords(v string) {
	o.AutoCcKeywords = &v
}

// GetAutoCcLanguage returns the AutoCcLanguage field value if set, zero value otherwise.
func (o *UpdateLiveEventAlt1Request) GetAutoCcLanguage() string {
	if o == nil || IsNil(o.AutoCcLanguage) {
		var ret string
		return ret
	}
	return *o.AutoCcLanguage
}

// GetAutoCcLanguageOk returns a tuple with the AutoCcLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLiveEventAlt1Request) GetAutoCcLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.AutoCcLanguage) {
		return nil, false
	}
	return o.AutoCcLanguage, true
}

// HasAutoCcLanguage returns a boolean if a field has been set.
func (o *UpdateLiveEventAlt1Request) HasAutoCcLanguage() bool {
	if o != nil && !IsNil(o.AutoCcLanguage) {
		return true
	}

	return false
}

// SetAutoCcLanguage gets a reference to the given string and assigns it to the AutoCcLanguage field.
func (o *UpdateLiveEventAlt1Request) SetAutoCcLanguage(v string) {
	o.AutoCcLanguage = &v
}

// GetAutomaticallyTitleStream returns the AutomaticallyTitleStream field value if set, zero value otherwise.
func (o *UpdateLiveEventAlt1Request) GetAutomaticallyTitleStream() bool {
	if o == nil || IsNil(o.AutomaticallyTitleStream) {
		var ret bool
		return ret
	}
	return *o.AutomaticallyTitleStream
}

// GetAutomaticallyTitleStreamOk returns a tuple with the AutomaticallyTitleStream field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLiveEventAlt1Request) GetAutomaticallyTitleStreamOk() (*bool, bool) {
	if o == nil || IsNil(o.AutomaticallyTitleStream) {
		return nil, false
	}
	return o.AutomaticallyTitleStream, true
}

// HasAutomaticallyTitleStream returns a boolean if a field has been set.
func (o *UpdateLiveEventAlt1Request) HasAutomaticallyTitleStream() bool {
	if o != nil && !IsNil(o.AutomaticallyTitleStream) {
		return true
	}

	return false
}

// SetAutomaticallyTitleStream gets a reference to the given bool and assigns it to the AutomaticallyTitleStream field.
func (o *UpdateLiveEventAlt1Request) SetAutomaticallyTitleStream(v bool) {
	o.AutomaticallyTitleStream = &v
}

// GetChatEnabled returns the ChatEnabled field value if set, zero value otherwise.
func (o *UpdateLiveEventAlt1Request) GetChatEnabled() bool {
	if o == nil || IsNil(o.ChatEnabled) {
		var ret bool
		return ret
	}
	return *o.ChatEnabled
}

// GetChatEnabledOk returns a tuple with the ChatEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLiveEventAlt1Request) GetChatEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ChatEnabled) {
		return nil, false
	}
	return o.ChatEnabled, true
}

// HasChatEnabled returns a boolean if a field has been set.
func (o *UpdateLiveEventAlt1Request) HasChatEnabled() bool {
	if o != nil && !IsNil(o.ChatEnabled) {
		return true
	}

	return false
}

// SetChatEnabled gets a reference to the given bool and assigns it to the ChatEnabled field.
func (o *UpdateLiveEventAlt1Request) SetChatEnabled(v bool) {
	o.ChatEnabled = &v
}

// GetContentRating returns the ContentRating field value if set, zero value otherwise.
func (o *UpdateLiveEventAlt1Request) GetContentRating() []string {
	if o == nil || IsNil(o.ContentRating) {
		var ret []string
		return ret
	}
	return o.ContentRating
}

// GetContentRatingOk returns a tuple with the ContentRating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLiveEventAlt1Request) GetContentRatingOk() ([]string, bool) {
	if o == nil || IsNil(o.ContentRating) {
		return nil, false
	}
	return o.ContentRating, true
}

// HasContentRating returns a boolean if a field has been set.
func (o *UpdateLiveEventAlt1Request) HasContentRating() bool {
	if o != nil && !IsNil(o.ContentRating) {
		return true
	}

	return false
}

// SetContentRating gets a reference to the given []string and assigns it to the ContentRating field.
func (o *UpdateLiveEventAlt1Request) SetContentRating(v []string) {
	o.ContentRating = v
}

// GetDvr returns the Dvr field value if set, zero value otherwise.
func (o *UpdateLiveEventAlt1Request) GetDvr() bool {
	if o == nil || IsNil(o.Dvr) {
		var ret bool
		return ret
	}
	return *o.Dvr
}

// GetDvrOk returns a tuple with the Dvr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLiveEventAlt1Request) GetDvrOk() (*bool, bool) {
	if o == nil || IsNil(o.Dvr) {
		return nil, false
	}
	return o.Dvr, true
}

// HasDvr returns a boolean if a field has been set.
func (o *UpdateLiveEventAlt1Request) HasDvr() bool {
	if o != nil && !IsNil(o.Dvr) {
		return true
	}

	return false
}

// SetDvr gets a reference to the given bool and assigns it to the Dvr field.
func (o *UpdateLiveEventAlt1Request) SetDvr(v bool) {
	o.Dvr = &v
}

// GetEmbed returns the Embed field value if set, zero value otherwise.
func (o *UpdateLiveEventAlt1Request) GetEmbed() UpdateLiveEventAlt1RequestEmbed {
	if o == nil || IsNil(o.Embed) {
		var ret UpdateLiveEventAlt1RequestEmbed
		return ret
	}
	return *o.Embed
}

// GetEmbedOk returns a tuple with the Embed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLiveEventAlt1Request) GetEmbedOk() (*UpdateLiveEventAlt1RequestEmbed, bool) {
	if o == nil || IsNil(o.Embed) {
		return nil, false
	}
	return o.Embed, true
}

// HasEmbed returns a boolean if a field has been set.
func (o *UpdateLiveEventAlt1Request) HasEmbed() bool {
	if o != nil && !IsNil(o.Embed) {
		return true
	}

	return false
}

// SetEmbed gets a reference to the given UpdateLiveEventAlt1RequestEmbed and assigns it to the Embed field.
func (o *UpdateLiveEventAlt1Request) SetEmbed(v UpdateLiveEventAlt1RequestEmbed) {
	o.Embed = &v
}

// GetInteractionToolsSettings returns the InteractionToolsSettings field value if set, zero value otherwise.
func (o *UpdateLiveEventAlt1Request) GetInteractionToolsSettings() CreateLiveEventAlt1RequestInteractionToolsSettings {
	if o == nil || IsNil(o.InteractionToolsSettings) {
		var ret CreateLiveEventAlt1RequestInteractionToolsSettings
		return ret
	}
	return *o.InteractionToolsSettings
}

// GetInteractionToolsSettingsOk returns a tuple with the InteractionToolsSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLiveEventAlt1Request) GetInteractionToolsSettingsOk() (*CreateLiveEventAlt1RequestInteractionToolsSettings, bool) {
	if o == nil || IsNil(o.InteractionToolsSettings) {
		return nil, false
	}
	return o.InteractionToolsSettings, true
}

// HasInteractionToolsSettings returns a boolean if a field has been set.
func (o *UpdateLiveEventAlt1Request) HasInteractionToolsSettings() bool {
	if o != nil && !IsNil(o.InteractionToolsSettings) {
		return true
	}

	return false
}

// SetInteractionToolsSettings gets a reference to the given CreateLiveEventAlt1RequestInteractionToolsSettings and assigns it to the InteractionToolsSettings field.
func (o *UpdateLiveEventAlt1Request) SetInteractionToolsSettings(v CreateLiveEventAlt1RequestInteractionToolsSettings) {
	o.InteractionToolsSettings = &v
}

// GetPlaylistSort returns the PlaylistSort field value if set, zero value otherwise.
func (o *UpdateLiveEventAlt1Request) GetPlaylistSort() string {
	if o == nil || IsNil(o.PlaylistSort) {
		var ret string
		return ret
	}
	return *o.PlaylistSort
}

// GetPlaylistSortOk returns a tuple with the PlaylistSort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLiveEventAlt1Request) GetPlaylistSortOk() (*string, bool) {
	if o == nil || IsNil(o.PlaylistSort) {
		return nil, false
	}
	return o.PlaylistSort, true
}

// HasPlaylistSort returns a boolean if a field has been set.
func (o *UpdateLiveEventAlt1Request) HasPlaylistSort() bool {
	if o != nil && !IsNil(o.PlaylistSort) {
		return true
	}

	return false
}

// SetPlaylistSort gets a reference to the given string and assigns it to the PlaylistSort field.
func (o *UpdateLiveEventAlt1Request) SetPlaylistSort(v string) {
	o.PlaylistSort = &v
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *UpdateLiveEventAlt1Request) GetSchedule() CreateLiveEventAlt1RequestSchedule {
	if o == nil || IsNil(o.Schedule) {
		var ret CreateLiveEventAlt1RequestSchedule
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLiveEventAlt1Request) GetScheduleOk() (*CreateLiveEventAlt1RequestSchedule, bool) {
	if o == nil || IsNil(o.Schedule) {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *UpdateLiveEventAlt1Request) HasSchedule() bool {
	if o != nil && !IsNil(o.Schedule) {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given CreateLiveEventAlt1RequestSchedule and assigns it to the Schedule field.
func (o *UpdateLiveEventAlt1Request) SetSchedule(v CreateLiveEventAlt1RequestSchedule) {
	o.Schedule = &v
}

// GetScheduledPlayback returns the ScheduledPlayback field value if set, zero value otherwise.
func (o *UpdateLiveEventAlt1Request) GetScheduledPlayback() bool {
	if o == nil || IsNil(o.ScheduledPlayback) {
		var ret bool
		return ret
	}
	return *o.ScheduledPlayback
}

// GetScheduledPlaybackOk returns a tuple with the ScheduledPlayback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLiveEventAlt1Request) GetScheduledPlaybackOk() (*bool, bool) {
	if o == nil || IsNil(o.ScheduledPlayback) {
		return nil, false
	}
	return o.ScheduledPlayback, true
}

// HasScheduledPlayback returns a boolean if a field has been set.
func (o *UpdateLiveEventAlt1Request) HasScheduledPlayback() bool {
	if o != nil && !IsNil(o.ScheduledPlayback) {
		return true
	}

	return false
}

// SetScheduledPlayback gets a reference to the given bool and assigns it to the ScheduledPlayback field.
func (o *UpdateLiveEventAlt1Request) SetScheduledPlayback(v bool) {
	o.ScheduledPlayback = &v
}

// GetStreamDescription returns the StreamDescription field value if set, zero value otherwise.
func (o *UpdateLiveEventAlt1Request) GetStreamDescription() string {
	if o == nil || IsNil(o.StreamDescription) {
		var ret string
		return ret
	}
	return *o.StreamDescription
}

// GetStreamDescriptionOk returns a tuple with the StreamDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLiveEventAlt1Request) GetStreamDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.StreamDescription) {
		return nil, false
	}
	return o.StreamDescription, true
}

// HasStreamDescription returns a boolean if a field has been set.
func (o *UpdateLiveEventAlt1Request) HasStreamDescription() bool {
	if o != nil && !IsNil(o.StreamDescription) {
		return true
	}

	return false
}

// SetStreamDescription gets a reference to the given string and assigns it to the StreamDescription field.
func (o *UpdateLiveEventAlt1Request) SetStreamDescription(v string) {
	o.StreamDescription = &v
}

// GetStreamEmbed returns the StreamEmbed field value if set, zero value otherwise.
func (o *UpdateLiveEventAlt1Request) GetStreamEmbed() CreateLiveEventAlt1RequestStreamEmbed {
	if o == nil || IsNil(o.StreamEmbed) {
		var ret CreateLiveEventAlt1RequestStreamEmbed
		return ret
	}
	return *o.StreamEmbed
}

// GetStreamEmbedOk returns a tuple with the StreamEmbed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLiveEventAlt1Request) GetStreamEmbedOk() (*CreateLiveEventAlt1RequestStreamEmbed, bool) {
	if o == nil || IsNil(o.StreamEmbed) {
		return nil, false
	}
	return o.StreamEmbed, true
}

// HasStreamEmbed returns a boolean if a field has been set.
func (o *UpdateLiveEventAlt1Request) HasStreamEmbed() bool {
	if o != nil && !IsNil(o.StreamEmbed) {
		return true
	}

	return false
}

// SetStreamEmbed gets a reference to the given CreateLiveEventAlt1RequestStreamEmbed and assigns it to the StreamEmbed field.
func (o *UpdateLiveEventAlt1Request) SetStreamEmbed(v CreateLiveEventAlt1RequestStreamEmbed) {
	o.StreamEmbed = &v
}

// GetStreamMode returns the StreamMode field value if set, zero value otherwise.
func (o *UpdateLiveEventAlt1Request) GetStreamMode() string {
	if o == nil || IsNil(o.StreamMode) {
		var ret string
		return ret
	}
	return *o.StreamMode
}

// GetStreamModeOk returns a tuple with the StreamMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLiveEventAlt1Request) GetStreamModeOk() (*string, bool) {
	if o == nil || IsNil(o.StreamMode) {
		return nil, false
	}
	return o.StreamMode, true
}

// HasStreamMode returns a boolean if a field has been set.
func (o *UpdateLiveEventAlt1Request) HasStreamMode() bool {
	if o != nil && !IsNil(o.StreamMode) {
		return true
	}

	return false
}

// SetStreamMode gets a reference to the given string and assigns it to the StreamMode field.
func (o *UpdateLiveEventAlt1Request) SetStreamMode(v string) {
	o.StreamMode = &v
}

// GetStreamPassword returns the StreamPassword field value if set, zero value otherwise.
func (o *UpdateLiveEventAlt1Request) GetStreamPassword() string {
	if o == nil || IsNil(o.StreamPassword) {
		var ret string
		return ret
	}
	return *o.StreamPassword
}

// GetStreamPasswordOk returns a tuple with the StreamPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLiveEventAlt1Request) GetStreamPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.StreamPassword) {
		return nil, false
	}
	return o.StreamPassword, true
}

// HasStreamPassword returns a boolean if a field has been set.
func (o *UpdateLiveEventAlt1Request) HasStreamPassword() bool {
	if o != nil && !IsNil(o.StreamPassword) {
		return true
	}

	return false
}

// SetStreamPassword gets a reference to the given string and assigns it to the StreamPassword field.
func (o *UpdateLiveEventAlt1Request) SetStreamPassword(v string) {
	o.StreamPassword = &v
}

// GetStreamPrivacy returns the StreamPrivacy field value if set, zero value otherwise.
func (o *UpdateLiveEventAlt1Request) GetStreamPrivacy() CreateLiveEventAlt1RequestStreamPrivacy {
	if o == nil || IsNil(o.StreamPrivacy) {
		var ret CreateLiveEventAlt1RequestStreamPrivacy
		return ret
	}
	return *o.StreamPrivacy
}

// GetStreamPrivacyOk returns a tuple with the StreamPrivacy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLiveEventAlt1Request) GetStreamPrivacyOk() (*CreateLiveEventAlt1RequestStreamPrivacy, bool) {
	if o == nil || IsNil(o.StreamPrivacy) {
		return nil, false
	}
	return o.StreamPrivacy, true
}

// HasStreamPrivacy returns a boolean if a field has been set.
func (o *UpdateLiveEventAlt1Request) HasStreamPrivacy() bool {
	if o != nil && !IsNil(o.StreamPrivacy) {
		return true
	}

	return false
}

// SetStreamPrivacy gets a reference to the given CreateLiveEventAlt1RequestStreamPrivacy and assigns it to the StreamPrivacy field.
func (o *UpdateLiveEventAlt1Request) SetStreamPrivacy(v CreateLiveEventAlt1RequestStreamPrivacy) {
	o.StreamPrivacy = &v
}

// GetStreamTitle returns the StreamTitle field value if set, zero value otherwise.
func (o *UpdateLiveEventAlt1Request) GetStreamTitle() string {
	if o == nil || IsNil(o.StreamTitle) {
		var ret string
		return ret
	}
	return *o.StreamTitle
}

// GetStreamTitleOk returns a tuple with the StreamTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLiveEventAlt1Request) GetStreamTitleOk() (*string, bool) {
	if o == nil || IsNil(o.StreamTitle) {
		return nil, false
	}
	return o.StreamTitle, true
}

// HasStreamTitle returns a boolean if a field has been set.
func (o *UpdateLiveEventAlt1Request) HasStreamTitle() bool {
	if o != nil && !IsNil(o.StreamTitle) {
		return true
	}

	return false
}

// SetStreamTitle gets a reference to the given string and assigns it to the StreamTitle field.
func (o *UpdateLiveEventAlt1Request) SetStreamTitle(v string) {
	o.StreamTitle = &v
}

// GetTimeZone returns the TimeZone field value if set, zero value otherwise.
func (o *UpdateLiveEventAlt1Request) GetTimeZone() string {
	if o == nil || IsNil(o.TimeZone) {
		var ret string
		return ret
	}
	return *o.TimeZone
}

// GetTimeZoneOk returns a tuple with the TimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLiveEventAlt1Request) GetTimeZoneOk() (*string, bool) {
	if o == nil || IsNil(o.TimeZone) {
		return nil, false
	}
	return o.TimeZone, true
}

// HasTimeZone returns a boolean if a field has been set.
func (o *UpdateLiveEventAlt1Request) HasTimeZone() bool {
	if o != nil && !IsNil(o.TimeZone) {
		return true
	}

	return false
}

// SetTimeZone gets a reference to the given string and assigns it to the TimeZone field.
func (o *UpdateLiveEventAlt1Request) SetTimeZone(v string) {
	o.TimeZone = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *UpdateLiveEventAlt1Request) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLiveEventAlt1Request) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *UpdateLiveEventAlt1Request) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *UpdateLiveEventAlt1Request) SetTitle(v string) {
	o.Title = &v
}

func (o UpdateLiveEventAlt1Request) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateLiveEventAlt1Request) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AutoCcEnabled) {
		toSerialize["auto_cc_enabled"] = o.AutoCcEnabled
	}
	if !IsNil(o.AutoCcKeywords) {
		toSerialize["auto_cc_keywords"] = o.AutoCcKeywords
	}
	if !IsNil(o.AutoCcLanguage) {
		toSerialize["auto_cc_language"] = o.AutoCcLanguage
	}
	if !IsNil(o.AutomaticallyTitleStream) {
		toSerialize["automatically_title_stream"] = o.AutomaticallyTitleStream
	}
	if !IsNil(o.ChatEnabled) {
		toSerialize["chat_enabled"] = o.ChatEnabled
	}
	if !IsNil(o.ContentRating) {
		toSerialize["content_rating"] = o.ContentRating
	}
	if !IsNil(o.Dvr) {
		toSerialize["dvr"] = o.Dvr
	}
	if !IsNil(o.Embed) {
		toSerialize["embed"] = o.Embed
	}
	if !IsNil(o.InteractionToolsSettings) {
		toSerialize["interaction_tools_settings"] = o.InteractionToolsSettings
	}
	if !IsNil(o.PlaylistSort) {
		toSerialize["playlist_sort"] = o.PlaylistSort
	}
	if !IsNil(o.Schedule) {
		toSerialize["schedule"] = o.Schedule
	}
	if !IsNil(o.ScheduledPlayback) {
		toSerialize["scheduled_playback"] = o.ScheduledPlayback
	}
	if !IsNil(o.StreamDescription) {
		toSerialize["stream_description"] = o.StreamDescription
	}
	if !IsNil(o.StreamEmbed) {
		toSerialize["stream_embed"] = o.StreamEmbed
	}
	if !IsNil(o.StreamMode) {
		toSerialize["stream_mode"] = o.StreamMode
	}
	if !IsNil(o.StreamPassword) {
		toSerialize["stream_password"] = o.StreamPassword
	}
	if !IsNil(o.StreamPrivacy) {
		toSerialize["stream_privacy"] = o.StreamPrivacy
	}
	if !IsNil(o.StreamTitle) {
		toSerialize["stream_title"] = o.StreamTitle
	}
	if !IsNil(o.TimeZone) {
		toSerialize["time_zone"] = o.TimeZone
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	return toSerialize, nil
}

type NullableUpdateLiveEventAlt1Request struct {
	value *UpdateLiveEventAlt1Request
	isSet bool
}

func (v NullableUpdateLiveEventAlt1Request) Get() *UpdateLiveEventAlt1Request {
	return v.value
}

func (v *NullableUpdateLiveEventAlt1Request) Set(val *UpdateLiveEventAlt1Request) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateLiveEventAlt1Request) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateLiveEventAlt1Request) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateLiveEventAlt1Request(val *UpdateLiveEventAlt1Request) *NullableUpdateLiveEventAlt1Request {
	return &NullableUpdateLiveEventAlt1Request{value: val, isSet: true}
}

func (v NullableUpdateLiveEventAlt1Request) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateLiveEventAlt1Request) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


