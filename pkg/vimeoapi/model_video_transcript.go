/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VideoTranscript type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VideoTranscript{}

// VideoTranscript The transcript information of the video. This data requires a bearer token with the `private` scope.
type VideoTranscript struct {
	// The video transcript's language. This data requires a bearer token with the `private` scope.
	Language NullableString `json:"language"`
	// The video transcript's availability status. This data requires a bearer token with the `private` scope.  Option descriptions:  * `completed` - Transcription is completed. The transcript is available.  * `failed` - There was a transcription error. The transcript isn't available.  * `in_progress` - Transcription is currently underway. The transcript isn't available yet.  * `language_not_supported` - We currently don't support transcribing audio for this video's language.  * `no_speech` - Transcription was completed, but there were no words in the audio to transcribe.  * `not_started` - The transcript job hasn't started.  * `unknown` - There isn't a record of this video's transcription job. 
	Status *string `json:"status,omitempty"`
}

type _VideoTranscript VideoTranscript

// NewVideoTranscript instantiates a new VideoTranscript object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVideoTranscript(language NullableString) *VideoTranscript {
	this := VideoTranscript{}
	this.Language = language
	return &this
}

// NewVideoTranscriptWithDefaults instantiates a new VideoTranscript object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVideoTranscriptWithDefaults() *VideoTranscript {
	this := VideoTranscript{}
	return &this
}

// GetLanguage returns the Language field value
// If the value is explicit nil, the zero value for string will be returned
func (o *VideoTranscript) GetLanguage() string {
	if o == nil || o.Language.Get() == nil {
		var ret string
		return ret
	}

	return *o.Language.Get()
}

// GetLanguageOk returns a tuple with the Language field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VideoTranscript) GetLanguageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Language.Get(), o.Language.IsSet()
}

// SetLanguage sets field value
func (o *VideoTranscript) SetLanguage(v string) {
	o.Language.Set(&v)
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *VideoTranscript) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VideoTranscript) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *VideoTranscript) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *VideoTranscript) SetStatus(v string) {
	o.Status = &v
}

func (o VideoTranscript) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VideoTranscript) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["language"] = o.Language.Get()
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

func (o *VideoTranscript) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"language",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVideoTranscript := _VideoTranscript{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVideoTranscript)

	if err != nil {
		return err
	}

	*o = VideoTranscript(varVideoTranscript)

	return err
}

type NullableVideoTranscript struct {
	value *VideoTranscript
	isSet bool
}

func (v NullableVideoTranscript) Get() *VideoTranscript {
	return v.value
}

func (v *NullableVideoTranscript) Set(val *VideoTranscript) {
	v.value = val
	v.isSet = true
}

func (v NullableVideoTranscript) IsSet() bool {
	return v.isSet
}

func (v *NullableVideoTranscript) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVideoTranscript(val *VideoTranscript) *NullableVideoTranscript {
	return &NullableVideoTranscript{value: val, isSet: true}
}

func (v NullableVideoTranscript) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVideoTranscript) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


