/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

type APIInformationEssentialsAPI interface {

	/*
		GetEndpoints Get the API specification

		This method returns the full OpenAPI specification for the Vimeo API.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiGetEndpointsRequest
	*/
	GetEndpoints(ctx context.Context) ApiGetEndpointsRequest

	// GetEndpointsExecute executes the request
	//  @return Endpoint
	GetEndpointsExecute(r ApiGetEndpointsRequest) (*Endpoint, *http.Response, error)
}

// APIInformationEssentialsAPIService APIInformationEssentialsAPI service
type APIInformationEssentialsAPIService service

type ApiGetEndpointsRequest struct {
	ctx        context.Context
	ApiService APIInformationEssentialsAPI
	openapi    *bool
	version    *string
}

// Return an OpenAPI specification.
func (r ApiGetEndpointsRequest) Openapi(openapi bool) ApiGetEndpointsRequest {
	r.openapi = &openapi
	return r
}

// Return an OpenAPI specification for the specified API version. This overwrites the **version** field provided in the **Accept** header.
func (r ApiGetEndpointsRequest) Version(version string) ApiGetEndpointsRequest {
	r.version = &version
	return r
}

func (r ApiGetEndpointsRequest) Execute() (*Endpoint, *http.Response, error) {
	return r.ApiService.GetEndpointsExecute(r)
}

/*
GetEndpoints Get the API specification

This method returns the full OpenAPI specification for the Vimeo API.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetEndpointsRequest
*/
func (a *APIInformationEssentialsAPIService) GetEndpoints(ctx context.Context) ApiGetEndpointsRequest {
	return ApiGetEndpointsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Endpoint
func (a *APIInformationEssentialsAPIService) GetEndpointsExecute(r ApiGetEndpointsRequest) (*Endpoint, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Endpoint
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "APIInformationEssentialsAPIService.GetEndpoints")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.openapi != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "openapi", r.openapi, "")
	}
	if r.version != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "version", r.version, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.endpoint+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
