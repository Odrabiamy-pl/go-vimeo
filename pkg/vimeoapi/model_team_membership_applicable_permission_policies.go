/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the TeamMembershipApplicablePermissionPolicies type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TeamMembershipApplicablePermissionPolicies{}

// TeamMembershipApplicablePermissionPolicies Information about permission policies that can apply to the team member.
type TeamMembershipApplicablePermissionPolicies struct {
	// An array of folder permission policies that can apply to the team member.
	Folder []PermissionPolicy `json:"folder"`
	// An array of regional delivery permission policies that can apply to the team member.
	RegionalDelivery []PermissionPolicy `json:"regional_delivery"`
	// An array of video permission policies that can apply to the team member.
	Video []PermissionPolicy `json:"video"`
}

// NewTeamMembershipApplicablePermissionPolicies instantiates a new TeamMembershipApplicablePermissionPolicies object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamMembershipApplicablePermissionPolicies(folder []PermissionPolicy, regionalDelivery []PermissionPolicy, video []PermissionPolicy) *TeamMembershipApplicablePermissionPolicies {
	this := TeamMembershipApplicablePermissionPolicies{}
	this.Folder = folder
	this.RegionalDelivery = regionalDelivery
	this.Video = video
	return &this
}

// NewTeamMembershipApplicablePermissionPoliciesWithDefaults instantiates a new TeamMembershipApplicablePermissionPolicies object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamMembershipApplicablePermissionPoliciesWithDefaults() *TeamMembershipApplicablePermissionPolicies {
	this := TeamMembershipApplicablePermissionPolicies{}
	return &this
}

// GetFolder returns the Folder field value
func (o *TeamMembershipApplicablePermissionPolicies) GetFolder() []PermissionPolicy {
	if o == nil {
		var ret []PermissionPolicy
		return ret
	}

	return o.Folder
}

// GetFolderOk returns a tuple with the Folder field value
// and a boolean to check if the value has been set.
func (o *TeamMembershipApplicablePermissionPolicies) GetFolderOk() ([]PermissionPolicy, bool) {
	if o == nil {
		return nil, false
	}
	return o.Folder, true
}

// SetFolder sets field value
func (o *TeamMembershipApplicablePermissionPolicies) SetFolder(v []PermissionPolicy) {
	o.Folder = v
}

// GetRegionalDelivery returns the RegionalDelivery field value
func (o *TeamMembershipApplicablePermissionPolicies) GetRegionalDelivery() []PermissionPolicy {
	if o == nil {
		var ret []PermissionPolicy
		return ret
	}

	return o.RegionalDelivery
}

// GetRegionalDeliveryOk returns a tuple with the RegionalDelivery field value
// and a boolean to check if the value has been set.
func (o *TeamMembershipApplicablePermissionPolicies) GetRegionalDeliveryOk() ([]PermissionPolicy, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegionalDelivery, true
}

// SetRegionalDelivery sets field value
func (o *TeamMembershipApplicablePermissionPolicies) SetRegionalDelivery(v []PermissionPolicy) {
	o.RegionalDelivery = v
}

// GetVideo returns the Video field value
func (o *TeamMembershipApplicablePermissionPolicies) GetVideo() []PermissionPolicy {
	if o == nil {
		var ret []PermissionPolicy
		return ret
	}

	return o.Video
}

// GetVideoOk returns a tuple with the Video field value
// and a boolean to check if the value has been set.
func (o *TeamMembershipApplicablePermissionPolicies) GetVideoOk() ([]PermissionPolicy, bool) {
	if o == nil {
		return nil, false
	}
	return o.Video, true
}

// SetVideo sets field value
func (o *TeamMembershipApplicablePermissionPolicies) SetVideo(v []PermissionPolicy) {
	o.Video = v
}

func (o TeamMembershipApplicablePermissionPolicies) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TeamMembershipApplicablePermissionPolicies) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["folder"] = o.Folder
	toSerialize["regional_delivery"] = o.RegionalDelivery
	toSerialize["video"] = o.Video
	return toSerialize, nil
}

type NullableTeamMembershipApplicablePermissionPolicies struct {
	value *TeamMembershipApplicablePermissionPolicies
	isSet bool
}

func (v NullableTeamMembershipApplicablePermissionPolicies) Get() *TeamMembershipApplicablePermissionPolicies {
	return v.value
}

func (v *NullableTeamMembershipApplicablePermissionPolicies) Set(val *TeamMembershipApplicablePermissionPolicies) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamMembershipApplicablePermissionPolicies) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamMembershipApplicablePermissionPolicies) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamMembershipApplicablePermissionPolicies(val *TeamMembershipApplicablePermissionPolicies) *NullableTeamMembershipApplicablePermissionPolicies {
	return &NullableTeamMembershipApplicablePermissionPolicies{value: val, isSet: true}
}

func (v NullableTeamMembershipApplicablePermissionPolicies) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamMembershipApplicablePermissionPolicies) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
