/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
	"strings"
)

type VideosEssentialsAPI interface {

	/*
		CheckIfUserOwnsVideo Check if the user owns a video

		This method determines whether the authenticated user is the owner of the specified video.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param userId The ID of the user.
		@param videoId The ID of the video.
		@return ApiCheckIfUserOwnsVideoRequest
	*/
	CheckIfUserOwnsVideo(ctx context.Context, userId int32, videoId int32) ApiCheckIfUserOwnsVideoRequest

	// CheckIfUserOwnsVideoExecute executes the request
	//  @return Video
	CheckIfUserOwnsVideoExecute(r ApiCheckIfUserOwnsVideoRequest) (*Video, *http.Response, error)

	/*
		CheckIfUserOwnsVideoAlt1 Check if the user owns a video

		This method determines whether the authenticated user is the owner of the specified video.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param videoId The ID of the video.
		@return ApiCheckIfUserOwnsVideoAlt1Request
	*/
	CheckIfUserOwnsVideoAlt1(ctx context.Context, videoId int32) ApiCheckIfUserOwnsVideoAlt1Request

	// CheckIfUserOwnsVideoAlt1Execute executes the request
	//  @return Video
	CheckIfUserOwnsVideoAlt1Execute(r ApiCheckIfUserOwnsVideoAlt1Request) (*Video, *http.Response, error)

	/*
		DeleteVideo Delete a video

		This method deletes the specified video. The authenticated user must be the owner of the video.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param videoId The ID of the video.
		@return ApiDeleteVideoRequest
	*/
	DeleteVideo(ctx context.Context, videoId int32) ApiDeleteVideoRequest

	// DeleteVideoExecute executes the request
	DeleteVideoExecute(r ApiDeleteVideoRequest) (*http.Response, error)

	/*
			DeleteVideos Delete a user's videos

			This method deletes one or more videos belonging to the specified user. The authenticated user must have permission to delete the videos.

		Specify the videos to delete in a comma-separated list by URI using the **uris** query parameter.

			@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			@param userId The ID of the user.
			@return ApiDeleteVideosRequest
	*/
	DeleteVideos(ctx context.Context, userId int32) ApiDeleteVideosRequest

	// DeleteVideosExecute executes the request
	DeleteVideosExecute(r ApiDeleteVideosRequest) (*http.Response, error)

	/*
			DeleteVideosAlt1 Delete a user's videos

			This method deletes one or more videos belonging to the specified user. The authenticated user must have permission to delete the videos.

		Specify the videos to delete in a comma-separated list by URI using the **uris** query parameter.

			@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			@return ApiDeleteVideosAlt1Request
	*/
	DeleteVideosAlt1(ctx context.Context) ApiDeleteVideosAlt1Request

	// DeleteVideosAlt1Execute executes the request
	DeleteVideosAlt1Execute(r ApiDeleteVideosAlt1Request) (*http.Response, error)

	/*
		EditVideo Edit a video

		This method edits the specified video.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param videoId The ID of the video.
		@return ApiEditVideoRequest
	*/
	EditVideo(ctx context.Context, videoId int32) ApiEditVideoRequest

	// EditVideoExecute executes the request
	//  @return Video
	EditVideoExecute(r ApiEditVideoRequest) (*Video, *http.Response, error)

	/*
		GetAppearances Get all the videos in which the user appears

		This method returns all the videos in which the authenticated user has a credited appearance.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param userId The ID of the user.
		@return ApiGetAppearancesRequest
	*/
	GetAppearances(ctx context.Context, userId int32) ApiGetAppearancesRequest

	// GetAppearancesExecute executes the request
	//  @return []Video
	GetAppearancesExecute(r ApiGetAppearancesRequest) ([]Video, *http.Response, error)

	/*
		GetAppearancesAlt1 Get all the videos in which the user appears

		This method returns all the videos in which the authenticated user has a credited appearance.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiGetAppearancesAlt1Request
	*/
	GetAppearancesAlt1(ctx context.Context) ApiGetAppearancesAlt1Request

	// GetAppearancesAlt1Execute executes the request
	//  @return []Video
	GetAppearancesAlt1Execute(r ApiGetAppearancesAlt1Request) ([]Video, *http.Response, error)

	/*
		GetVideo Get a specific video

		This method returns a single video.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param videoId The ID of the video.
		@return ApiGetVideoRequest
	*/
	GetVideo(ctx context.Context, videoId int32) ApiGetVideoRequest

	// GetVideoExecute executes the request
	//  @return Video
	GetVideoExecute(r ApiGetVideoRequest) (*Video, *http.Response, error)

	/*
		GetVideos Get all the videos that the user has uploaded

		This method returns all the videos that the authenticated user has uploaded.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param userId The ID of the user.
		@return ApiGetVideosRequest
	*/
	GetVideos(ctx context.Context, userId int32) ApiGetVideosRequest

	// GetVideosExecute executes the request
	//  @return []Video
	GetVideosExecute(r ApiGetVideosRequest) ([]Video, *http.Response, error)

	/*
		GetVideosAlt1 Get all the videos that the user has uploaded

		This method returns all the videos that the authenticated user has uploaded.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiGetVideosAlt1Request
	*/
	GetVideosAlt1(ctx context.Context) ApiGetVideosAlt1Request

	// GetVideosAlt1Execute executes the request
	//  @return []Video
	GetVideosAlt1Execute(r ApiGetVideosAlt1Request) ([]Video, *http.Response, error)

	/*
		SearchVideos Search for videos

		This method returns all the videos that match custom search criteria.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiSearchVideosRequest
	*/
	SearchVideos(ctx context.Context) ApiSearchVideosRequest

	// SearchVideosExecute executes the request
	//  @return []Video
	SearchVideosExecute(r ApiSearchVideosRequest) ([]Video, *http.Response, error)
}

// VideosEssentialsAPIService VideosEssentialsAPI service
type VideosEssentialsAPIService service

type ApiCheckIfUserOwnsVideoRequest struct {
	ctx        context.Context
	ApiService VideosEssentialsAPI
	userId     int32
	videoId    int32
}

func (r ApiCheckIfUserOwnsVideoRequest) Execute() (*Video, *http.Response, error) {
	return r.ApiService.CheckIfUserOwnsVideoExecute(r)
}

/*
CheckIfUserOwnsVideo Check if the user owns a video

This method determines whether the authenticated user is the owner of the specified video.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId The ID of the user.
	@param videoId The ID of the video.
	@return ApiCheckIfUserOwnsVideoRequest
*/
func (a *VideosEssentialsAPIService) CheckIfUserOwnsVideo(ctx context.Context, userId int32, videoId int32) ApiCheckIfUserOwnsVideoRequest {
	return ApiCheckIfUserOwnsVideoRequest{
		ApiService: a,
		ctx:        ctx,
		userId:     userId,
		videoId:    videoId,
	}
}

// Execute executes the request
//
//	@return Video
func (a *VideosEssentialsAPIService) CheckIfUserOwnsVideoExecute(r ApiCheckIfUserOwnsVideoRequest) (*Video, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Video
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosEssentialsAPIService.CheckIfUserOwnsVideo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/videos/{video_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.video+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCheckIfUserOwnsVideoAlt1Request struct {
	ctx        context.Context
	ApiService VideosEssentialsAPI
	videoId    int32
}

func (r ApiCheckIfUserOwnsVideoAlt1Request) Execute() (*Video, *http.Response, error) {
	return r.ApiService.CheckIfUserOwnsVideoAlt1Execute(r)
}

/*
CheckIfUserOwnsVideoAlt1 Check if the user owns a video

This method determines whether the authenticated user is the owner of the specified video.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param videoId The ID of the video.
	@return ApiCheckIfUserOwnsVideoAlt1Request
*/
func (a *VideosEssentialsAPIService) CheckIfUserOwnsVideoAlt1(ctx context.Context, videoId int32) ApiCheckIfUserOwnsVideoAlt1Request {
	return ApiCheckIfUserOwnsVideoAlt1Request{
		ApiService: a,
		ctx:        ctx,
		videoId:    videoId,
	}
}

// Execute executes the request
//
//	@return Video
func (a *VideosEssentialsAPIService) CheckIfUserOwnsVideoAlt1Execute(r ApiCheckIfUserOwnsVideoAlt1Request) (*Video, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Video
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosEssentialsAPIService.CheckIfUserOwnsVideoAlt1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/videos/{video_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.video+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteVideoRequest struct {
	ctx        context.Context
	ApiService VideosEssentialsAPI
	videoId    int32
}

func (r ApiDeleteVideoRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteVideoExecute(r)
}

/*
DeleteVideo Delete a video

This method deletes the specified video. The authenticated user must be the owner of the video.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param videoId The ID of the video.
	@return ApiDeleteVideoRequest
*/
func (a *VideosEssentialsAPIService) DeleteVideo(ctx context.Context, videoId int32) ApiDeleteVideoRequest {
	return ApiDeleteVideoRequest{
		ApiService: a,
		ctx:        ctx,
		videoId:    videoId,
	}
}

// Execute executes the request
func (a *VideosEssentialsAPIService) DeleteVideoExecute(r ApiDeleteVideoRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosEssentialsAPIService.DeleteVideo")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos/{video_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteVideosRequest struct {
	ctx        context.Context
	ApiService VideosEssentialsAPI
	userId     int32
	uris       *string
}

// A comma-separated list of the video URIs to delete.
func (r ApiDeleteVideosRequest) Uris(uris string) ApiDeleteVideosRequest {
	r.uris = &uris
	return r
}

func (r ApiDeleteVideosRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteVideosExecute(r)
}

/*
DeleteVideos Delete a user's videos

This method deletes one or more videos belonging to the specified user. The authenticated user must have permission to delete the videos.

Specify the videos to delete in a comma-separated list by URI using the **uris** query parameter.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId The ID of the user.
	@return ApiDeleteVideosRequest
*/
func (a *VideosEssentialsAPIService) DeleteVideos(ctx context.Context, userId int32) ApiDeleteVideosRequest {
	return ApiDeleteVideosRequest{
		ApiService: a,
		ctx:        ctx,
		userId:     userId,
	}
}

// Execute executes the request
func (a *VideosEssentialsAPIService) DeleteVideosExecute(r ApiDeleteVideosRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosEssentialsAPIService.DeleteVideos")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/videos"
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.uris == nil {
		return nil, reportError("uris is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "uris", r.uris, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteVideosAlt1Request struct {
	ctx        context.Context
	ApiService VideosEssentialsAPI
	uris       *string
}

// A comma-separated list of the video URIs to delete.
func (r ApiDeleteVideosAlt1Request) Uris(uris string) ApiDeleteVideosAlt1Request {
	r.uris = &uris
	return r
}

func (r ApiDeleteVideosAlt1Request) Execute() (*http.Response, error) {
	return r.ApiService.DeleteVideosAlt1Execute(r)
}

/*
DeleteVideosAlt1 Delete a user's videos

This method deletes one or more videos belonging to the specified user. The authenticated user must have permission to delete the videos.

Specify the videos to delete in a comma-separated list by URI using the **uris** query parameter.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteVideosAlt1Request
*/
func (a *VideosEssentialsAPIService) DeleteVideosAlt1(ctx context.Context) ApiDeleteVideosAlt1Request {
	return ApiDeleteVideosAlt1Request{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *VideosEssentialsAPIService) DeleteVideosAlt1Execute(r ApiDeleteVideosAlt1Request) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosEssentialsAPIService.DeleteVideosAlt1")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/videos"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.uris == nil {
		return nil, reportError("uris is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "uris", r.uris, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEditVideoRequest struct {
	ctx              context.Context
	ApiService       VideosEssentialsAPI
	videoId          int32
	editVideoRequest *EditVideoRequest
}

func (r ApiEditVideoRequest) EditVideoRequest(editVideoRequest EditVideoRequest) ApiEditVideoRequest {
	r.editVideoRequest = &editVideoRequest
	return r
}

func (r ApiEditVideoRequest) Execute() (*Video, *http.Response, error) {
	return r.ApiService.EditVideoExecute(r)
}

/*
EditVideo Edit a video

This method edits the specified video.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param videoId The ID of the video.
	@return ApiEditVideoRequest
*/
func (a *VideosEssentialsAPIService) EditVideo(ctx context.Context, videoId int32) ApiEditVideoRequest {
	return ApiEditVideoRequest{
		ApiService: a,
		ctx:        ctx,
		videoId:    videoId,
	}
}

// Execute executes the request
//
//	@return Video
func (a *VideosEssentialsAPIService) EditVideoExecute(r ApiEditVideoRequest) (*Video, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Video
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosEssentialsAPIService.EditVideo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos/{video_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.editVideoRequest == nil {
		return localVarReturnValue, nil, reportError("editVideoRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.vimeo.video+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.video+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.editVideoRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAppearancesRequest struct {
	ctx              context.Context
	ApiService       VideosEssentialsAPI
	userId           int32
	direction        *string
	filter           *string
	filterEmbeddable *bool
	page             *float32
	perPage          *float32
	query            *string
	sort             *string
}

// The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.
func (r ApiGetAppearancesRequest) Direction(direction string) ApiGetAppearancesRequest {
	r.direction = &direction
	return r
}

// The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos.
func (r ApiGetAppearancesRequest) Filter(filter string) ApiGetAppearancesRequest {
	r.filter = &filter
	return r
}

// Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;.
func (r ApiGetAppearancesRequest) FilterEmbeddable(filterEmbeddable bool) ApiGetAppearancesRequest {
	r.filterEmbeddable = &filterEmbeddable
	return r
}

// The page number of the results to show.
func (r ApiGetAppearancesRequest) Page(page float32) ApiGetAppearancesRequest {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiGetAppearancesRequest) PerPage(perPage float32) ApiGetAppearancesRequest {
	r.perPage = &perPage
	return r
}

// The search query to use to filter the results.
func (r ApiGetAppearancesRequest) Query(query string) ApiGetAppearancesRequest {
	r.query = &query
	return r
}

// The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.
func (r ApiGetAppearancesRequest) Sort(sort string) ApiGetAppearancesRequest {
	r.sort = &sort
	return r
}

func (r ApiGetAppearancesRequest) Execute() ([]Video, *http.Response, error) {
	return r.ApiService.GetAppearancesExecute(r)
}

/*
GetAppearances Get all the videos in which the user appears

This method returns all the videos in which the authenticated user has a credited appearance.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId The ID of the user.
	@return ApiGetAppearancesRequest
*/
func (a *VideosEssentialsAPIService) GetAppearances(ctx context.Context, userId int32) ApiGetAppearancesRequest {
	return ApiGetAppearancesRequest{
		ApiService: a,
		ctx:        ctx,
		userId:     userId,
	}
}

// Execute executes the request
//
//	@return []Video
func (a *VideosEssentialsAPIService) GetAppearancesExecute(r ApiGetAppearancesRequest) ([]Video, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Video
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosEssentialsAPIService.GetAppearances")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/appearances"
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.filterEmbeddable != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter_embeddable", r.filterEmbeddable, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	if r.query != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "query", r.query, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.video+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAppearancesAlt1Request struct {
	ctx              context.Context
	ApiService       VideosEssentialsAPI
	direction        *string
	filter           *string
	filterEmbeddable *bool
	page             *float32
	perPage          *float32
	query            *string
	sort             *string
}

// The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.
func (r ApiGetAppearancesAlt1Request) Direction(direction string) ApiGetAppearancesAlt1Request {
	r.direction = &direction
	return r
}

// The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos.
func (r ApiGetAppearancesAlt1Request) Filter(filter string) ApiGetAppearancesAlt1Request {
	r.filter = &filter
	return r
}

// Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;.
func (r ApiGetAppearancesAlt1Request) FilterEmbeddable(filterEmbeddable bool) ApiGetAppearancesAlt1Request {
	r.filterEmbeddable = &filterEmbeddable
	return r
}

// The page number of the results to show.
func (r ApiGetAppearancesAlt1Request) Page(page float32) ApiGetAppearancesAlt1Request {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiGetAppearancesAlt1Request) PerPage(perPage float32) ApiGetAppearancesAlt1Request {
	r.perPage = &perPage
	return r
}

// The search query to use to filter the results.
func (r ApiGetAppearancesAlt1Request) Query(query string) ApiGetAppearancesAlt1Request {
	r.query = &query
	return r
}

// The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.
func (r ApiGetAppearancesAlt1Request) Sort(sort string) ApiGetAppearancesAlt1Request {
	r.sort = &sort
	return r
}

func (r ApiGetAppearancesAlt1Request) Execute() ([]Video, *http.Response, error) {
	return r.ApiService.GetAppearancesAlt1Execute(r)
}

/*
GetAppearancesAlt1 Get all the videos in which the user appears

This method returns all the videos in which the authenticated user has a credited appearance.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetAppearancesAlt1Request
*/
func (a *VideosEssentialsAPIService) GetAppearancesAlt1(ctx context.Context) ApiGetAppearancesAlt1Request {
	return ApiGetAppearancesAlt1Request{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Video
func (a *VideosEssentialsAPIService) GetAppearancesAlt1Execute(r ApiGetAppearancesAlt1Request) ([]Video, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Video
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosEssentialsAPIService.GetAppearancesAlt1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/appearances"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.filterEmbeddable != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter_embeddable", r.filterEmbeddable, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	if r.query != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "query", r.query, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.video+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetVideoRequest struct {
	ctx        context.Context
	ApiService VideosEssentialsAPI
	videoId    int32
}

func (r ApiGetVideoRequest) Execute() (*Video, *http.Response, error) {
	return r.ApiService.GetVideoExecute(r)
}

/*
GetVideo Get a specific video

This method returns a single video.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param videoId The ID of the video.
	@return ApiGetVideoRequest
*/
func (a *VideosEssentialsAPIService) GetVideo(ctx context.Context, videoId int32) ApiGetVideoRequest {
	return ApiGetVideoRequest{
		ApiService: a,
		ctx:        ctx,
		videoId:    videoId,
	}
}

// Execute executes the request
//
//	@return Video
func (a *VideosEssentialsAPIService) GetVideoExecute(r ApiGetVideoRequest) (*Video, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Video
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosEssentialsAPIService.GetVideo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos/{video_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.video+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetVideosRequest struct {
	ctx                  context.Context
	ApiService           VideosEssentialsAPI
	userId               int32
	containingUri        *string
	direction            *string
	filter               *string
	filterEmbeddable     *bool
	filterPlayable       *bool
	filterScreenRecorded *bool
	filterTag            *string
	filterTagAllOf       *string
	filterTagExclude     *string
	includeTeamContent   *string
	page                 *float32
	perPage              *float32
	query                *string
	queryFields          *[]string
	sort                 *string
}

// The page that contains the video URI. The field is available only when not paired with **query**.
func (r ApiGetVideosRequest) ContainingUri(containingUri string) ApiGetVideosRequest {
	r.containingUri = &containingUri
	return r
}

// The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.
func (r ApiGetVideosRequest) Direction(direction string) ApiGetVideosRequest {
	r.direction = &direction
	return r
}

// The attribute by which to filter the results.  Option descriptions:  * &#x60;app_only&#x60; - Return app-only videos.  * &#x60;embeddable&#x60; - Return embeddable videos.  * &#x60;featured&#x60; - Return featured videos.  * &#x60;live&#x60; - Return only live videos.  * &#x60;no_placeholder&#x60; - Return no placeholder videos.  * &#x60;nolive&#x60; - Return no live videos.  * &#x60;playable&#x60; - Return playable videos.  * &#x60;screen_recorded&#x60; - Return screen-recorded videos.
func (r ApiGetVideosRequest) Filter(filter string) ApiGetVideosRequest {
	r.filter = &filter
	return r
}

// Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;.
func (r ApiGetVideosRequest) FilterEmbeddable(filterEmbeddable bool) ApiGetVideosRequest {
	r.filterEmbeddable = &filterEmbeddable
	return r
}

// Whether to filter the results by playable videos (&#x60;true&#x60;) or non-playable videos (&#x60;false&#x60;).
func (r ApiGetVideosRequest) FilterPlayable(filterPlayable bool) ApiGetVideosRequest {
	r.filterPlayable = &filterPlayable
	return r
}

// Whether to filter the results by screen-recorded videos (&#x60;true&#x60;) or non-screen-recorded videos (&#x60;false&#x60;).
func (r ApiGetVideosRequest) FilterScreenRecorded(filterScreenRecorded bool) ApiGetVideosRequest {
	r.filterScreenRecorded = &filterScreenRecorded
	return r
}

// A comma-separated list of tags to filter on. All results must include at least one of these tags.
func (r ApiGetVideosRequest) FilterTag(filterTag string) ApiGetVideosRequest {
	r.filterTag = &filterTag
	return r
}

// A comma-separated list of tags to filter on. All results must include all of these tags.
func (r ApiGetVideosRequest) FilterTagAllOf(filterTagAllOf string) ApiGetVideosRequest {
	r.filterTagAllOf = &filterTagAllOf
	return r
}

// A comma-separated list of tags to exclude. All results must exclude all of these tags.
func (r ApiGetVideosRequest) FilterTagExclude(filterTagExclude string) ApiGetVideosRequest {
	r.filterTagExclude = &filterTagExclude
	return r
}

// Whether to include content from the user&#39;s teams when searching. _This field is deprecated._
func (r ApiGetVideosRequest) IncludeTeamContent(includeTeamContent string) ApiGetVideosRequest {
	r.includeTeamContent = &includeTeamContent
	return r
}

// The page number of the results to show.
func (r ApiGetVideosRequest) Page(page float32) ApiGetVideosRequest {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiGetVideosRequest) PerPage(perPage float32) ApiGetVideosRequest {
	r.perPage = &perPage
	return r
}

// The search query to use to filter the results.
func (r ApiGetVideosRequest) Query(query string) ApiGetVideosRequest {
	r.query = &query
	return r
}

// A comma-separated list of fields to query over. The default value is &#x60;title,description,chapters,tags&#x60;.  Option descriptions:  * &#x60;chapters&#x60; - Query by chapter titles that have been added to the video.  * &#x60;description&#x60; - Query by the description of the video.  * &#x60;tags&#x60; - Query by tag names that have been added to the video.  * &#x60;title&#x60; - Query by the title of the video.
func (r ApiGetVideosRequest) QueryFields(queryFields []string) ApiGetVideosRequest {
	r.queryFields = &queryFields
	return r
}

// The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically by title.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sorting method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by last user interaction. If a result hasn&#39;t had an interaction, the upload date is used instead.  * &#x60;likes&#x60; - Sort the results by number of likes. To use this option, **direction** must be &#x60;desc&#x60;.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays. To use this option, **direction** must be &#x60;desc&#x60;.
func (r ApiGetVideosRequest) Sort(sort string) ApiGetVideosRequest {
	r.sort = &sort
	return r
}

func (r ApiGetVideosRequest) Execute() ([]Video, *http.Response, error) {
	return r.ApiService.GetVideosExecute(r)
}

/*
GetVideos Get all the videos that the user has uploaded

This method returns all the videos that the authenticated user has uploaded.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId The ID of the user.
	@return ApiGetVideosRequest
*/
func (a *VideosEssentialsAPIService) GetVideos(ctx context.Context, userId int32) ApiGetVideosRequest {
	return ApiGetVideosRequest{
		ApiService: a,
		ctx:        ctx,
		userId:     userId,
	}
}

// Execute executes the request
//
//	@return []Video
func (a *VideosEssentialsAPIService) GetVideosExecute(r ApiGetVideosRequest) ([]Video, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Video
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosEssentialsAPIService.GetVideos")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/videos"
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.containingUri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "containing_uri", r.containingUri, "")
	}
	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.filterEmbeddable != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter_embeddable", r.filterEmbeddable, "")
	}
	if r.filterPlayable != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter_playable", r.filterPlayable, "")
	}
	if r.filterScreenRecorded != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter_screen_recorded", r.filterScreenRecorded, "")
	}
	if r.filterTag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter_tag", r.filterTag, "")
	}
	if r.filterTagAllOf != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter_tag_all_of", r.filterTagAllOf, "")
	}
	if r.filterTagExclude != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter_tag_exclude", r.filterTagExclude, "")
	}
	if r.includeTeamContent != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_team_content", r.includeTeamContent, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	if r.query != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "query", r.query, "")
	}
	if r.queryFields != nil {
		t := *r.queryFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "query_fields", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "query_fields", t, "multi")
		}
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.video+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetVideosAlt1Request struct {
	ctx                  context.Context
	ApiService           VideosEssentialsAPI
	containingUri        *string
	direction            *string
	filter               *string
	filterEmbeddable     *bool
	filterPlayable       *bool
	filterScreenRecorded *bool
	filterTag            *string
	filterTagAllOf       *string
	filterTagExclude     *string
	includeTeamContent   *string
	page                 *float32
	perPage              *float32
	query                *string
	queryFields          *[]string
	sort                 *string
}

// The page that contains the video URI. The field is available only when not paired with **query**.
func (r ApiGetVideosAlt1Request) ContainingUri(containingUri string) ApiGetVideosAlt1Request {
	r.containingUri = &containingUri
	return r
}

// The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.
func (r ApiGetVideosAlt1Request) Direction(direction string) ApiGetVideosAlt1Request {
	r.direction = &direction
	return r
}

// The attribute by which to filter the results.  Option descriptions:  * &#x60;app_only&#x60; - Return app-only videos.  * &#x60;embeddable&#x60; - Return embeddable videos.  * &#x60;featured&#x60; - Return featured videos.  * &#x60;live&#x60; - Return only live videos.  * &#x60;no_placeholder&#x60; - Return no placeholder videos.  * &#x60;nolive&#x60; - Return no live videos.  * &#x60;playable&#x60; - Return playable videos.  * &#x60;screen_recorded&#x60; - Return screen-recorded videos.
func (r ApiGetVideosAlt1Request) Filter(filter string) ApiGetVideosAlt1Request {
	r.filter = &filter
	return r
}

// Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;.
func (r ApiGetVideosAlt1Request) FilterEmbeddable(filterEmbeddable bool) ApiGetVideosAlt1Request {
	r.filterEmbeddable = &filterEmbeddable
	return r
}

// Whether to filter the results by playable videos (&#x60;true&#x60;) or non-playable videos (&#x60;false&#x60;).
func (r ApiGetVideosAlt1Request) FilterPlayable(filterPlayable bool) ApiGetVideosAlt1Request {
	r.filterPlayable = &filterPlayable
	return r
}

// Whether to filter the results by screen-recorded videos (&#x60;true&#x60;) or non-screen-recorded videos (&#x60;false&#x60;).
func (r ApiGetVideosAlt1Request) FilterScreenRecorded(filterScreenRecorded bool) ApiGetVideosAlt1Request {
	r.filterScreenRecorded = &filterScreenRecorded
	return r
}

// A comma-separated list of tags to filter on. All results must include at least one of these tags.
func (r ApiGetVideosAlt1Request) FilterTag(filterTag string) ApiGetVideosAlt1Request {
	r.filterTag = &filterTag
	return r
}

// A comma-separated list of tags to filter on. All results must include all of these tags.
func (r ApiGetVideosAlt1Request) FilterTagAllOf(filterTagAllOf string) ApiGetVideosAlt1Request {
	r.filterTagAllOf = &filterTagAllOf
	return r
}

// A comma-separated list of tags to exclude. All results must exclude all of these tags.
func (r ApiGetVideosAlt1Request) FilterTagExclude(filterTagExclude string) ApiGetVideosAlt1Request {
	r.filterTagExclude = &filterTagExclude
	return r
}

// Whether to include content from the user&#39;s teams when searching. _This field is deprecated._
func (r ApiGetVideosAlt1Request) IncludeTeamContent(includeTeamContent string) ApiGetVideosAlt1Request {
	r.includeTeamContent = &includeTeamContent
	return r
}

// The page number of the results to show.
func (r ApiGetVideosAlt1Request) Page(page float32) ApiGetVideosAlt1Request {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiGetVideosAlt1Request) PerPage(perPage float32) ApiGetVideosAlt1Request {
	r.perPage = &perPage
	return r
}

// The search query to use to filter the results.
func (r ApiGetVideosAlt1Request) Query(query string) ApiGetVideosAlt1Request {
	r.query = &query
	return r
}

// A comma-separated list of fields to query over. The default value is &#x60;title,description,chapters,tags&#x60;.  Option descriptions:  * &#x60;chapters&#x60; - Query by chapter titles that have been added to the video.  * &#x60;description&#x60; - Query by the description of the video.  * &#x60;tags&#x60; - Query by tag names that have been added to the video.  * &#x60;title&#x60; - Query by the title of the video.
func (r ApiGetVideosAlt1Request) QueryFields(queryFields []string) ApiGetVideosAlt1Request {
	r.queryFields = &queryFields
	return r
}

// The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically by title.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sorting method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by last user interaction. If a result hasn&#39;t had an interaction, the upload date is used instead.  * &#x60;likes&#x60; - Sort the results by number of likes. To use this option, **direction** must be &#x60;desc&#x60;.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays. To use this option, **direction** must be &#x60;desc&#x60;.
func (r ApiGetVideosAlt1Request) Sort(sort string) ApiGetVideosAlt1Request {
	r.sort = &sort
	return r
}

func (r ApiGetVideosAlt1Request) Execute() ([]Video, *http.Response, error) {
	return r.ApiService.GetVideosAlt1Execute(r)
}

/*
GetVideosAlt1 Get all the videos that the user has uploaded

This method returns all the videos that the authenticated user has uploaded.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetVideosAlt1Request
*/
func (a *VideosEssentialsAPIService) GetVideosAlt1(ctx context.Context) ApiGetVideosAlt1Request {
	return ApiGetVideosAlt1Request{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Video
func (a *VideosEssentialsAPIService) GetVideosAlt1Execute(r ApiGetVideosAlt1Request) ([]Video, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Video
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosEssentialsAPIService.GetVideosAlt1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/videos"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.containingUri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "containing_uri", r.containingUri, "")
	}
	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.filterEmbeddable != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter_embeddable", r.filterEmbeddable, "")
	}
	if r.filterPlayable != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter_playable", r.filterPlayable, "")
	}
	if r.filterScreenRecorded != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter_screen_recorded", r.filterScreenRecorded, "")
	}
	if r.filterTag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter_tag", r.filterTag, "")
	}
	if r.filterTagAllOf != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter_tag_all_of", r.filterTagAllOf, "")
	}
	if r.filterTagExclude != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter_tag_exclude", r.filterTagExclude, "")
	}
	if r.includeTeamContent != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_team_content", r.includeTeamContent, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	if r.query != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "query", r.query, "")
	}
	if r.queryFields != nil {
		t := *r.queryFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "query_fields", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "query_fields", t, "multi")
		}
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.video+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchVideosRequest struct {
	ctx        context.Context
	ApiService VideosEssentialsAPI
	query      *string
	direction  *string
	filter     *string
	links      *string
	page       *float32
	perPage    *float32
	sort       *string
	uris       *string
}

// The search query.
func (r ApiSearchVideosRequest) Query(query string) ApiSearchVideosRequest {
	r.query = &query
	return r
}

// The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.
func (r ApiSearchVideosRequest) Direction(direction string) ApiSearchVideosRequest {
	r.direction = &direction
	return r
}

// The attribute by which to filter the results. &#x60;CC&#x60; and related filters target videos with the corresponding Creative Commons licenses. For more information, see our [Creative Commons](https://vimeo.com/creativecommons) page.  Option descriptions:  * &#x60;CC&#x60; - Return videos under any Creative Commons license.  * &#x60;CC-BY&#x60; - Return CC BY, or attribution-only, videos.  * &#x60;CC-BY-NC&#x60; - Return CC BY-NC, or Attribution-NonCommercial, videos.  * &#x60;CC-BY-NC-ND&#x60; - Return CC BY-NC-ND, or Attribution-NonCommercial-NoDerivs, videos.  * &#x60;CC-BY-NC-SA&#x60; - Return CC BY-NC-SA, or Attribution-NonCommercial-ShareAlike, videos.  * &#x60;CC-BY-ND&#x60; - Return CC BY-ND, or Attribution-NoDerivs, videos.  * &#x60;CC-BY-SA&#x60; - Return CC BY-SA, or Attribution-ShareAlike, videos.  * &#x60;CC0&#x60; - Return CC0, or public domain, videos.  * &#x60;categories&#x60; - Filter by categories.  * &#x60;duration&#x60; - Filter by duration.  * &#x60;in-progress&#x60; - Return in-progress videos.  * &#x60;minimum_likes&#x60; - Filter by minimum likes.  * &#x60;trending&#x60; - Return trending videos.  * &#x60;upload_date&#x60; - Filter by upload date.
func (r ApiSearchVideosRequest) Filter(filter string) ApiSearchVideosRequest {
	r.filter = &filter
	return r
}

// A comma-separated list of video URLs to find. Querying, filtering, and sorting aren&#39;t supported when using this field.
func (r ApiSearchVideosRequest) Links(links string) ApiSearchVideosRequest {
	r.links = &links
	return r
}

// The page number of the results to show.
func (r ApiSearchVideosRequest) Page(page float32) ApiSearchVideosRequest {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiSearchVideosRequest) PerPage(perPage float32) ApiSearchVideosRequest {
	r.perPage = &perPage
	return r
}

// The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  * &#x60;relevant&#x60; - Sort the results by relevance.
func (r ApiSearchVideosRequest) Sort(sort string) ApiSearchVideosRequest {
	r.sort = &sort
	return r
}

// A comma-separated list of video URIs to find. Querying, filtering, and sorting aren&#39;t supported when using this field.
func (r ApiSearchVideosRequest) Uris(uris string) ApiSearchVideosRequest {
	r.uris = &uris
	return r
}

func (r ApiSearchVideosRequest) Execute() ([]Video, *http.Response, error) {
	return r.ApiService.SearchVideosExecute(r)
}

/*
SearchVideos Search for videos

This method returns all the videos that match custom search criteria.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSearchVideosRequest
*/
func (a *VideosEssentialsAPIService) SearchVideos(ctx context.Context) ApiSearchVideosRequest {
	return ApiSearchVideosRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Video
func (a *VideosEssentialsAPIService) SearchVideosExecute(r ApiSearchVideosRequest) ([]Video, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Video
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosEssentialsAPIService.SearchVideos")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.query == nil {
		return localVarReturnValue, nil, reportError("query is required and must be specified")
	}

	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.links != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "links", r.links, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "query", r.query, "")
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	if r.uris != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "uris", r.uris, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.video+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
