/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type EmbedPresetsVideosAPI interface {

	/*
	AddVideoEmbedPreset Add an embed preset to a video

	This method adds an embed preset to the specified video. The authenticated user must either be the owner of the video or a team user with the contributor or admin role.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param presetId The ID of the embed preset.
	@param videoId The ID of the video.
	@return ApiAddVideoEmbedPresetRequest
	*/
	AddVideoEmbedPreset(ctx context.Context, presetId float32, videoId int32) ApiAddVideoEmbedPresetRequest

	// AddVideoEmbedPresetExecute executes the request
	AddVideoEmbedPresetExecute(r ApiAddVideoEmbedPresetRequest) (*http.Response, error)

	/*
	DeleteVideoEmbedPreset Remove an embed preset from a video

	This method removes the specified embed preset from a video. The authenticated user must either be the owner of the video or a team user with the contributor or admin role.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param presetId The ID of the embed preset.
	@param videoId The ID of the video.
	@return ApiDeleteVideoEmbedPresetRequest
	*/
	DeleteVideoEmbedPreset(ctx context.Context, presetId float32, videoId int32) ApiDeleteVideoEmbedPresetRequest

	// DeleteVideoEmbedPresetExecute executes the request
	DeleteVideoEmbedPresetExecute(r ApiDeleteVideoEmbedPresetRequest) (*http.Response, error)

	/*
	GetEmbedPresetVideos Get all the videos that have a specific embed preset

	This method returns every video to which the specified embed preset has been added. The authenticated user must be the owner of videos.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param presetId The ID of the embed preset.
	@param userId The ID of the user.
	@return ApiGetEmbedPresetVideosRequest
	*/
	GetEmbedPresetVideos(ctx context.Context, presetId float32, userId int32) ApiGetEmbedPresetVideosRequest

	// GetEmbedPresetVideosExecute executes the request
	//  @return []Video
	GetEmbedPresetVideosExecute(r ApiGetEmbedPresetVideosRequest) ([]Video, *http.Response, error)

	/*
	GetEmbedPresetVideosAlt1 Get all the videos that have a specific embed preset

	This method returns every video to which the specified embed preset has been added. The authenticated user must be the owner of videos.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param presetId The ID of the embed preset.
	@return ApiGetEmbedPresetVideosAlt1Request
	*/
	GetEmbedPresetVideosAlt1(ctx context.Context, presetId float32) ApiGetEmbedPresetVideosAlt1Request

	// GetEmbedPresetVideosAlt1Execute executes the request
	//  @return []Video
	GetEmbedPresetVideosAlt1Execute(r ApiGetEmbedPresetVideosAlt1Request) ([]Video, *http.Response, error)

	/*
	GetVideoEmbedPreset Check if an embed preset has been added to a video

	This method determines whether a video has the specified embed preset.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param presetId The ID of the embed preset.
	@param videoId The ID of the video.
	@return ApiGetVideoEmbedPresetRequest
	*/
	GetVideoEmbedPreset(ctx context.Context, presetId float32, videoId int32) ApiGetVideoEmbedPresetRequest

	// GetVideoEmbedPresetExecute executes the request
	GetVideoEmbedPresetExecute(r ApiGetVideoEmbedPresetRequest) (*http.Response, error)
}

// EmbedPresetsVideosAPIService EmbedPresetsVideosAPI service
type EmbedPresetsVideosAPIService service

type ApiAddVideoEmbedPresetRequest struct {
	ctx context.Context
	ApiService EmbedPresetsVideosAPI
	presetId float32
	videoId int32
}

func (r ApiAddVideoEmbedPresetRequest) Execute() (*http.Response, error) {
	return r.ApiService.AddVideoEmbedPresetExecute(r)
}

/*
AddVideoEmbedPreset Add an embed preset to a video

This method adds an embed preset to the specified video. The authenticated user must either be the owner of the video or a team user with the contributor or admin role.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param presetId The ID of the embed preset.
 @param videoId The ID of the video.
 @return ApiAddVideoEmbedPresetRequest
*/
func (a *EmbedPresetsVideosAPIService) AddVideoEmbedPreset(ctx context.Context, presetId float32, videoId int32) ApiAddVideoEmbedPresetRequest {
	return ApiAddVideoEmbedPresetRequest{
		ApiService: a,
		ctx: ctx,
		presetId: presetId,
		videoId: videoId,
	}
}

// Execute executes the request
func (a *EmbedPresetsVideosAPIService) AddVideoEmbedPresetExecute(r ApiAddVideoEmbedPresetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmbedPresetsVideosAPIService.AddVideoEmbedPreset")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos/{video_id}/presets/{preset_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"preset_id"+"}", url.PathEscape(parameterValueToString(r.presetId, "presetId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteVideoEmbedPresetRequest struct {
	ctx context.Context
	ApiService EmbedPresetsVideosAPI
	presetId float32
	videoId int32
}

func (r ApiDeleteVideoEmbedPresetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteVideoEmbedPresetExecute(r)
}

/*
DeleteVideoEmbedPreset Remove an embed preset from a video

This method removes the specified embed preset from a video. The authenticated user must either be the owner of the video or a team user with the contributor or admin role.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param presetId The ID of the embed preset.
 @param videoId The ID of the video.
 @return ApiDeleteVideoEmbedPresetRequest
*/
func (a *EmbedPresetsVideosAPIService) DeleteVideoEmbedPreset(ctx context.Context, presetId float32, videoId int32) ApiDeleteVideoEmbedPresetRequest {
	return ApiDeleteVideoEmbedPresetRequest{
		ApiService: a,
		ctx: ctx,
		presetId: presetId,
		videoId: videoId,
	}
}

// Execute executes the request
func (a *EmbedPresetsVideosAPIService) DeleteVideoEmbedPresetExecute(r ApiDeleteVideoEmbedPresetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmbedPresetsVideosAPIService.DeleteVideoEmbedPreset")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos/{video_id}/presets/{preset_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"preset_id"+"}", url.PathEscape(parameterValueToString(r.presetId, "presetId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetEmbedPresetVideosRequest struct {
	ctx context.Context
	ApiService EmbedPresetsVideosAPI
	presetId float32
	userId int32
	page *float32
	perPage *float32
}

// The page number of the results to show.
func (r ApiGetEmbedPresetVideosRequest) Page(page float32) ApiGetEmbedPresetVideosRequest {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiGetEmbedPresetVideosRequest) PerPage(perPage float32) ApiGetEmbedPresetVideosRequest {
	r.perPage = &perPage
	return r
}

func (r ApiGetEmbedPresetVideosRequest) Execute() ([]Video, *http.Response, error) {
	return r.ApiService.GetEmbedPresetVideosExecute(r)
}

/*
GetEmbedPresetVideos Get all the videos that have a specific embed preset

This method returns every video to which the specified embed preset has been added. The authenticated user must be the owner of videos.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param presetId The ID of the embed preset.
 @param userId The ID of the user.
 @return ApiGetEmbedPresetVideosRequest
*/
func (a *EmbedPresetsVideosAPIService) GetEmbedPresetVideos(ctx context.Context, presetId float32, userId int32) ApiGetEmbedPresetVideosRequest {
	return ApiGetEmbedPresetVideosRequest{
		ApiService: a,
		ctx: ctx,
		presetId: presetId,
		userId: userId,
	}
}

// Execute executes the request
//  @return []Video
func (a *EmbedPresetsVideosAPIService) GetEmbedPresetVideosExecute(r ApiGetEmbedPresetVideosRequest) ([]Video, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Video
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmbedPresetsVideosAPIService.GetEmbedPresetVideos")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/presets/{preset_id}/videos"
	localVarPath = strings.Replace(localVarPath, "{"+"preset_id"+"}", url.PathEscape(parameterValueToString(r.presetId, "presetId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.video+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetEmbedPresetVideosAlt1Request struct {
	ctx context.Context
	ApiService EmbedPresetsVideosAPI
	presetId float32
	page *float32
	perPage *float32
}

// The page number of the results to show.
func (r ApiGetEmbedPresetVideosAlt1Request) Page(page float32) ApiGetEmbedPresetVideosAlt1Request {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiGetEmbedPresetVideosAlt1Request) PerPage(perPage float32) ApiGetEmbedPresetVideosAlt1Request {
	r.perPage = &perPage
	return r
}

func (r ApiGetEmbedPresetVideosAlt1Request) Execute() ([]Video, *http.Response, error) {
	return r.ApiService.GetEmbedPresetVideosAlt1Execute(r)
}

/*
GetEmbedPresetVideosAlt1 Get all the videos that have a specific embed preset

This method returns every video to which the specified embed preset has been added. The authenticated user must be the owner of videos.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param presetId The ID of the embed preset.
 @return ApiGetEmbedPresetVideosAlt1Request
*/
func (a *EmbedPresetsVideosAPIService) GetEmbedPresetVideosAlt1(ctx context.Context, presetId float32) ApiGetEmbedPresetVideosAlt1Request {
	return ApiGetEmbedPresetVideosAlt1Request{
		ApiService: a,
		ctx: ctx,
		presetId: presetId,
	}
}

// Execute executes the request
//  @return []Video
func (a *EmbedPresetsVideosAPIService) GetEmbedPresetVideosAlt1Execute(r ApiGetEmbedPresetVideosAlt1Request) ([]Video, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Video
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmbedPresetsVideosAPIService.GetEmbedPresetVideosAlt1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/presets/{preset_id}/videos"
	localVarPath = strings.Replace(localVarPath, "{"+"preset_id"+"}", url.PathEscape(parameterValueToString(r.presetId, "presetId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.video+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetVideoEmbedPresetRequest struct {
	ctx context.Context
	ApiService EmbedPresetsVideosAPI
	presetId float32
	videoId int32
}

func (r ApiGetVideoEmbedPresetRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetVideoEmbedPresetExecute(r)
}

/*
GetVideoEmbedPreset Check if an embed preset has been added to a video

This method determines whether a video has the specified embed preset.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param presetId The ID of the embed preset.
 @param videoId The ID of the video.
 @return ApiGetVideoEmbedPresetRequest
*/
func (a *EmbedPresetsVideosAPIService) GetVideoEmbedPreset(ctx context.Context, presetId float32, videoId int32) ApiGetVideoEmbedPresetRequest {
	return ApiGetVideoEmbedPresetRequest{
		ApiService: a,
		ctx: ctx,
		presetId: presetId,
		videoId: videoId,
	}
}

// Execute executes the request
func (a *EmbedPresetsVideosAPIService) GetVideoEmbedPresetExecute(r ApiGetVideoEmbedPresetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmbedPresetsVideosAPIService.GetVideoEmbedPreset")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos/{video_id}/presets/{preset_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"preset_id"+"}", url.PathEscape(parameterValueToString(r.presetId, "presetId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
