/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the CreateLiveEventAlt1RequestStreamEmbed type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateLiveEventAlt1RequestStreamEmbed{}

// CreateLiveEventAlt1RequestStreamEmbed struct for CreateLiveEventAlt1RequestStreamEmbed
type CreateLiveEventAlt1RequestStreamEmbed struct {
	// The embed permission level for the event.  Option descriptions:  * `private` - Only the user can embed the event.  * `public` - Anyone can embed the event.  * `whitelist` - Only those on the whitelist can embed the event. 
	Embed *string `json:"embed,omitempty"`
}

// NewCreateLiveEventAlt1RequestStreamEmbed instantiates a new CreateLiveEventAlt1RequestStreamEmbed object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateLiveEventAlt1RequestStreamEmbed() *CreateLiveEventAlt1RequestStreamEmbed {
	this := CreateLiveEventAlt1RequestStreamEmbed{}
	return &this
}

// NewCreateLiveEventAlt1RequestStreamEmbedWithDefaults instantiates a new CreateLiveEventAlt1RequestStreamEmbed object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateLiveEventAlt1RequestStreamEmbedWithDefaults() *CreateLiveEventAlt1RequestStreamEmbed {
	this := CreateLiveEventAlt1RequestStreamEmbed{}
	return &this
}

// GetEmbed returns the Embed field value if set, zero value otherwise.
func (o *CreateLiveEventAlt1RequestStreamEmbed) GetEmbed() string {
	if o == nil || IsNil(o.Embed) {
		var ret string
		return ret
	}
	return *o.Embed
}

// GetEmbedOk returns a tuple with the Embed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateLiveEventAlt1RequestStreamEmbed) GetEmbedOk() (*string, bool) {
	if o == nil || IsNil(o.Embed) {
		return nil, false
	}
	return o.Embed, true
}

// HasEmbed returns a boolean if a field has been set.
func (o *CreateLiveEventAlt1RequestStreamEmbed) HasEmbed() bool {
	if o != nil && !IsNil(o.Embed) {
		return true
	}

	return false
}

// SetEmbed gets a reference to the given string and assigns it to the Embed field.
func (o *CreateLiveEventAlt1RequestStreamEmbed) SetEmbed(v string) {
	o.Embed = &v
}

func (o CreateLiveEventAlt1RequestStreamEmbed) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateLiveEventAlt1RequestStreamEmbed) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Embed) {
		toSerialize["embed"] = o.Embed
	}
	return toSerialize, nil
}

type NullableCreateLiveEventAlt1RequestStreamEmbed struct {
	value *CreateLiveEventAlt1RequestStreamEmbed
	isSet bool
}

func (v NullableCreateLiveEventAlt1RequestStreamEmbed) Get() *CreateLiveEventAlt1RequestStreamEmbed {
	return v.value
}

func (v *NullableCreateLiveEventAlt1RequestStreamEmbed) Set(val *CreateLiveEventAlt1RequestStreamEmbed) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateLiveEventAlt1RequestStreamEmbed) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateLiveEventAlt1RequestStreamEmbed) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateLiveEventAlt1RequestStreamEmbed(val *CreateLiveEventAlt1RequestStreamEmbed) *NullableCreateLiveEventAlt1RequestStreamEmbed {
	return &NullableCreateLiveEventAlt1RequestStreamEmbed{value: val, isSet: true}
}

func (v NullableCreateLiveEventAlt1RequestStreamEmbed) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateLiveEventAlt1RequestStreamEmbed) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


