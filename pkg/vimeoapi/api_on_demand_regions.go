/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type OnDemandRegionsAPI interface {

	/*
	AddVodRegion Add a specific region to an On Demand page

	This method adds a single region to the specified On Demand page. The authenticated user must be the owner of the page.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param country The country code of the region to add.
	@param ondemandId The ID of the On Demand page.
	@return ApiAddVodRegionRequest
	*/
	AddVodRegion(ctx context.Context, country string, ondemandId float32) ApiAddVodRegionRequest

	// AddVodRegionExecute executes the request
	//  @return OnDemandRegion
	AddVodRegionExecute(r ApiAddVodRegionRequest) (*OnDemandRegion, *http.Response, error)

	/*
	DeleteVodRegion Remove a specific region from an On Demand page

	This method removes a single region from the specified On Demand page. The authenticated user must be the owner of the page.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param country The country code of the region to remove.
	@param ondemandId The ID of the On Demand page.
	@return ApiDeleteVodRegionRequest
	*/
	DeleteVodRegion(ctx context.Context, country string, ondemandId float32) ApiDeleteVodRegionRequest

	// DeleteVodRegionExecute executes the request
	DeleteVodRegionExecute(r ApiDeleteVodRegionRequest) (*http.Response, error)

	/*
	DeleteVodRegions Remove a list of regions from an On Demand page

	This method removes multiple regions from the specified On Demand page. The authenticated user must be the owner of the page.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ondemandId The ID of the On Demand page.
	@return ApiDeleteVodRegionsRequest
	*/
	DeleteVodRegions(ctx context.Context, ondemandId float32) ApiDeleteVodRegionsRequest

	// DeleteVodRegionsExecute executes the request
	//  @return []OnDemandRegion
	DeleteVodRegionsExecute(r ApiDeleteVodRegionsRequest) ([]OnDemandRegion, *http.Response, error)

	/*
	GetRegion Get a specific On Demand region

	This method returns a single On Demand region.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param country The country code of the region to return.
	@return ApiGetRegionRequest
	*/
	GetRegion(ctx context.Context, country string) ApiGetRegionRequest

	// GetRegionExecute executes the request
	//  @return OnDemandRegion
	GetRegionExecute(r ApiGetRegionRequest) (*OnDemandRegion, *http.Response, error)

	/*
	GetRegions Get all the On Demand regions

	This method returns every existing On Demand region.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetRegionsRequest
	*/
	GetRegions(ctx context.Context) ApiGetRegionsRequest

	// GetRegionsExecute executes the request
	//  @return []OnDemandRegion
	GetRegionsExecute(r ApiGetRegionsRequest) ([]OnDemandRegion, *http.Response, error)

	/*
	GetVodRegion Get a specific region on an On Demand page

	This method returns a single region on the specified On Demand page. The authenticated user must be the owner of the page.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param country The country code of the region to return.
	@param ondemandId The ID of the On Demand page.
	@return ApiGetVodRegionRequest
	*/
	GetVodRegion(ctx context.Context, country string, ondemandId float32) ApiGetVodRegionRequest

	// GetVodRegionExecute executes the request
	//  @return OnDemandRegion
	GetVodRegionExecute(r ApiGetVodRegionRequest) (*OnDemandRegion, *http.Response, error)

	/*
	GetVodRegions Get all the regions on an On Demand page

	This method returns every region on the specified On Demand page. The authenticated user must be the owner of the page.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ondemandId The ID of the On Demand page.
	@return ApiGetVodRegionsRequest
	*/
	GetVodRegions(ctx context.Context, ondemandId float32) ApiGetVodRegionsRequest

	// GetVodRegionsExecute executes the request
	//  @return []OnDemandRegion
	GetVodRegionsExecute(r ApiGetVodRegionsRequest) ([]OnDemandRegion, *http.Response, error)

	/*
	SetVodRegions Add a list of regions to an On Demand page

	This method adds multiple regions to the specified On Demand page. The authenticated user must be the owner of the page.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ondemandId The ID of the On Demand page.
	@return ApiSetVodRegionsRequest
	*/
	SetVodRegions(ctx context.Context, ondemandId float32) ApiSetVodRegionsRequest

	// SetVodRegionsExecute executes the request
	//  @return OnDemandRegion
	SetVodRegionsExecute(r ApiSetVodRegionsRequest) (*OnDemandRegion, *http.Response, error)
}

// OnDemandRegionsAPIService OnDemandRegionsAPI service
type OnDemandRegionsAPIService service

type ApiAddVodRegionRequest struct {
	ctx context.Context
	ApiService OnDemandRegionsAPI
	country string
	ondemandId float32
}

func (r ApiAddVodRegionRequest) Execute() (*OnDemandRegion, *http.Response, error) {
	return r.ApiService.AddVodRegionExecute(r)
}

/*
AddVodRegion Add a specific region to an On Demand page

This method adds a single region to the specified On Demand page. The authenticated user must be the owner of the page.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param country The country code of the region to add.
 @param ondemandId The ID of the On Demand page.
 @return ApiAddVodRegionRequest
*/
func (a *OnDemandRegionsAPIService) AddVodRegion(ctx context.Context, country string, ondemandId float32) ApiAddVodRegionRequest {
	return ApiAddVodRegionRequest{
		ApiService: a,
		ctx: ctx,
		country: country,
		ondemandId: ondemandId,
	}
}

// Execute executes the request
//  @return OnDemandRegion
func (a *OnDemandRegionsAPIService) AddVodRegionExecute(r ApiAddVodRegionRequest) (*OnDemandRegion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OnDemandRegion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnDemandRegionsAPIService.AddVodRegion")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ondemand/pages/{ondemand_id}/regions/{country}"
	localVarPath = strings.Replace(localVarPath, "{"+"country"+"}", url.PathEscape(parameterValueToString(r.country, "country")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ondemand_id"+"}", url.PathEscape(parameterValueToString(r.ondemandId, "ondemandId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.ondemand.region+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteVodRegionRequest struct {
	ctx context.Context
	ApiService OnDemandRegionsAPI
	country string
	ondemandId float32
}

func (r ApiDeleteVodRegionRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteVodRegionExecute(r)
}

/*
DeleteVodRegion Remove a specific region from an On Demand page

This method removes a single region from the specified On Demand page. The authenticated user must be the owner of the page.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param country The country code of the region to remove.
 @param ondemandId The ID of the On Demand page.
 @return ApiDeleteVodRegionRequest
*/
func (a *OnDemandRegionsAPIService) DeleteVodRegion(ctx context.Context, country string, ondemandId float32) ApiDeleteVodRegionRequest {
	return ApiDeleteVodRegionRequest{
		ApiService: a,
		ctx: ctx,
		country: country,
		ondemandId: ondemandId,
	}
}

// Execute executes the request
func (a *OnDemandRegionsAPIService) DeleteVodRegionExecute(r ApiDeleteVodRegionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnDemandRegionsAPIService.DeleteVodRegion")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ondemand/pages/{ondemand_id}/regions/{country}"
	localVarPath = strings.Replace(localVarPath, "{"+"country"+"}", url.PathEscape(parameterValueToString(r.country, "country")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ondemand_id"+"}", url.PathEscape(parameterValueToString(r.ondemandId, "ondemandId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.ondemand.region+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteVodRegionsRequest struct {
	ctx context.Context
	ApiService OnDemandRegionsAPI
	ondemandId float32
	deleteVodRegionsRequest *DeleteVodRegionsRequest
}

func (r ApiDeleteVodRegionsRequest) DeleteVodRegionsRequest(deleteVodRegionsRequest DeleteVodRegionsRequest) ApiDeleteVodRegionsRequest {
	r.deleteVodRegionsRequest = &deleteVodRegionsRequest
	return r
}

func (r ApiDeleteVodRegionsRequest) Execute() ([]OnDemandRegion, *http.Response, error) {
	return r.ApiService.DeleteVodRegionsExecute(r)
}

/*
DeleteVodRegions Remove a list of regions from an On Demand page

This method removes multiple regions from the specified On Demand page. The authenticated user must be the owner of the page.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ondemandId The ID of the On Demand page.
 @return ApiDeleteVodRegionsRequest
*/
func (a *OnDemandRegionsAPIService) DeleteVodRegions(ctx context.Context, ondemandId float32) ApiDeleteVodRegionsRequest {
	return ApiDeleteVodRegionsRequest{
		ApiService: a,
		ctx: ctx,
		ondemandId: ondemandId,
	}
}

// Execute executes the request
//  @return []OnDemandRegion
func (a *OnDemandRegionsAPIService) DeleteVodRegionsExecute(r ApiDeleteVodRegionsRequest) ([]OnDemandRegion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []OnDemandRegion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnDemandRegionsAPIService.DeleteVodRegions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ondemand/pages/{ondemand_id}/regions"
	localVarPath = strings.Replace(localVarPath, "{"+"ondemand_id"+"}", url.PathEscape(parameterValueToString(r.ondemandId, "ondemandId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.vimeo.ondemand.region+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.ondemand.region+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deleteVodRegionsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRegionRequest struct {
	ctx context.Context
	ApiService OnDemandRegionsAPI
	country string
}

func (r ApiGetRegionRequest) Execute() (*OnDemandRegion, *http.Response, error) {
	return r.ApiService.GetRegionExecute(r)
}

/*
GetRegion Get a specific On Demand region

This method returns a single On Demand region.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param country The country code of the region to return.
 @return ApiGetRegionRequest
*/
func (a *OnDemandRegionsAPIService) GetRegion(ctx context.Context, country string) ApiGetRegionRequest {
	return ApiGetRegionRequest{
		ApiService: a,
		ctx: ctx,
		country: country,
	}
}

// Execute executes the request
//  @return OnDemandRegion
func (a *OnDemandRegionsAPIService) GetRegionExecute(r ApiGetRegionRequest) (*OnDemandRegion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OnDemandRegion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnDemandRegionsAPIService.GetRegion")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ondemand/regions/{country}"
	localVarPath = strings.Replace(localVarPath, "{"+"country"+"}", url.PathEscape(parameterValueToString(r.country, "country")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.ondemand.region+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRegionsRequest struct {
	ctx context.Context
	ApiService OnDemandRegionsAPI
}

func (r ApiGetRegionsRequest) Execute() ([]OnDemandRegion, *http.Response, error) {
	return r.ApiService.GetRegionsExecute(r)
}

/*
GetRegions Get all the On Demand regions

This method returns every existing On Demand region.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetRegionsRequest
*/
func (a *OnDemandRegionsAPIService) GetRegions(ctx context.Context) ApiGetRegionsRequest {
	return ApiGetRegionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []OnDemandRegion
func (a *OnDemandRegionsAPIService) GetRegionsExecute(r ApiGetRegionsRequest) ([]OnDemandRegion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []OnDemandRegion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnDemandRegionsAPIService.GetRegions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ondemand/regions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.ondemand.region+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetVodRegionRequest struct {
	ctx context.Context
	ApiService OnDemandRegionsAPI
	country string
	ondemandId float32
}

func (r ApiGetVodRegionRequest) Execute() (*OnDemandRegion, *http.Response, error) {
	return r.ApiService.GetVodRegionExecute(r)
}

/*
GetVodRegion Get a specific region on an On Demand page

This method returns a single region on the specified On Demand page. The authenticated user must be the owner of the page.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param country The country code of the region to return.
 @param ondemandId The ID of the On Demand page.
 @return ApiGetVodRegionRequest
*/
func (a *OnDemandRegionsAPIService) GetVodRegion(ctx context.Context, country string, ondemandId float32) ApiGetVodRegionRequest {
	return ApiGetVodRegionRequest{
		ApiService: a,
		ctx: ctx,
		country: country,
		ondemandId: ondemandId,
	}
}

// Execute executes the request
//  @return OnDemandRegion
func (a *OnDemandRegionsAPIService) GetVodRegionExecute(r ApiGetVodRegionRequest) (*OnDemandRegion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OnDemandRegion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnDemandRegionsAPIService.GetVodRegion")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ondemand/pages/{ondemand_id}/regions/{country}"
	localVarPath = strings.Replace(localVarPath, "{"+"country"+"}", url.PathEscape(parameterValueToString(r.country, "country")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ondemand_id"+"}", url.PathEscape(parameterValueToString(r.ondemandId, "ondemandId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.ondemand.region+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetVodRegionsRequest struct {
	ctx context.Context
	ApiService OnDemandRegionsAPI
	ondemandId float32
}

func (r ApiGetVodRegionsRequest) Execute() ([]OnDemandRegion, *http.Response, error) {
	return r.ApiService.GetVodRegionsExecute(r)
}

/*
GetVodRegions Get all the regions on an On Demand page

This method returns every region on the specified On Demand page. The authenticated user must be the owner of the page.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ondemandId The ID of the On Demand page.
 @return ApiGetVodRegionsRequest
*/
func (a *OnDemandRegionsAPIService) GetVodRegions(ctx context.Context, ondemandId float32) ApiGetVodRegionsRequest {
	return ApiGetVodRegionsRequest{
		ApiService: a,
		ctx: ctx,
		ondemandId: ondemandId,
	}
}

// Execute executes the request
//  @return []OnDemandRegion
func (a *OnDemandRegionsAPIService) GetVodRegionsExecute(r ApiGetVodRegionsRequest) ([]OnDemandRegion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []OnDemandRegion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnDemandRegionsAPIService.GetVodRegions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ondemand/pages/{ondemand_id}/regions"
	localVarPath = strings.Replace(localVarPath, "{"+"ondemand_id"+"}", url.PathEscape(parameterValueToString(r.ondemandId, "ondemandId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.ondemand.region+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSetVodRegionsRequest struct {
	ctx context.Context
	ApiService OnDemandRegionsAPI
	ondemandId float32
	setVodRegionsRequest *SetVodRegionsRequest
}

func (r ApiSetVodRegionsRequest) SetVodRegionsRequest(setVodRegionsRequest SetVodRegionsRequest) ApiSetVodRegionsRequest {
	r.setVodRegionsRequest = &setVodRegionsRequest
	return r
}

func (r ApiSetVodRegionsRequest) Execute() (*OnDemandRegion, *http.Response, error) {
	return r.ApiService.SetVodRegionsExecute(r)
}

/*
SetVodRegions Add a list of regions to an On Demand page

This method adds multiple regions to the specified On Demand page. The authenticated user must be the owner of the page.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ondemandId The ID of the On Demand page.
 @return ApiSetVodRegionsRequest
*/
func (a *OnDemandRegionsAPIService) SetVodRegions(ctx context.Context, ondemandId float32) ApiSetVodRegionsRequest {
	return ApiSetVodRegionsRequest{
		ApiService: a,
		ctx: ctx,
		ondemandId: ondemandId,
	}
}

// Execute executes the request
//  @return OnDemandRegion
func (a *OnDemandRegionsAPIService) SetVodRegionsExecute(r ApiSetVodRegionsRequest) (*OnDemandRegion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OnDemandRegion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnDemandRegionsAPIService.SetVodRegions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ondemand/pages/{ondemand_id}/regions"
	localVarPath = strings.Replace(localVarPath, "{"+"ondemand_id"+"}", url.PathEscape(parameterValueToString(r.ondemandId, "ondemandId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.setVodRegionsRequest == nil {
		return localVarReturnValue, nil, reportError("setVodRegionsRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.vimeo.ondemand.region+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.ondemand.region+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.setVodRegionsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
