/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the CreateVodAlt1RequestRent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateVodAlt1RequestRent{}

// CreateVodAlt1RequestRent struct for CreateVodAlt1RequestRent
type CreateVodAlt1RequestRent struct {
	// Whether the video can be rented. This parameter is required when **episodes.rent.active** is `true`.
	Active *bool `json:"active,omitempty"`
	// The rental period of the video.  Option descriptions:  * `1 week` - The video can be rented for a maximum of 1 week.  * `1 year` - The video can be rented for a maximum of 1 year.  * `24 hour` - The video can be rented for a maximum of 24 hours.  * `3 month` - The video can be rented for a maximum of 3 months.  * `30 day` - The video can be rented for a maximum of 30 days.  * `48 hour` - The video can be rented for a maximum of 48 hours.  * `6 month` - The video can be rented for a maximum of 6 months.  * `72 hour` - The video can be rented for a maximum of 72 hours. 
	Period *string `json:"period,omitempty"`
	Price *CreateVodAlt1RequestRentPrice `json:"price,omitempty"`
}

// NewCreateVodAlt1RequestRent instantiates a new CreateVodAlt1RequestRent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateVodAlt1RequestRent() *CreateVodAlt1RequestRent {
	this := CreateVodAlt1RequestRent{}
	return &this
}

// NewCreateVodAlt1RequestRentWithDefaults instantiates a new CreateVodAlt1RequestRent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateVodAlt1RequestRentWithDefaults() *CreateVodAlt1RequestRent {
	this := CreateVodAlt1RequestRent{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *CreateVodAlt1RequestRent) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateVodAlt1RequestRent) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *CreateVodAlt1RequestRent) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *CreateVodAlt1RequestRent) SetActive(v bool) {
	o.Active = &v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *CreateVodAlt1RequestRent) GetPeriod() string {
	if o == nil || IsNil(o.Period) {
		var ret string
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateVodAlt1RequestRent) GetPeriodOk() (*string, bool) {
	if o == nil || IsNil(o.Period) {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *CreateVodAlt1RequestRent) HasPeriod() bool {
	if o != nil && !IsNil(o.Period) {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given string and assigns it to the Period field.
func (o *CreateVodAlt1RequestRent) SetPeriod(v string) {
	o.Period = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *CreateVodAlt1RequestRent) GetPrice() CreateVodAlt1RequestRentPrice {
	if o == nil || IsNil(o.Price) {
		var ret CreateVodAlt1RequestRentPrice
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateVodAlt1RequestRent) GetPriceOk() (*CreateVodAlt1RequestRentPrice, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *CreateVodAlt1RequestRent) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given CreateVodAlt1RequestRentPrice and assigns it to the Price field.
func (o *CreateVodAlt1RequestRent) SetPrice(v CreateVodAlt1RequestRentPrice) {
	o.Price = &v
}

func (o CreateVodAlt1RequestRent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateVodAlt1RequestRent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Period) {
		toSerialize["period"] = o.Period
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	return toSerialize, nil
}

type NullableCreateVodAlt1RequestRent struct {
	value *CreateVodAlt1RequestRent
	isSet bool
}

func (v NullableCreateVodAlt1RequestRent) Get() *CreateVodAlt1RequestRent {
	return v.value
}

func (v *NullableCreateVodAlt1RequestRent) Set(val *CreateVodAlt1RequestRent) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateVodAlt1RequestRent) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateVodAlt1RequestRent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateVodAlt1RequestRent(val *CreateVodAlt1RequestRent) *NullableCreateVodAlt1RequestRent {
	return &NullableCreateVodAlt1RequestRent{value: val, isSet: true}
}

func (v NullableCreateVodAlt1RequestRent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateVodAlt1RequestRent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


