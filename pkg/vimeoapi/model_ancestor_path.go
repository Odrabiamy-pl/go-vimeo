/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the AncestorPath type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AncestorPath{}

// AncestorPath struct for AncestorPath
type AncestorPath struct {
	// The link to the folder.
	Link string `json:"link"`
	// The name of the folder.
	Name string `json:"name"`
}

// NewAncestorPath instantiates a new AncestorPath object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAncestorPath(link string, name string) *AncestorPath {
	this := AncestorPath{}
	this.Link = link
	this.Name = name
	return &this
}

// NewAncestorPathWithDefaults instantiates a new AncestorPath object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAncestorPathWithDefaults() *AncestorPath {
	this := AncestorPath{}
	return &this
}

// GetLink returns the Link field value
func (o *AncestorPath) GetLink() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Link
}

// GetLinkOk returns a tuple with the Link field value
// and a boolean to check if the value has been set.
func (o *AncestorPath) GetLinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Link, true
}

// SetLink sets field value
func (o *AncestorPath) SetLink(v string) {
	o.Link = v
}

// GetName returns the Name field value
func (o *AncestorPath) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AncestorPath) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AncestorPath) SetName(v string) {
	o.Name = v
}

func (o AncestorPath) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AncestorPath) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["link"] = o.Link
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

type NullableAncestorPath struct {
	value *AncestorPath
	isSet bool
}

func (v NullableAncestorPath) Get() *AncestorPath {
	return v.value
}

func (v *NullableAncestorPath) Set(val *AncestorPath) {
	v.value = val
	v.isSet = true
}

func (v NullableAncestorPath) IsSet() bool {
	return v.isSet
}

func (v *NullableAncestorPath) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAncestorPath(val *AncestorPath) *NullableAncestorPath {
	return &NullableAncestorPath{value: val, isSet: true}
}

func (v NullableAncestorPath) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAncestorPath) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
