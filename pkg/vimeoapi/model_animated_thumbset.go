/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the AnimatedThumbset type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnimatedThumbset{}

// AnimatedThumbset struct for AnimatedThumbset
type AnimatedThumbset struct {
	// The URI of the video from which the sets of animated thumbnails were created.
	ClipUri string `json:"clip_uri"`
	// The time in ISO 8601 format when the GIF was created.
	CreatedOn string `json:"created_on"`
	// An array of all the animated thumbnails in the set.
	Sizes []AnimatedThumbnail `json:"sizes"`
	// The availability of the animated thumbnail.  Option descriptions:  * `cancelled` - The animated thumbnail's creation has been cancelled.  * `completed` - The animated thumbnail has been created.  * `failed` - The animated thumbnail's creation has failed.  * `started` - The animated thumbnail's creation has started. 
	Status string `json:"status"`
	// The URI of the set of animated thumbnails.
	Uri string `json:"uri"`
}

// NewAnimatedThumbset instantiates a new AnimatedThumbset object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnimatedThumbset(clipUri string, createdOn string, sizes []AnimatedThumbnail, status string, uri string) *AnimatedThumbset {
	this := AnimatedThumbset{}
	this.ClipUri = clipUri
	this.CreatedOn = createdOn
	this.Sizes = sizes
	this.Status = status
	this.Uri = uri
	return &this
}

// NewAnimatedThumbsetWithDefaults instantiates a new AnimatedThumbset object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnimatedThumbsetWithDefaults() *AnimatedThumbset {
	this := AnimatedThumbset{}
	return &this
}

// GetClipUri returns the ClipUri field value
func (o *AnimatedThumbset) GetClipUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClipUri
}

// GetClipUriOk returns a tuple with the ClipUri field value
// and a boolean to check if the value has been set.
func (o *AnimatedThumbset) GetClipUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClipUri, true
}

// SetClipUri sets field value
func (o *AnimatedThumbset) SetClipUri(v string) {
	o.ClipUri = v
}

// GetCreatedOn returns the CreatedOn field value
func (o *AnimatedThumbset) GetCreatedOn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedOn
}

// GetCreatedOnOk returns a tuple with the CreatedOn field value
// and a boolean to check if the value has been set.
func (o *AnimatedThumbset) GetCreatedOnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedOn, true
}

// SetCreatedOn sets field value
func (o *AnimatedThumbset) SetCreatedOn(v string) {
	o.CreatedOn = v
}

// GetSizes returns the Sizes field value
func (o *AnimatedThumbset) GetSizes() []AnimatedThumbnail {
	if o == nil {
		var ret []AnimatedThumbnail
		return ret
	}

	return o.Sizes
}

// GetSizesOk returns a tuple with the Sizes field value
// and a boolean to check if the value has been set.
func (o *AnimatedThumbset) GetSizesOk() ([]AnimatedThumbnail, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sizes, true
}

// SetSizes sets field value
func (o *AnimatedThumbset) SetSizes(v []AnimatedThumbnail) {
	o.Sizes = v
}

// GetStatus returns the Status field value
func (o *AnimatedThumbset) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *AnimatedThumbset) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *AnimatedThumbset) SetStatus(v string) {
	o.Status = v
}

// GetUri returns the Uri field value
func (o *AnimatedThumbset) GetUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uri
}

// GetUriOk returns a tuple with the Uri field value
// and a boolean to check if the value has been set.
func (o *AnimatedThumbset) GetUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uri, true
}

// SetUri sets field value
func (o *AnimatedThumbset) SetUri(v string) {
	o.Uri = v
}

func (o AnimatedThumbset) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnimatedThumbset) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["clip_uri"] = o.ClipUri
	toSerialize["created_on"] = o.CreatedOn
	toSerialize["sizes"] = o.Sizes
	toSerialize["status"] = o.Status
	toSerialize["uri"] = o.Uri
	return toSerialize, nil
}

type NullableAnimatedThumbset struct {
	value *AnimatedThumbset
	isSet bool
}

func (v NullableAnimatedThumbset) Get() *AnimatedThumbset {
	return v.value
}

func (v *NullableAnimatedThumbset) Set(val *AnimatedThumbset) {
	v.value = val
	v.isSet = true
}

func (v NullableAnimatedThumbset) IsSet() bool {
	return v.isSet
}

func (v *NullableAnimatedThumbset) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnimatedThumbset(val *AnimatedThumbset) *NullableAnimatedThumbset {
	return &NullableAnimatedThumbset{value: val, isSet: true}
}

func (v NullableAnimatedThumbset) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnimatedThumbset) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


