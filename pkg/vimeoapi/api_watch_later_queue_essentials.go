/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type WatchLaterQueueEssentialsAPI interface {

	/*
		AddVideoToWatchLater Add a video to the user's Watch Later queue

		This method adds the specified video to the authenticated user's Watch Later queue.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param userId The ID of the user.
		@param videoId The ID of the video.
		@return ApiAddVideoToWatchLaterRequest
	*/
	AddVideoToWatchLater(ctx context.Context, userId int32, videoId int32) ApiAddVideoToWatchLaterRequest

	// AddVideoToWatchLaterExecute executes the request
	AddVideoToWatchLaterExecute(r ApiAddVideoToWatchLaterRequest) (*http.Response, error)

	/*
		AddVideoToWatchLaterAlt1 Add a video to the user's Watch Later queue

		This method adds the specified video to the authenticated user's Watch Later queue.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param videoId The ID of the video.
		@return ApiAddVideoToWatchLaterAlt1Request
	*/
	AddVideoToWatchLaterAlt1(ctx context.Context, videoId int32) ApiAddVideoToWatchLaterAlt1Request

	// AddVideoToWatchLaterAlt1Execute executes the request
	AddVideoToWatchLaterAlt1Execute(r ApiAddVideoToWatchLaterAlt1Request) (*http.Response, error)

	/*
		CheckWatchLaterQueue Check if the user has added a video to their Watch Later queue

		This method checks the authenticated user's Watch Later queue for the specified video.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param userId The ID of the user.
		@param videoId The ID of the video.
		@return ApiCheckWatchLaterQueueRequest
	*/
	CheckWatchLaterQueue(ctx context.Context, userId int32, videoId int32) ApiCheckWatchLaterQueueRequest

	// CheckWatchLaterQueueExecute executes the request
	//  @return Video
	CheckWatchLaterQueueExecute(r ApiCheckWatchLaterQueueRequest) (*Video, *http.Response, error)

	/*
		CheckWatchLaterQueueAlt1 Check if the user has added a video to their Watch Later queue

		This method checks the authenticated user's Watch Later queue for the specified video.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param videoId The ID of the video.
		@return ApiCheckWatchLaterQueueAlt1Request
	*/
	CheckWatchLaterQueueAlt1(ctx context.Context, videoId int32) ApiCheckWatchLaterQueueAlt1Request

	// CheckWatchLaterQueueAlt1Execute executes the request
	//  @return Video
	CheckWatchLaterQueueAlt1Execute(r ApiCheckWatchLaterQueueAlt1Request) (*Video, *http.Response, error)

	/*
		DeleteVideoFromWatchLater Remove a video from the user's Watch Later queue

		This method removes the specified video from the authenticated user's Watch Later queue.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param userId The ID of the user.
		@param videoId The ID of the video.
		@return ApiDeleteVideoFromWatchLaterRequest
	*/
	DeleteVideoFromWatchLater(ctx context.Context, userId int32, videoId int32) ApiDeleteVideoFromWatchLaterRequest

	// DeleteVideoFromWatchLaterExecute executes the request
	DeleteVideoFromWatchLaterExecute(r ApiDeleteVideoFromWatchLaterRequest) (*http.Response, error)

	/*
		DeleteVideoFromWatchLaterAlt1 Remove a video from the user's Watch Later queue

		This method removes the specified video from the authenticated user's Watch Later queue.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param videoId The ID of the video.
		@return ApiDeleteVideoFromWatchLaterAlt1Request
	*/
	DeleteVideoFromWatchLaterAlt1(ctx context.Context, videoId int32) ApiDeleteVideoFromWatchLaterAlt1Request

	// DeleteVideoFromWatchLaterAlt1Execute executes the request
	DeleteVideoFromWatchLaterAlt1Execute(r ApiDeleteVideoFromWatchLaterAlt1Request) (*http.Response, error)

	/*
		GetWatchLaterQueue Get all the videos in the user's Watch Later queue

		This method returns every video from the authenticated user's Watch Later queue.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param userId The ID of the user.
		@return ApiGetWatchLaterQueueRequest
	*/
	GetWatchLaterQueue(ctx context.Context, userId int32) ApiGetWatchLaterQueueRequest

	// GetWatchLaterQueueExecute executes the request
	//  @return []Video
	GetWatchLaterQueueExecute(r ApiGetWatchLaterQueueRequest) ([]Video, *http.Response, error)

	/*
		GetWatchLaterQueueAlt1 Get all the videos in the user's Watch Later queue

		This method returns every video from the authenticated user's Watch Later queue.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiGetWatchLaterQueueAlt1Request
	*/
	GetWatchLaterQueueAlt1(ctx context.Context) ApiGetWatchLaterQueueAlt1Request

	// GetWatchLaterQueueAlt1Execute executes the request
	//  @return []Video
	GetWatchLaterQueueAlt1Execute(r ApiGetWatchLaterQueueAlt1Request) ([]Video, *http.Response, error)
}

// WatchLaterQueueEssentialsAPIService WatchLaterQueueEssentialsAPI service
type WatchLaterQueueEssentialsAPIService service

type ApiAddVideoToWatchLaterRequest struct {
	ctx        context.Context
	ApiService WatchLaterQueueEssentialsAPI
	userId     int32
	videoId    int32
}

func (r ApiAddVideoToWatchLaterRequest) Execute() (*http.Response, error) {
	return r.ApiService.AddVideoToWatchLaterExecute(r)
}

/*
AddVideoToWatchLater Add a video to the user's Watch Later queue

This method adds the specified video to the authenticated user's Watch Later queue.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId The ID of the user.
	@param videoId The ID of the video.
	@return ApiAddVideoToWatchLaterRequest
*/
func (a *WatchLaterQueueEssentialsAPIService) AddVideoToWatchLater(ctx context.Context, userId int32, videoId int32) ApiAddVideoToWatchLaterRequest {
	return ApiAddVideoToWatchLaterRequest{
		ApiService: a,
		ctx:        ctx,
		userId:     userId,
		videoId:    videoId,
	}
}

// Execute executes the request
func (a *WatchLaterQueueEssentialsAPIService) AddVideoToWatchLaterExecute(r ApiAddVideoToWatchLaterRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WatchLaterQueueEssentialsAPIService.AddVideoToWatchLater")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/watchlater/{video_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAddVideoToWatchLaterAlt1Request struct {
	ctx        context.Context
	ApiService WatchLaterQueueEssentialsAPI
	videoId    int32
}

func (r ApiAddVideoToWatchLaterAlt1Request) Execute() (*http.Response, error) {
	return r.ApiService.AddVideoToWatchLaterAlt1Execute(r)
}

/*
AddVideoToWatchLaterAlt1 Add a video to the user's Watch Later queue

This method adds the specified video to the authenticated user's Watch Later queue.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param videoId The ID of the video.
	@return ApiAddVideoToWatchLaterAlt1Request
*/
func (a *WatchLaterQueueEssentialsAPIService) AddVideoToWatchLaterAlt1(ctx context.Context, videoId int32) ApiAddVideoToWatchLaterAlt1Request {
	return ApiAddVideoToWatchLaterAlt1Request{
		ApiService: a,
		ctx:        ctx,
		videoId:    videoId,
	}
}

// Execute executes the request
func (a *WatchLaterQueueEssentialsAPIService) AddVideoToWatchLaterAlt1Execute(r ApiAddVideoToWatchLaterAlt1Request) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WatchLaterQueueEssentialsAPIService.AddVideoToWatchLaterAlt1")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/watchlater/{video_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCheckWatchLaterQueueRequest struct {
	ctx        context.Context
	ApiService WatchLaterQueueEssentialsAPI
	userId     int32
	videoId    int32
}

func (r ApiCheckWatchLaterQueueRequest) Execute() (*Video, *http.Response, error) {
	return r.ApiService.CheckWatchLaterQueueExecute(r)
}

/*
CheckWatchLaterQueue Check if the user has added a video to their Watch Later queue

This method checks the authenticated user's Watch Later queue for the specified video.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId The ID of the user.
	@param videoId The ID of the video.
	@return ApiCheckWatchLaterQueueRequest
*/
func (a *WatchLaterQueueEssentialsAPIService) CheckWatchLaterQueue(ctx context.Context, userId int32, videoId int32) ApiCheckWatchLaterQueueRequest {
	return ApiCheckWatchLaterQueueRequest{
		ApiService: a,
		ctx:        ctx,
		userId:     userId,
		videoId:    videoId,
	}
}

// Execute executes the request
//
//	@return Video
func (a *WatchLaterQueueEssentialsAPIService) CheckWatchLaterQueueExecute(r ApiCheckWatchLaterQueueRequest) (*Video, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Video
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WatchLaterQueueEssentialsAPIService.CheckWatchLaterQueue")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/watchlater/{video_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.video+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCheckWatchLaterQueueAlt1Request struct {
	ctx        context.Context
	ApiService WatchLaterQueueEssentialsAPI
	videoId    int32
}

func (r ApiCheckWatchLaterQueueAlt1Request) Execute() (*Video, *http.Response, error) {
	return r.ApiService.CheckWatchLaterQueueAlt1Execute(r)
}

/*
CheckWatchLaterQueueAlt1 Check if the user has added a video to their Watch Later queue

This method checks the authenticated user's Watch Later queue for the specified video.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param videoId The ID of the video.
	@return ApiCheckWatchLaterQueueAlt1Request
*/
func (a *WatchLaterQueueEssentialsAPIService) CheckWatchLaterQueueAlt1(ctx context.Context, videoId int32) ApiCheckWatchLaterQueueAlt1Request {
	return ApiCheckWatchLaterQueueAlt1Request{
		ApiService: a,
		ctx:        ctx,
		videoId:    videoId,
	}
}

// Execute executes the request
//
//	@return Video
func (a *WatchLaterQueueEssentialsAPIService) CheckWatchLaterQueueAlt1Execute(r ApiCheckWatchLaterQueueAlt1Request) (*Video, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Video
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WatchLaterQueueEssentialsAPIService.CheckWatchLaterQueueAlt1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/watchlater/{video_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.video+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteVideoFromWatchLaterRequest struct {
	ctx        context.Context
	ApiService WatchLaterQueueEssentialsAPI
	userId     int32
	videoId    int32
}

func (r ApiDeleteVideoFromWatchLaterRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteVideoFromWatchLaterExecute(r)
}

/*
DeleteVideoFromWatchLater Remove a video from the user's Watch Later queue

This method removes the specified video from the authenticated user's Watch Later queue.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId The ID of the user.
	@param videoId The ID of the video.
	@return ApiDeleteVideoFromWatchLaterRequest
*/
func (a *WatchLaterQueueEssentialsAPIService) DeleteVideoFromWatchLater(ctx context.Context, userId int32, videoId int32) ApiDeleteVideoFromWatchLaterRequest {
	return ApiDeleteVideoFromWatchLaterRequest{
		ApiService: a,
		ctx:        ctx,
		userId:     userId,
		videoId:    videoId,
	}
}

// Execute executes the request
func (a *WatchLaterQueueEssentialsAPIService) DeleteVideoFromWatchLaterExecute(r ApiDeleteVideoFromWatchLaterRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WatchLaterQueueEssentialsAPIService.DeleteVideoFromWatchLater")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/watchlater/{video_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteVideoFromWatchLaterAlt1Request struct {
	ctx        context.Context
	ApiService WatchLaterQueueEssentialsAPI
	videoId    int32
}

func (r ApiDeleteVideoFromWatchLaterAlt1Request) Execute() (*http.Response, error) {
	return r.ApiService.DeleteVideoFromWatchLaterAlt1Execute(r)
}

/*
DeleteVideoFromWatchLaterAlt1 Remove a video from the user's Watch Later queue

This method removes the specified video from the authenticated user's Watch Later queue.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param videoId The ID of the video.
	@return ApiDeleteVideoFromWatchLaterAlt1Request
*/
func (a *WatchLaterQueueEssentialsAPIService) DeleteVideoFromWatchLaterAlt1(ctx context.Context, videoId int32) ApiDeleteVideoFromWatchLaterAlt1Request {
	return ApiDeleteVideoFromWatchLaterAlt1Request{
		ApiService: a,
		ctx:        ctx,
		videoId:    videoId,
	}
}

// Execute executes the request
func (a *WatchLaterQueueEssentialsAPIService) DeleteVideoFromWatchLaterAlt1Execute(r ApiDeleteVideoFromWatchLaterAlt1Request) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WatchLaterQueueEssentialsAPIService.DeleteVideoFromWatchLaterAlt1")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/watchlater/{video_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetWatchLaterQueueRequest struct {
	ctx              context.Context
	ApiService       WatchLaterQueueEssentialsAPI
	userId           int32
	direction        *string
	filter           *string
	filterEmbeddable *bool
	page             *float32
	perPage          *float32
	query            *string
	sort             *string
}

// The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.
func (r ApiGetWatchLaterQueueRequest) Direction(direction string) ApiGetWatchLaterQueueRequest {
	r.direction = &direction
	return r
}

// The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos.
func (r ApiGetWatchLaterQueueRequest) Filter(filter string) ApiGetWatchLaterQueueRequest {
	r.filter = &filter
	return r
}

// Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;.
func (r ApiGetWatchLaterQueueRequest) FilterEmbeddable(filterEmbeddable bool) ApiGetWatchLaterQueueRequest {
	r.filterEmbeddable = &filterEmbeddable
	return r
}

// The page number of the results to show.
func (r ApiGetWatchLaterQueueRequest) Page(page float32) ApiGetWatchLaterQueueRequest {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiGetWatchLaterQueueRequest) PerPage(perPage float32) ApiGetWatchLaterQueueRequest {
	r.perPage = &perPage
	return r
}

// The search query to use to filter the results.
func (r ApiGetWatchLaterQueueRequest) Query(query string) ApiGetWatchLaterQueueRequest {
	r.query = &query
	return r
}

// The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date added.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.
func (r ApiGetWatchLaterQueueRequest) Sort(sort string) ApiGetWatchLaterQueueRequest {
	r.sort = &sort
	return r
}

func (r ApiGetWatchLaterQueueRequest) Execute() ([]Video, *http.Response, error) {
	return r.ApiService.GetWatchLaterQueueExecute(r)
}

/*
GetWatchLaterQueue Get all the videos in the user's Watch Later queue

This method returns every video from the authenticated user's Watch Later queue.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId The ID of the user.
	@return ApiGetWatchLaterQueueRequest
*/
func (a *WatchLaterQueueEssentialsAPIService) GetWatchLaterQueue(ctx context.Context, userId int32) ApiGetWatchLaterQueueRequest {
	return ApiGetWatchLaterQueueRequest{
		ApiService: a,
		ctx:        ctx,
		userId:     userId,
	}
}

// Execute executes the request
//
//	@return []Video
func (a *WatchLaterQueueEssentialsAPIService) GetWatchLaterQueueExecute(r ApiGetWatchLaterQueueRequest) ([]Video, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Video
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WatchLaterQueueEssentialsAPIService.GetWatchLaterQueue")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/watchlater"
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.filterEmbeddable != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter_embeddable", r.filterEmbeddable, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	if r.query != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "query", r.query, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.video+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetWatchLaterQueueAlt1Request struct {
	ctx              context.Context
	ApiService       WatchLaterQueueEssentialsAPI
	direction        *string
	filter           *string
	filterEmbeddable *bool
	page             *float32
	perPage          *float32
	query            *string
	sort             *string
}

// The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.
func (r ApiGetWatchLaterQueueAlt1Request) Direction(direction string) ApiGetWatchLaterQueueAlt1Request {
	r.direction = &direction
	return r
}

// The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos.
func (r ApiGetWatchLaterQueueAlt1Request) Filter(filter string) ApiGetWatchLaterQueueAlt1Request {
	r.filter = &filter
	return r
}

// Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;.
func (r ApiGetWatchLaterQueueAlt1Request) FilterEmbeddable(filterEmbeddable bool) ApiGetWatchLaterQueueAlt1Request {
	r.filterEmbeddable = &filterEmbeddable
	return r
}

// The page number of the results to show.
func (r ApiGetWatchLaterQueueAlt1Request) Page(page float32) ApiGetWatchLaterQueueAlt1Request {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiGetWatchLaterQueueAlt1Request) PerPage(perPage float32) ApiGetWatchLaterQueueAlt1Request {
	r.perPage = &perPage
	return r
}

// The search query to use to filter the results.
func (r ApiGetWatchLaterQueueAlt1Request) Query(query string) ApiGetWatchLaterQueueAlt1Request {
	r.query = &query
	return r
}

// The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date added.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.
func (r ApiGetWatchLaterQueueAlt1Request) Sort(sort string) ApiGetWatchLaterQueueAlt1Request {
	r.sort = &sort
	return r
}

func (r ApiGetWatchLaterQueueAlt1Request) Execute() ([]Video, *http.Response, error) {
	return r.ApiService.GetWatchLaterQueueAlt1Execute(r)
}

/*
GetWatchLaterQueueAlt1 Get all the videos in the user's Watch Later queue

This method returns every video from the authenticated user's Watch Later queue.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetWatchLaterQueueAlt1Request
*/
func (a *WatchLaterQueueEssentialsAPIService) GetWatchLaterQueueAlt1(ctx context.Context) ApiGetWatchLaterQueueAlt1Request {
	return ApiGetWatchLaterQueueAlt1Request{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Video
func (a *WatchLaterQueueEssentialsAPIService) GetWatchLaterQueueAlt1Execute(r ApiGetWatchLaterQueueAlt1Request) ([]Video, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Video
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WatchLaterQueueEssentialsAPIService.GetWatchLaterQueueAlt1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/watchlater"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.filterEmbeddable != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter_embeddable", r.filterEmbeddable, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	if r.query != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "query", r.query, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.video+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
