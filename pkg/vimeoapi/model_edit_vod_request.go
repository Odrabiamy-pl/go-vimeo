/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the EditVodRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EditVodRequest{}

// EditVodRequest struct for EditVodRequest
type EditVodRequest struct {
	// The custom string to use in the Vimeo URL of the On Demand page.
	Link     *string                 `json:"link,omitempty"`
	Preorder *EditVodRequestPreorder `json:"preorder,omitempty"`
	Publish  *EditVodRequestPublish  `json:"publish,omitempty"`
	// Whether to publish the On Demand page automatically after all videos have finished transcoding.
	PublishWhenReady *bool `json:"publish_when_ready,omitempty"`
}

// NewEditVodRequest instantiates a new EditVodRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditVodRequest() *EditVodRequest {
	this := EditVodRequest{}
	return &this
}

// NewEditVodRequestWithDefaults instantiates a new EditVodRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditVodRequestWithDefaults() *EditVodRequest {
	this := EditVodRequest{}
	return &this
}

// GetLink returns the Link field value if set, zero value otherwise.
func (o *EditVodRequest) GetLink() string {
	if o == nil || IsNil(o.Link) {
		var ret string
		return ret
	}
	return *o.Link
}

// GetLinkOk returns a tuple with the Link field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditVodRequest) GetLinkOk() (*string, bool) {
	if o == nil || IsNil(o.Link) {
		return nil, false
	}
	return o.Link, true
}

// HasLink returns a boolean if a field has been set.
func (o *EditVodRequest) HasLink() bool {
	if o != nil && !IsNil(o.Link) {
		return true
	}

	return false
}

// SetLink gets a reference to the given string and assigns it to the Link field.
func (o *EditVodRequest) SetLink(v string) {
	o.Link = &v
}

// GetPreorder returns the Preorder field value if set, zero value otherwise.
func (o *EditVodRequest) GetPreorder() EditVodRequestPreorder {
	if o == nil || IsNil(o.Preorder) {
		var ret EditVodRequestPreorder
		return ret
	}
	return *o.Preorder
}

// GetPreorderOk returns a tuple with the Preorder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditVodRequest) GetPreorderOk() (*EditVodRequestPreorder, bool) {
	if o == nil || IsNil(o.Preorder) {
		return nil, false
	}
	return o.Preorder, true
}

// HasPreorder returns a boolean if a field has been set.
func (o *EditVodRequest) HasPreorder() bool {
	if o != nil && !IsNil(o.Preorder) {
		return true
	}

	return false
}

// SetPreorder gets a reference to the given EditVodRequestPreorder and assigns it to the Preorder field.
func (o *EditVodRequest) SetPreorder(v EditVodRequestPreorder) {
	o.Preorder = &v
}

// GetPublish returns the Publish field value if set, zero value otherwise.
func (o *EditVodRequest) GetPublish() EditVodRequestPublish {
	if o == nil || IsNil(o.Publish) {
		var ret EditVodRequestPublish
		return ret
	}
	return *o.Publish
}

// GetPublishOk returns a tuple with the Publish field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditVodRequest) GetPublishOk() (*EditVodRequestPublish, bool) {
	if o == nil || IsNil(o.Publish) {
		return nil, false
	}
	return o.Publish, true
}

// HasPublish returns a boolean if a field has been set.
func (o *EditVodRequest) HasPublish() bool {
	if o != nil && !IsNil(o.Publish) {
		return true
	}

	return false
}

// SetPublish gets a reference to the given EditVodRequestPublish and assigns it to the Publish field.
func (o *EditVodRequest) SetPublish(v EditVodRequestPublish) {
	o.Publish = &v
}

// GetPublishWhenReady returns the PublishWhenReady field value if set, zero value otherwise.
func (o *EditVodRequest) GetPublishWhenReady() bool {
	if o == nil || IsNil(o.PublishWhenReady) {
		var ret bool
		return ret
	}
	return *o.PublishWhenReady
}

// GetPublishWhenReadyOk returns a tuple with the PublishWhenReady field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditVodRequest) GetPublishWhenReadyOk() (*bool, bool) {
	if o == nil || IsNil(o.PublishWhenReady) {
		return nil, false
	}
	return o.PublishWhenReady, true
}

// HasPublishWhenReady returns a boolean if a field has been set.
func (o *EditVodRequest) HasPublishWhenReady() bool {
	if o != nil && !IsNil(o.PublishWhenReady) {
		return true
	}

	return false
}

// SetPublishWhenReady gets a reference to the given bool and assigns it to the PublishWhenReady field.
func (o *EditVodRequest) SetPublishWhenReady(v bool) {
	o.PublishWhenReady = &v
}

func (o EditVodRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EditVodRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Link) {
		toSerialize["link"] = o.Link
	}
	if !IsNil(o.Preorder) {
		toSerialize["preorder"] = o.Preorder
	}
	if !IsNil(o.Publish) {
		toSerialize["publish"] = o.Publish
	}
	if !IsNil(o.PublishWhenReady) {
		toSerialize["publish_when_ready"] = o.PublishWhenReady
	}
	return toSerialize, nil
}

type NullableEditVodRequest struct {
	value *EditVodRequest
	isSet bool
}

func (v NullableEditVodRequest) Get() *EditVodRequest {
	return v.value
}

func (v *NullableEditVodRequest) Set(val *EditVodRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEditVodRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEditVodRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditVodRequest(val *EditVodRequest) *NullableEditVodRequest {
	return &NullableEditVodRequest{value: val, isSet: true}
}

func (v NullableEditVodRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditVodRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
