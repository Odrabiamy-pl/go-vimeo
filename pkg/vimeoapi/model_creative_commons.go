/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreativeCommons type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreativeCommons{}

// CreativeCommons struct for CreativeCommons
type CreativeCommons struct {
	// The type of Creative Commons license.  Option descriptions:  * `by` - Attribution.  * `by-nc` - Attribution Non-Commercial.  * `by-nc-nd` - Attribution Non-Commercial No Derivatives.  * `by-nc-sa` - Attribution Non-Commercial Share Alike.  * `by-nd` - Attribution No Derivatives.  * `by-sa` - Attribution Share Alike.  * `cc0` - Public Domain Dedication. 
	Code string `json:"code"`
	// The description of the Creative Commons license.
	Name string `json:"name"`
	// The canonical relative URI of the Creative Commons license.
	Uri NullableString `json:"uri"`
}

type _CreativeCommons CreativeCommons

// NewCreativeCommons instantiates a new CreativeCommons object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreativeCommons(code string, name string, uri NullableString) *CreativeCommons {
	this := CreativeCommons{}
	this.Code = code
	this.Name = name
	this.Uri = uri
	return &this
}

// NewCreativeCommonsWithDefaults instantiates a new CreativeCommons object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreativeCommonsWithDefaults() *CreativeCommons {
	this := CreativeCommons{}
	return &this
}

// GetCode returns the Code field value
func (o *CreativeCommons) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *CreativeCommons) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *CreativeCommons) SetCode(v string) {
	o.Code = v
}

// GetName returns the Name field value
func (o *CreativeCommons) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreativeCommons) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreativeCommons) SetName(v string) {
	o.Name = v
}

// GetUri returns the Uri field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CreativeCommons) GetUri() string {
	if o == nil || o.Uri.Get() == nil {
		var ret string
		return ret
	}

	return *o.Uri.Get()
}

// GetUriOk returns a tuple with the Uri field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreativeCommons) GetUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Uri.Get(), o.Uri.IsSet()
}

// SetUri sets field value
func (o *CreativeCommons) SetUri(v string) {
	o.Uri.Set(&v)
}

func (o CreativeCommons) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreativeCommons) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	toSerialize["name"] = o.Name
	toSerialize["uri"] = o.Uri.Get()
	return toSerialize, nil
}

func (o *CreativeCommons) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
		"name",
		"uri",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreativeCommons := _CreativeCommons{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreativeCommons)

	if err != nil {
		return err
	}

	*o = CreativeCommons(varCreativeCommons)

	return err
}

type NullableCreativeCommons struct {
	value *CreativeCommons
	isSet bool
}

func (v NullableCreativeCommons) Get() *CreativeCommons {
	return v.value
}

func (v *NullableCreativeCommons) Set(val *CreativeCommons) {
	v.value = val
	v.isSet = true
}

func (v NullableCreativeCommons) IsSet() bool {
	return v.isSet
}

func (v *NullableCreativeCommons) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreativeCommons(val *CreativeCommons) *NullableCreativeCommons {
	return &NullableCreativeCommons{value: val, isSet: true}
}

func (v NullableCreativeCommons) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreativeCommons) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


