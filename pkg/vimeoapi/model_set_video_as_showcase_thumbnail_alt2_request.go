/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the SetVideoAsShowcaseThumbnailAlt2Request type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SetVideoAsShowcaseThumbnailAlt2Request{}

// SetVideoAsShowcaseThumbnailAlt2Request struct for SetVideoAsShowcaseThumbnailAlt2Request
type SetVideoAsShowcaseThumbnailAlt2Request struct {
	// The time in seconds of the video frame to use as the thumbnail image.
	TimeCode *float32 `json:"time_code,omitempty"`
}

// NewSetVideoAsShowcaseThumbnailAlt2Request instantiates a new SetVideoAsShowcaseThumbnailAlt2Request object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetVideoAsShowcaseThumbnailAlt2Request() *SetVideoAsShowcaseThumbnailAlt2Request {
	this := SetVideoAsShowcaseThumbnailAlt2Request{}
	return &this
}

// NewSetVideoAsShowcaseThumbnailAlt2RequestWithDefaults instantiates a new SetVideoAsShowcaseThumbnailAlt2Request object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetVideoAsShowcaseThumbnailAlt2RequestWithDefaults() *SetVideoAsShowcaseThumbnailAlt2Request {
	this := SetVideoAsShowcaseThumbnailAlt2Request{}
	return &this
}

// GetTimeCode returns the TimeCode field value if set, zero value otherwise.
func (o *SetVideoAsShowcaseThumbnailAlt2Request) GetTimeCode() float32 {
	if o == nil || IsNil(o.TimeCode) {
		var ret float32
		return ret
	}
	return *o.TimeCode
}

// GetTimeCodeOk returns a tuple with the TimeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetVideoAsShowcaseThumbnailAlt2Request) GetTimeCodeOk() (*float32, bool) {
	if o == nil || IsNil(o.TimeCode) {
		return nil, false
	}
	return o.TimeCode, true
}

// HasTimeCode returns a boolean if a field has been set.
func (o *SetVideoAsShowcaseThumbnailAlt2Request) HasTimeCode() bool {
	if o != nil && !IsNil(o.TimeCode) {
		return true
	}

	return false
}

// SetTimeCode gets a reference to the given float32 and assigns it to the TimeCode field.
func (o *SetVideoAsShowcaseThumbnailAlt2Request) SetTimeCode(v float32) {
	o.TimeCode = &v
}

func (o SetVideoAsShowcaseThumbnailAlt2Request) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SetVideoAsShowcaseThumbnailAlt2Request) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TimeCode) {
		toSerialize["time_code"] = o.TimeCode
	}
	return toSerialize, nil
}

type NullableSetVideoAsShowcaseThumbnailAlt2Request struct {
	value *SetVideoAsShowcaseThumbnailAlt2Request
	isSet bool
}

func (v NullableSetVideoAsShowcaseThumbnailAlt2Request) Get() *SetVideoAsShowcaseThumbnailAlt2Request {
	return v.value
}

func (v *NullableSetVideoAsShowcaseThumbnailAlt2Request) Set(val *SetVideoAsShowcaseThumbnailAlt2Request) {
	v.value = val
	v.isSet = true
}

func (v NullableSetVideoAsShowcaseThumbnailAlt2Request) IsSet() bool {
	return v.isSet
}

func (v *NullableSetVideoAsShowcaseThumbnailAlt2Request) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetVideoAsShowcaseThumbnailAlt2Request(val *SetVideoAsShowcaseThumbnailAlt2Request) *NullableSetVideoAsShowcaseThumbnailAlt2Request {
	return &NullableSetVideoAsShowcaseThumbnailAlt2Request{value: val, isSet: true}
}

func (v NullableSetVideoAsShowcaseThumbnailAlt2Request) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetVideoAsShowcaseThumbnailAlt2Request) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


