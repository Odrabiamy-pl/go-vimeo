/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LiveEventEmailQuota type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LiveEventEmailQuota{}

// LiveEventEmailQuota Information about the event owner's email quota.
type LiveEventEmailQuota struct {
	// The maximum number of entity emails that the user can send.
	Capping float32 `json:"capping"`
	// The current number of entity emails that the user has sent.
	Total float32 `json:"total"`
}

type _LiveEventEmailQuota LiveEventEmailQuota

// NewLiveEventEmailQuota instantiates a new LiveEventEmailQuota object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLiveEventEmailQuota(capping float32, total float32) *LiveEventEmailQuota {
	this := LiveEventEmailQuota{}
	this.Capping = capping
	this.Total = total
	return &this
}

// NewLiveEventEmailQuotaWithDefaults instantiates a new LiveEventEmailQuota object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLiveEventEmailQuotaWithDefaults() *LiveEventEmailQuota {
	this := LiveEventEmailQuota{}
	return &this
}

// GetCapping returns the Capping field value
func (o *LiveEventEmailQuota) GetCapping() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Capping
}

// GetCappingOk returns a tuple with the Capping field value
// and a boolean to check if the value has been set.
func (o *LiveEventEmailQuota) GetCappingOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Capping, true
}

// SetCapping sets field value
func (o *LiveEventEmailQuota) SetCapping(v float32) {
	o.Capping = v
}

// GetTotal returns the Total field value
func (o *LiveEventEmailQuota) GetTotal() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *LiveEventEmailQuota) GetTotalOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *LiveEventEmailQuota) SetTotal(v float32) {
	o.Total = v
}

func (o LiveEventEmailQuota) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LiveEventEmailQuota) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["capping"] = o.Capping
	toSerialize["total"] = o.Total
	return toSerialize, nil
}

func (o *LiveEventEmailQuota) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"capping",
		"total",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLiveEventEmailQuota := _LiveEventEmailQuota{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLiveEventEmailQuota)

	if err != nil {
		return err
	}

	*o = LiveEventEmailQuota(varLiveEventEmailQuota)

	return err
}

type NullableLiveEventEmailQuota struct {
	value *LiveEventEmailQuota
	isSet bool
}

func (v NullableLiveEventEmailQuota) Get() *LiveEventEmailQuota {
	return v.value
}

func (v *NullableLiveEventEmailQuota) Set(val *LiveEventEmailQuota) {
	v.value = val
	v.isSet = true
}

func (v NullableLiveEventEmailQuota) IsSet() bool {
	return v.isSet
}

func (v *NullableLiveEventEmailQuota) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLiveEventEmailQuota(val *LiveEventEmailQuota) *NullableLiveEventEmailQuota {
	return &NullableLiveEventEmailQuota{value: val, isSet: true}
}

func (v NullableLiveEventEmailQuota) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLiveEventEmailQuota) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


