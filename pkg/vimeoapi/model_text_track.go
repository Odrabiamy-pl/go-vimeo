/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the TextTrack type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TextTrack{}

// TextTrack struct for TextTrack
type TextTrack struct {
	// Whether the text track is active.
	Active bool `json:"active"`
	// The name of the language.
	DisplayLanguage string `json:"display_language"`
	// The read-only URL of the text track file, intended for use with HLS playback.
	HlsLink string `json:"hls_link"`
	// The time in ISO 8601 format when the read-only HLS playback text track file expires.
	HlsLinkExpiresTime string `json:"hls_link_expires_time"`
	// The text track identifier.
	Id float32 `json:"id"`
	// The language code for the text track. To see a full list, request `/languages?filter=texttrack`.
	Language NullableString `json:"language"`
	// The read-only URL of the text track file. You can upload to this link when you create it for the first time.
	Link string `json:"link"`
	// The time in ISO 8601 format when the text track link expires.
	LinkExpiresTime string `json:"link_expires_time"`
	// The descriptive name of the text track.
	Name NullableString `json:"name"`
	// The type of text track.  Option descriptions:  * `captions` - The text track is for captions.  * `subtitles` - The text track is for subtitles.
	Type NullableString `json:"type"`
	// The relative URI of the text track.
	Uri string `json:"uri"`
}

// NewTextTrack instantiates a new TextTrack object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTextTrack(active bool, displayLanguage string, hlsLink string, hlsLinkExpiresTime string, id float32, language NullableString, link string, linkExpiresTime string, name NullableString, type_ NullableString, uri string) *TextTrack {
	this := TextTrack{}
	this.Active = active
	this.DisplayLanguage = displayLanguage
	this.HlsLink = hlsLink
	this.HlsLinkExpiresTime = hlsLinkExpiresTime
	this.Id = id
	this.Language = language
	this.Link = link
	this.LinkExpiresTime = linkExpiresTime
	this.Name = name
	this.Type = type_
	this.Uri = uri
	return &this
}

// NewTextTrackWithDefaults instantiates a new TextTrack object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTextTrackWithDefaults() *TextTrack {
	this := TextTrack{}
	return &this
}

// GetActive returns the Active field value
func (o *TextTrack) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *TextTrack) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *TextTrack) SetActive(v bool) {
	o.Active = v
}

// GetDisplayLanguage returns the DisplayLanguage field value
func (o *TextTrack) GetDisplayLanguage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayLanguage
}

// GetDisplayLanguageOk returns a tuple with the DisplayLanguage field value
// and a boolean to check if the value has been set.
func (o *TextTrack) GetDisplayLanguageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayLanguage, true
}

// SetDisplayLanguage sets field value
func (o *TextTrack) SetDisplayLanguage(v string) {
	o.DisplayLanguage = v
}

// GetHlsLink returns the HlsLink field value
func (o *TextTrack) GetHlsLink() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HlsLink
}

// GetHlsLinkOk returns a tuple with the HlsLink field value
// and a boolean to check if the value has been set.
func (o *TextTrack) GetHlsLinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HlsLink, true
}

// SetHlsLink sets field value
func (o *TextTrack) SetHlsLink(v string) {
	o.HlsLink = v
}

// GetHlsLinkExpiresTime returns the HlsLinkExpiresTime field value
func (o *TextTrack) GetHlsLinkExpiresTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HlsLinkExpiresTime
}

// GetHlsLinkExpiresTimeOk returns a tuple with the HlsLinkExpiresTime field value
// and a boolean to check if the value has been set.
func (o *TextTrack) GetHlsLinkExpiresTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HlsLinkExpiresTime, true
}

// SetHlsLinkExpiresTime sets field value
func (o *TextTrack) SetHlsLinkExpiresTime(v string) {
	o.HlsLinkExpiresTime = v
}

// GetId returns the Id field value
func (o *TextTrack) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TextTrack) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TextTrack) SetId(v float32) {
	o.Id = v
}

// GetLanguage returns the Language field value
// If the value is explicit nil, the zero value for string will be returned
func (o *TextTrack) GetLanguage() string {
	if o == nil || o.Language.Get() == nil {
		var ret string
		return ret
	}

	return *o.Language.Get()
}

// GetLanguageOk returns a tuple with the Language field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TextTrack) GetLanguageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Language.Get(), o.Language.IsSet()
}

// SetLanguage sets field value
func (o *TextTrack) SetLanguage(v string) {
	o.Language.Set(&v)
}

// GetLink returns the Link field value
func (o *TextTrack) GetLink() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Link
}

// GetLinkOk returns a tuple with the Link field value
// and a boolean to check if the value has been set.
func (o *TextTrack) GetLinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Link, true
}

// SetLink sets field value
func (o *TextTrack) SetLink(v string) {
	o.Link = v
}

// GetLinkExpiresTime returns the LinkExpiresTime field value
func (o *TextTrack) GetLinkExpiresTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LinkExpiresTime
}

// GetLinkExpiresTimeOk returns a tuple with the LinkExpiresTime field value
// and a boolean to check if the value has been set.
func (o *TextTrack) GetLinkExpiresTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LinkExpiresTime, true
}

// SetLinkExpiresTime sets field value
func (o *TextTrack) SetLinkExpiresTime(v string) {
	o.LinkExpiresTime = v
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *TextTrack) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TextTrack) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *TextTrack) SetName(v string) {
	o.Name.Set(&v)
}

// GetType returns the Type field value
// If the value is explicit nil, the zero value for string will be returned
func (o *TextTrack) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}

	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TextTrack) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// SetType sets field value
func (o *TextTrack) SetType(v string) {
	o.Type.Set(&v)
}

// GetUri returns the Uri field value
func (o *TextTrack) GetUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uri
}

// GetUriOk returns a tuple with the Uri field value
// and a boolean to check if the value has been set.
func (o *TextTrack) GetUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uri, true
}

// SetUri sets field value
func (o *TextTrack) SetUri(v string) {
	o.Uri = v
}

func (o TextTrack) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TextTrack) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["active"] = o.Active
	toSerialize["display_language"] = o.DisplayLanguage
	toSerialize["hls_link"] = o.HlsLink
	toSerialize["hls_link_expires_time"] = o.HlsLinkExpiresTime
	toSerialize["id"] = o.Id
	toSerialize["language"] = o.Language.Get()
	toSerialize["link"] = o.Link
	toSerialize["link_expires_time"] = o.LinkExpiresTime
	toSerialize["name"] = o.Name.Get()
	toSerialize["type"] = o.Type.Get()
	toSerialize["uri"] = o.Uri
	return toSerialize, nil
}

type NullableTextTrack struct {
	value *TextTrack
	isSet bool
}

func (v NullableTextTrack) Get() *TextTrack {
	return v.value
}

func (v *NullableTextTrack) Set(val *TextTrack) {
	v.value = val
	v.isSet = true
}

func (v NullableTextTrack) IsSet() bool {
	return v.isSet
}

func (v *NullableTextTrack) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTextTrack(val *TextTrack) *NullableTextTrack {
	return &NullableTextTrack{value: val, isSet: true}
}

func (v NullableTextTrack) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTextTrack) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
