/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the ChannelMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChannelMetadata{}

// ChannelMetadata Metadata about the channel.
type ChannelMetadata struct {
	Connections ChannelMetadataConnections `json:"connections"`
	Interactions NullableChannelMetadataInteractions `json:"interactions"`
}

// NewChannelMetadata instantiates a new ChannelMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelMetadata(connections ChannelMetadataConnections, interactions NullableChannelMetadataInteractions) *ChannelMetadata {
	this := ChannelMetadata{}
	this.Connections = connections
	this.Interactions = interactions
	return &this
}

// NewChannelMetadataWithDefaults instantiates a new ChannelMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelMetadataWithDefaults() *ChannelMetadata {
	this := ChannelMetadata{}
	return &this
}

// GetConnections returns the Connections field value
func (o *ChannelMetadata) GetConnections() ChannelMetadataConnections {
	if o == nil {
		var ret ChannelMetadataConnections
		return ret
	}

	return o.Connections
}

// GetConnectionsOk returns a tuple with the Connections field value
// and a boolean to check if the value has been set.
func (o *ChannelMetadata) GetConnectionsOk() (*ChannelMetadataConnections, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Connections, true
}

// SetConnections sets field value
func (o *ChannelMetadata) SetConnections(v ChannelMetadataConnections) {
	o.Connections = v
}

// GetInteractions returns the Interactions field value
// If the value is explicit nil, the zero value for ChannelMetadataInteractions will be returned
func (o *ChannelMetadata) GetInteractions() ChannelMetadataInteractions {
	if o == nil || o.Interactions.Get() == nil {
		var ret ChannelMetadataInteractions
		return ret
	}

	return *o.Interactions.Get()
}

// GetInteractionsOk returns a tuple with the Interactions field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChannelMetadata) GetInteractionsOk() (*ChannelMetadataInteractions, bool) {
	if o == nil {
		return nil, false
	}
	return o.Interactions.Get(), o.Interactions.IsSet()
}

// SetInteractions sets field value
func (o *ChannelMetadata) SetInteractions(v ChannelMetadataInteractions) {
	o.Interactions.Set(&v)
}

func (o ChannelMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChannelMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["connections"] = o.Connections
	toSerialize["interactions"] = o.Interactions.Get()
	return toSerialize, nil
}

type NullableChannelMetadata struct {
	value *ChannelMetadata
	isSet bool
}

func (v NullableChannelMetadata) Get() *ChannelMetadata {
	return v.value
}

func (v *NullableChannelMetadata) Set(val *ChannelMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelMetadata(val *ChannelMetadata) *NullableChannelMetadata {
	return &NullableChannelMetadata{value: val, isSet: true}
}

func (v NullableChannelMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


