/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the CreateLiveEventAlt1RequestStreamPrivacy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateLiveEventAlt1RequestStreamPrivacy{}

// CreateLiveEventAlt1RequestStreamPrivacy The privacy settings of the event.
type CreateLiveEventAlt1RequestStreamPrivacy struct {
	// The initial privacy of the videos generated by streaming to the event as well as the embed privacy of the entire collection.  Option descriptions:  * `anybody` - Anyone can access the event. This privacy setting appears as `Public` on the Vimeo front end.  * `embed_only` - The event doesn't appear on Vimeo, but it can be embedded on other sites.  * `nobody` - No one except the owner can access the event. This privacy setting appears as `Private` on the Vimeo front end.  * `password` - Only those with the password can access the event.  * `unlisted` - Only those with the private link can access the event. 
	View *string `json:"view,omitempty"`
}

// NewCreateLiveEventAlt1RequestStreamPrivacy instantiates a new CreateLiveEventAlt1RequestStreamPrivacy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateLiveEventAlt1RequestStreamPrivacy() *CreateLiveEventAlt1RequestStreamPrivacy {
	this := CreateLiveEventAlt1RequestStreamPrivacy{}
	return &this
}

// NewCreateLiveEventAlt1RequestStreamPrivacyWithDefaults instantiates a new CreateLiveEventAlt1RequestStreamPrivacy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateLiveEventAlt1RequestStreamPrivacyWithDefaults() *CreateLiveEventAlt1RequestStreamPrivacy {
	this := CreateLiveEventAlt1RequestStreamPrivacy{}
	return &this
}

// GetView returns the View field value if set, zero value otherwise.
func (o *CreateLiveEventAlt1RequestStreamPrivacy) GetView() string {
	if o == nil || IsNil(o.View) {
		var ret string
		return ret
	}
	return *o.View
}

// GetViewOk returns a tuple with the View field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateLiveEventAlt1RequestStreamPrivacy) GetViewOk() (*string, bool) {
	if o == nil || IsNil(o.View) {
		return nil, false
	}
	return o.View, true
}

// HasView returns a boolean if a field has been set.
func (o *CreateLiveEventAlt1RequestStreamPrivacy) HasView() bool {
	if o != nil && !IsNil(o.View) {
		return true
	}

	return false
}

// SetView gets a reference to the given string and assigns it to the View field.
func (o *CreateLiveEventAlt1RequestStreamPrivacy) SetView(v string) {
	o.View = &v
}

func (o CreateLiveEventAlt1RequestStreamPrivacy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateLiveEventAlt1RequestStreamPrivacy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.View) {
		toSerialize["view"] = o.View
	}
	return toSerialize, nil
}

type NullableCreateLiveEventAlt1RequestStreamPrivacy struct {
	value *CreateLiveEventAlt1RequestStreamPrivacy
	isSet bool
}

func (v NullableCreateLiveEventAlt1RequestStreamPrivacy) Get() *CreateLiveEventAlt1RequestStreamPrivacy {
	return v.value
}

func (v *NullableCreateLiveEventAlt1RequestStreamPrivacy) Set(val *CreateLiveEventAlt1RequestStreamPrivacy) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateLiveEventAlt1RequestStreamPrivacy) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateLiveEventAlt1RequestStreamPrivacy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateLiveEventAlt1RequestStreamPrivacy(val *CreateLiveEventAlt1RequestStreamPrivacy) *NullableCreateLiveEventAlt1RequestStreamPrivacy {
	return &NullableCreateLiveEventAlt1RequestStreamPrivacy{value: val, isSet: true}
}

func (v NullableCreateLiveEventAlt1RequestStreamPrivacy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateLiveEventAlt1RequestStreamPrivacy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


