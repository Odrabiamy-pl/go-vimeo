/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PresetSettingsButtons type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PresetSettingsButtons{}

// PresetSettingsButtons struct for PresetSettingsButtons
type PresetSettingsButtons struct {
	// Whether the preset includes `Embed` button settings.
	Embed bool `json:"embed"`
	// Whether the preset includes `Fullscreen` button settings.
	Fullscreen bool `json:"fullscreen"`
	// Whether the preset includes `HD` button settings.
	Hd bool `json:"hd"`
	// Whether the preset includes `Like` button settings.
	Like bool `json:"like"`
	// Whether the preset includes `Reaction` button settings.
	Reaction NullableBool `json:"reaction"`
	// Whether the present includes `Share` button settings.
	Share bool `json:"share"`
	// Whether the preset includes `Vote` button settings.
	Vote bool `json:"vote"`
	// Whether the preset includes `Watch Later` button settings.
	Watchlater bool `json:"watchlater"`
}

type _PresetSettingsButtons PresetSettingsButtons

// NewPresetSettingsButtons instantiates a new PresetSettingsButtons object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPresetSettingsButtons(embed bool, fullscreen bool, hd bool, like bool, reaction NullableBool, share bool, vote bool, watchlater bool) *PresetSettingsButtons {
	this := PresetSettingsButtons{}
	this.Embed = embed
	this.Fullscreen = fullscreen
	this.Hd = hd
	this.Like = like
	this.Reaction = reaction
	this.Share = share
	this.Vote = vote
	this.Watchlater = watchlater
	return &this
}

// NewPresetSettingsButtonsWithDefaults instantiates a new PresetSettingsButtons object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPresetSettingsButtonsWithDefaults() *PresetSettingsButtons {
	this := PresetSettingsButtons{}
	return &this
}

// GetEmbed returns the Embed field value
func (o *PresetSettingsButtons) GetEmbed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Embed
}

// GetEmbedOk returns a tuple with the Embed field value
// and a boolean to check if the value has been set.
func (o *PresetSettingsButtons) GetEmbedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Embed, true
}

// SetEmbed sets field value
func (o *PresetSettingsButtons) SetEmbed(v bool) {
	o.Embed = v
}

// GetFullscreen returns the Fullscreen field value
func (o *PresetSettingsButtons) GetFullscreen() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Fullscreen
}

// GetFullscreenOk returns a tuple with the Fullscreen field value
// and a boolean to check if the value has been set.
func (o *PresetSettingsButtons) GetFullscreenOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fullscreen, true
}

// SetFullscreen sets field value
func (o *PresetSettingsButtons) SetFullscreen(v bool) {
	o.Fullscreen = v
}

// GetHd returns the Hd field value
func (o *PresetSettingsButtons) GetHd() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Hd
}

// GetHdOk returns a tuple with the Hd field value
// and a boolean to check if the value has been set.
func (o *PresetSettingsButtons) GetHdOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hd, true
}

// SetHd sets field value
func (o *PresetSettingsButtons) SetHd(v bool) {
	o.Hd = v
}

// GetLike returns the Like field value
func (o *PresetSettingsButtons) GetLike() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Like
}

// GetLikeOk returns a tuple with the Like field value
// and a boolean to check if the value has been set.
func (o *PresetSettingsButtons) GetLikeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Like, true
}

// SetLike sets field value
func (o *PresetSettingsButtons) SetLike(v bool) {
	o.Like = v
}

// GetReaction returns the Reaction field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *PresetSettingsButtons) GetReaction() bool {
	if o == nil || o.Reaction.Get() == nil {
		var ret bool
		return ret
	}

	return *o.Reaction.Get()
}

// GetReactionOk returns a tuple with the Reaction field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PresetSettingsButtons) GetReactionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reaction.Get(), o.Reaction.IsSet()
}

// SetReaction sets field value
func (o *PresetSettingsButtons) SetReaction(v bool) {
	o.Reaction.Set(&v)
}

// GetShare returns the Share field value
func (o *PresetSettingsButtons) GetShare() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Share
}

// GetShareOk returns a tuple with the Share field value
// and a boolean to check if the value has been set.
func (o *PresetSettingsButtons) GetShareOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Share, true
}

// SetShare sets field value
func (o *PresetSettingsButtons) SetShare(v bool) {
	o.Share = v
}

// GetVote returns the Vote field value
func (o *PresetSettingsButtons) GetVote() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Vote
}

// GetVoteOk returns a tuple with the Vote field value
// and a boolean to check if the value has been set.
func (o *PresetSettingsButtons) GetVoteOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vote, true
}

// SetVote sets field value
func (o *PresetSettingsButtons) SetVote(v bool) {
	o.Vote = v
}

// GetWatchlater returns the Watchlater field value
func (o *PresetSettingsButtons) GetWatchlater() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Watchlater
}

// GetWatchlaterOk returns a tuple with the Watchlater field value
// and a boolean to check if the value has been set.
func (o *PresetSettingsButtons) GetWatchlaterOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Watchlater, true
}

// SetWatchlater sets field value
func (o *PresetSettingsButtons) SetWatchlater(v bool) {
	o.Watchlater = v
}

func (o PresetSettingsButtons) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PresetSettingsButtons) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["embed"] = o.Embed
	toSerialize["fullscreen"] = o.Fullscreen
	toSerialize["hd"] = o.Hd
	toSerialize["like"] = o.Like
	toSerialize["reaction"] = o.Reaction.Get()
	toSerialize["share"] = o.Share
	toSerialize["vote"] = o.Vote
	toSerialize["watchlater"] = o.Watchlater
	return toSerialize, nil
}

func (o *PresetSettingsButtons) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"embed",
		"fullscreen",
		"hd",
		"like",
		"reaction",
		"share",
		"vote",
		"watchlater",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPresetSettingsButtons := _PresetSettingsButtons{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPresetSettingsButtons)

	if err != nil {
		return err
	}

	*o = PresetSettingsButtons(varPresetSettingsButtons)

	return err
}

type NullablePresetSettingsButtons struct {
	value *PresetSettingsButtons
	isSet bool
}

func (v NullablePresetSettingsButtons) Get() *PresetSettingsButtons {
	return v.value
}

func (v *NullablePresetSettingsButtons) Set(val *PresetSettingsButtons) {
	v.value = val
	v.isSet = true
}

func (v NullablePresetSettingsButtons) IsSet() bool {
	return v.isSet
}

func (v *NullablePresetSettingsButtons) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePresetSettingsButtons(val *PresetSettingsButtons) *NullablePresetSettingsButtons {
	return &NullablePresetSettingsButtons{value: val, isSet: true}
}

func (v NullablePresetSettingsButtons) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePresetSettingsButtons) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


