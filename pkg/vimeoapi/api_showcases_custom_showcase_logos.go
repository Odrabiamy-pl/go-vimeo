/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type ShowcasesCustomShowcaseLogosAPI interface {

	/*
	CreateShowcaseLogo Add a custom logo to a showcase

	This method adds an image file as a custom logo to the specified showcase. The authenticated user must be the owner of the showcase.

For information on how to upload the logo, see our [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails) guide.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param albumId The ID of the showcase.
	@param userId The ID of the user.
	@return ApiCreateShowcaseLogoRequest
	*/
	CreateShowcaseLogo(ctx context.Context, albumId float32, userId float32) ApiCreateShowcaseLogoRequest

	// CreateShowcaseLogoExecute executes the request
	//  @return Picture
	CreateShowcaseLogoExecute(r ApiCreateShowcaseLogoRequest) (*Picture, *http.Response, error)

	/*
	DeleteShowcaseLogo Delete a custom showcase logo

	This method deletes the specified custom logo from its showcase. The authenticated user must be the owner of the showcase.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param albumId The ID of the showcase.
	@param logoId The ID of the custom logo.
	@param userId The ID of the user.
	@return ApiDeleteShowcaseLogoRequest
	*/
	DeleteShowcaseLogo(ctx context.Context, albumId float32, logoId float32, userId float32) ApiDeleteShowcaseLogoRequest

	// DeleteShowcaseLogoExecute executes the request
	DeleteShowcaseLogoExecute(r ApiDeleteShowcaseLogoRequest) (*http.Response, error)

	/*
	GetShowcaseLogo Get a specific custom showcase logo

	This method returns a single custom logo of the specified showcase. The authenticated user must be the owner of the showcase.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param albumId The ID of the showcase.
	@param logoId The ID of the custom logo.
	@param userId The ID of the user.
	@return ApiGetShowcaseLogoRequest
	*/
	GetShowcaseLogo(ctx context.Context, albumId float32, logoId float32, userId float32) ApiGetShowcaseLogoRequest

	// GetShowcaseLogoExecute executes the request
	//  @return Picture
	GetShowcaseLogoExecute(r ApiGetShowcaseLogoRequest) (*Picture, *http.Response, error)

	/*
	GetShowcaseLogos Get all the custom logos of a showcase

	This method returns every custom logo of the specified showcase. The authenticated user must be the owner of the showcase.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param albumId The ID of the showcase.
	@param userId The ID of the user.
	@return ApiGetShowcaseLogosRequest
	*/
	GetShowcaseLogos(ctx context.Context, albumId float32, userId float32) ApiGetShowcaseLogosRequest

	// GetShowcaseLogosExecute executes the request
	//  @return []Picture
	GetShowcaseLogosExecute(r ApiGetShowcaseLogosRequest) ([]Picture, *http.Response, error)

	/*
	ReplaceShowcaseLogo Replace a custom showcase logo

	This method replaces the specified custom showcase logo with a new image file. The authenticated user must be the owner of the showcase.

For information on how to upload the logo, see our [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails) guide.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param albumId The ID of the showcase.
	@param logoId The ID of the custom logo.
	@param userId The ID of the user.
	@return ApiReplaceShowcaseLogoRequest
	*/
	ReplaceShowcaseLogo(ctx context.Context, albumId float32, logoId float32, userId float32) ApiReplaceShowcaseLogoRequest

	// ReplaceShowcaseLogoExecute executes the request
	//  @return Picture
	ReplaceShowcaseLogoExecute(r ApiReplaceShowcaseLogoRequest) (*Picture, *http.Response, error)
}

// ShowcasesCustomShowcaseLogosAPIService ShowcasesCustomShowcaseLogosAPI service
type ShowcasesCustomShowcaseLogosAPIService service

type ApiCreateShowcaseLogoRequest struct {
	ctx context.Context
	ApiService ShowcasesCustomShowcaseLogosAPI
	albumId float32
	userId float32
}

func (r ApiCreateShowcaseLogoRequest) Execute() (*Picture, *http.Response, error) {
	return r.ApiService.CreateShowcaseLogoExecute(r)
}

/*
CreateShowcaseLogo Add a custom logo to a showcase

This method adds an image file as a custom logo to the specified showcase. The authenticated user must be the owner of the showcase.

For information on how to upload the logo, see our [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails) guide.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param albumId The ID of the showcase.
 @param userId The ID of the user.
 @return ApiCreateShowcaseLogoRequest
*/
func (a *ShowcasesCustomShowcaseLogosAPIService) CreateShowcaseLogo(ctx context.Context, albumId float32, userId float32) ApiCreateShowcaseLogoRequest {
	return ApiCreateShowcaseLogoRequest{
		ApiService: a,
		ctx: ctx,
		albumId: albumId,
		userId: userId,
	}
}

// Execute executes the request
//  @return Picture
func (a *ShowcasesCustomShowcaseLogosAPIService) CreateShowcaseLogoExecute(r ApiCreateShowcaseLogoRequest) (*Picture, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Picture
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShowcasesCustomShowcaseLogosAPIService.CreateShowcaseLogo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/albums/{album_id}/logos"
	localVarPath = strings.Replace(localVarPath, "{"+"album_id"+"}", url.PathEscape(parameterValueToString(r.albumId, "albumId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.picture+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteShowcaseLogoRequest struct {
	ctx context.Context
	ApiService ShowcasesCustomShowcaseLogosAPI
	albumId float32
	logoId float32
	userId float32
}

func (r ApiDeleteShowcaseLogoRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteShowcaseLogoExecute(r)
}

/*
DeleteShowcaseLogo Delete a custom showcase logo

This method deletes the specified custom logo from its showcase. The authenticated user must be the owner of the showcase.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param albumId The ID of the showcase.
 @param logoId The ID of the custom logo.
 @param userId The ID of the user.
 @return ApiDeleteShowcaseLogoRequest
*/
func (a *ShowcasesCustomShowcaseLogosAPIService) DeleteShowcaseLogo(ctx context.Context, albumId float32, logoId float32, userId float32) ApiDeleteShowcaseLogoRequest {
	return ApiDeleteShowcaseLogoRequest{
		ApiService: a,
		ctx: ctx,
		albumId: albumId,
		logoId: logoId,
		userId: userId,
	}
}

// Execute executes the request
func (a *ShowcasesCustomShowcaseLogosAPIService) DeleteShowcaseLogoExecute(r ApiDeleteShowcaseLogoRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShowcasesCustomShowcaseLogosAPIService.DeleteShowcaseLogo")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/albums/{album_id}/logos/{logo_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"album_id"+"}", url.PathEscape(parameterValueToString(r.albumId, "albumId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"logo_id"+"}", url.PathEscape(parameterValueToString(r.logoId, "logoId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.picture+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetShowcaseLogoRequest struct {
	ctx context.Context
	ApiService ShowcasesCustomShowcaseLogosAPI
	albumId float32
	logoId float32
	userId float32
}

func (r ApiGetShowcaseLogoRequest) Execute() (*Picture, *http.Response, error) {
	return r.ApiService.GetShowcaseLogoExecute(r)
}

/*
GetShowcaseLogo Get a specific custom showcase logo

This method returns a single custom logo of the specified showcase. The authenticated user must be the owner of the showcase.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param albumId The ID of the showcase.
 @param logoId The ID of the custom logo.
 @param userId The ID of the user.
 @return ApiGetShowcaseLogoRequest
*/
func (a *ShowcasesCustomShowcaseLogosAPIService) GetShowcaseLogo(ctx context.Context, albumId float32, logoId float32, userId float32) ApiGetShowcaseLogoRequest {
	return ApiGetShowcaseLogoRequest{
		ApiService: a,
		ctx: ctx,
		albumId: albumId,
		logoId: logoId,
		userId: userId,
	}
}

// Execute executes the request
//  @return Picture
func (a *ShowcasesCustomShowcaseLogosAPIService) GetShowcaseLogoExecute(r ApiGetShowcaseLogoRequest) (*Picture, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Picture
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShowcasesCustomShowcaseLogosAPIService.GetShowcaseLogo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/albums/{album_id}/logos/{logo_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"album_id"+"}", url.PathEscape(parameterValueToString(r.albumId, "albumId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"logo_id"+"}", url.PathEscape(parameterValueToString(r.logoId, "logoId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.picture+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetShowcaseLogosRequest struct {
	ctx context.Context
	ApiService ShowcasesCustomShowcaseLogosAPI
	albumId float32
	userId float32
	page *float32
	perPage *float32
}

// The page number of the results to show.
func (r ApiGetShowcaseLogosRequest) Page(page float32) ApiGetShowcaseLogosRequest {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiGetShowcaseLogosRequest) PerPage(perPage float32) ApiGetShowcaseLogosRequest {
	r.perPage = &perPage
	return r
}

func (r ApiGetShowcaseLogosRequest) Execute() ([]Picture, *http.Response, error) {
	return r.ApiService.GetShowcaseLogosExecute(r)
}

/*
GetShowcaseLogos Get all the custom logos of a showcase

This method returns every custom logo of the specified showcase. The authenticated user must be the owner of the showcase.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param albumId The ID of the showcase.
 @param userId The ID of the user.
 @return ApiGetShowcaseLogosRequest
*/
func (a *ShowcasesCustomShowcaseLogosAPIService) GetShowcaseLogos(ctx context.Context, albumId float32, userId float32) ApiGetShowcaseLogosRequest {
	return ApiGetShowcaseLogosRequest{
		ApiService: a,
		ctx: ctx,
		albumId: albumId,
		userId: userId,
	}
}

// Execute executes the request
//  @return []Picture
func (a *ShowcasesCustomShowcaseLogosAPIService) GetShowcaseLogosExecute(r ApiGetShowcaseLogosRequest) ([]Picture, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Picture
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShowcasesCustomShowcaseLogosAPIService.GetShowcaseLogos")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/albums/{album_id}/logos"
	localVarPath = strings.Replace(localVarPath, "{"+"album_id"+"}", url.PathEscape(parameterValueToString(r.albumId, "albumId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.picture+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReplaceShowcaseLogoRequest struct {
	ctx context.Context
	ApiService ShowcasesCustomShowcaseLogosAPI
	albumId float32
	logoId float32
	userId float32
	replaceShowcaseLogoRequest *ReplaceShowcaseLogoRequest
}

func (r ApiReplaceShowcaseLogoRequest) ReplaceShowcaseLogoRequest(replaceShowcaseLogoRequest ReplaceShowcaseLogoRequest) ApiReplaceShowcaseLogoRequest {
	r.replaceShowcaseLogoRequest = &replaceShowcaseLogoRequest
	return r
}

func (r ApiReplaceShowcaseLogoRequest) Execute() (*Picture, *http.Response, error) {
	return r.ApiService.ReplaceShowcaseLogoExecute(r)
}

/*
ReplaceShowcaseLogo Replace a custom showcase logo

This method replaces the specified custom showcase logo with a new image file. The authenticated user must be the owner of the showcase.

For information on how to upload the logo, see our [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails) guide.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param albumId The ID of the showcase.
 @param logoId The ID of the custom logo.
 @param userId The ID of the user.
 @return ApiReplaceShowcaseLogoRequest
*/
func (a *ShowcasesCustomShowcaseLogosAPIService) ReplaceShowcaseLogo(ctx context.Context, albumId float32, logoId float32, userId float32) ApiReplaceShowcaseLogoRequest {
	return ApiReplaceShowcaseLogoRequest{
		ApiService: a,
		ctx: ctx,
		albumId: albumId,
		logoId: logoId,
		userId: userId,
	}
}

// Execute executes the request
//  @return Picture
func (a *ShowcasesCustomShowcaseLogosAPIService) ReplaceShowcaseLogoExecute(r ApiReplaceShowcaseLogoRequest) (*Picture, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Picture
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShowcasesCustomShowcaseLogosAPIService.ReplaceShowcaseLogo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/albums/{album_id}/logos/{logo_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"album_id"+"}", url.PathEscape(parameterValueToString(r.albumId, "albumId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"logo_id"+"}", url.PathEscape(parameterValueToString(r.logoId, "logoId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.vimeo.picture+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.picture+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.replaceShowcaseLogoRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
