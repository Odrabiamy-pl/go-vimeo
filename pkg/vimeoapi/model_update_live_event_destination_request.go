/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the UpdateLiveEventDestinationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateLiveEventDestinationRequest{}

// UpdateLiveEventDestinationRequest struct for UpdateLiveEventDestinationRequest
type UpdateLiveEventDestinationRequest struct {
	// The title to display for the simulcast.
	DisplayName *string `json:"display_name,omitempty"`
	// Whether the destination is enabled for simulcasting.
	IsEnabled *bool `json:"is_enabled,omitempty"`
	// The privacy setting of the destination. Be sure to choose a value that corresponds to your service.  Option descriptions:  * `CONNECTIONS` - The privacy setting is `CONNECTIONS` for LinkedIn.  * `PUBLIC` - The privacy setting is `PUBLIC` for LinkedIn.  * `all_friends` - The privacy setting is `all_friends` for Facebook.  * `everyone` - The privacy setting is `everyone` for Facebook.  * `private` - The privacy setting is `private` for YouTube.  * `public` - The privacy setting is `public` for YouTube.  * `self` - The privacy setting is `self` for Facebook.  * `unlisted` - The privacy setting is `unlisted` for YouTube. 
	Privacy *string `json:"privacy,omitempty"`
	// The ID of the destination on the specified service, such as the YouTube channel ID or the Facebook page ID.
	ProviderDestinationId *string `json:"provider_destination_id,omitempty"`
	// The service to simulcast to.  Option descriptions:  * `custom_rtmp` - Simulcast to a custom service.  * `facebook` - Simulcast to Facebook Live.  * `linkedin` - Simulcast to LinkedIn Live.  * `youtube` - Simulcast to YouTube Live. 
	ServiceName *string `json:"service_name,omitempty"`
	// The RTMP stream key.
	StreamKey *string `json:"stream_key,omitempty"`
	// The RTMP URL for receiving the video stream.
	StreamUrl *string `json:"stream_url,omitempty"`
	// The type of the simulcast destination.  Option descriptions:  * `channel` - The destination is a YouTube channel.  * `custom` - The destination is custom.  * `organization` - The destination is a LinkedIn organization.  * `page` - The destination is a Facebook page.  * `profile` - The destination is a Facebook or LinkedIn profile. 
	Type *string `json:"type,omitempty"`
}

// NewUpdateLiveEventDestinationRequest instantiates a new UpdateLiveEventDestinationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateLiveEventDestinationRequest() *UpdateLiveEventDestinationRequest {
	this := UpdateLiveEventDestinationRequest{}
	return &this
}

// NewUpdateLiveEventDestinationRequestWithDefaults instantiates a new UpdateLiveEventDestinationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateLiveEventDestinationRequestWithDefaults() *UpdateLiveEventDestinationRequest {
	this := UpdateLiveEventDestinationRequest{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *UpdateLiveEventDestinationRequest) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLiveEventDestinationRequest) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *UpdateLiveEventDestinationRequest) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *UpdateLiveEventDestinationRequest) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise.
func (o *UpdateLiveEventDestinationRequest) GetIsEnabled() bool {
	if o == nil || IsNil(o.IsEnabled) {
		var ret bool
		return ret
	}
	return *o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLiveEventDestinationRequest) GetIsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEnabled) {
		return nil, false
	}
	return o.IsEnabled, true
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *UpdateLiveEventDestinationRequest) HasIsEnabled() bool {
	if o != nil && !IsNil(o.IsEnabled) {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given bool and assigns it to the IsEnabled field.
func (o *UpdateLiveEventDestinationRequest) SetIsEnabled(v bool) {
	o.IsEnabled = &v
}

// GetPrivacy returns the Privacy field value if set, zero value otherwise.
func (o *UpdateLiveEventDestinationRequest) GetPrivacy() string {
	if o == nil || IsNil(o.Privacy) {
		var ret string
		return ret
	}
	return *o.Privacy
}

// GetPrivacyOk returns a tuple with the Privacy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLiveEventDestinationRequest) GetPrivacyOk() (*string, bool) {
	if o == nil || IsNil(o.Privacy) {
		return nil, false
	}
	return o.Privacy, true
}

// HasPrivacy returns a boolean if a field has been set.
func (o *UpdateLiveEventDestinationRequest) HasPrivacy() bool {
	if o != nil && !IsNil(o.Privacy) {
		return true
	}

	return false
}

// SetPrivacy gets a reference to the given string and assigns it to the Privacy field.
func (o *UpdateLiveEventDestinationRequest) SetPrivacy(v string) {
	o.Privacy = &v
}

// GetProviderDestinationId returns the ProviderDestinationId field value if set, zero value otherwise.
func (o *UpdateLiveEventDestinationRequest) GetProviderDestinationId() string {
	if o == nil || IsNil(o.ProviderDestinationId) {
		var ret string
		return ret
	}
	return *o.ProviderDestinationId
}

// GetProviderDestinationIdOk returns a tuple with the ProviderDestinationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLiveEventDestinationRequest) GetProviderDestinationIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProviderDestinationId) {
		return nil, false
	}
	return o.ProviderDestinationId, true
}

// HasProviderDestinationId returns a boolean if a field has been set.
func (o *UpdateLiveEventDestinationRequest) HasProviderDestinationId() bool {
	if o != nil && !IsNil(o.ProviderDestinationId) {
		return true
	}

	return false
}

// SetProviderDestinationId gets a reference to the given string and assigns it to the ProviderDestinationId field.
func (o *UpdateLiveEventDestinationRequest) SetProviderDestinationId(v string) {
	o.ProviderDestinationId = &v
}

// GetServiceName returns the ServiceName field value if set, zero value otherwise.
func (o *UpdateLiveEventDestinationRequest) GetServiceName() string {
	if o == nil || IsNil(o.ServiceName) {
		var ret string
		return ret
	}
	return *o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLiveEventDestinationRequest) GetServiceNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceName) {
		return nil, false
	}
	return o.ServiceName, true
}

// HasServiceName returns a boolean if a field has been set.
func (o *UpdateLiveEventDestinationRequest) HasServiceName() bool {
	if o != nil && !IsNil(o.ServiceName) {
		return true
	}

	return false
}

// SetServiceName gets a reference to the given string and assigns it to the ServiceName field.
func (o *UpdateLiveEventDestinationRequest) SetServiceName(v string) {
	o.ServiceName = &v
}

// GetStreamKey returns the StreamKey field value if set, zero value otherwise.
func (o *UpdateLiveEventDestinationRequest) GetStreamKey() string {
	if o == nil || IsNil(o.StreamKey) {
		var ret string
		return ret
	}
	return *o.StreamKey
}

// GetStreamKeyOk returns a tuple with the StreamKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLiveEventDestinationRequest) GetStreamKeyOk() (*string, bool) {
	if o == nil || IsNil(o.StreamKey) {
		return nil, false
	}
	return o.StreamKey, true
}

// HasStreamKey returns a boolean if a field has been set.
func (o *UpdateLiveEventDestinationRequest) HasStreamKey() bool {
	if o != nil && !IsNil(o.StreamKey) {
		return true
	}

	return false
}

// SetStreamKey gets a reference to the given string and assigns it to the StreamKey field.
func (o *UpdateLiveEventDestinationRequest) SetStreamKey(v string) {
	o.StreamKey = &v
}

// GetStreamUrl returns the StreamUrl field value if set, zero value otherwise.
func (o *UpdateLiveEventDestinationRequest) GetStreamUrl() string {
	if o == nil || IsNil(o.StreamUrl) {
		var ret string
		return ret
	}
	return *o.StreamUrl
}

// GetStreamUrlOk returns a tuple with the StreamUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLiveEventDestinationRequest) GetStreamUrlOk() (*string, bool) {
	if o == nil || IsNil(o.StreamUrl) {
		return nil, false
	}
	return o.StreamUrl, true
}

// HasStreamUrl returns a boolean if a field has been set.
func (o *UpdateLiveEventDestinationRequest) HasStreamUrl() bool {
	if o != nil && !IsNil(o.StreamUrl) {
		return true
	}

	return false
}

// SetStreamUrl gets a reference to the given string and assigns it to the StreamUrl field.
func (o *UpdateLiveEventDestinationRequest) SetStreamUrl(v string) {
	o.StreamUrl = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UpdateLiveEventDestinationRequest) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLiveEventDestinationRequest) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UpdateLiveEventDestinationRequest) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UpdateLiveEventDestinationRequest) SetType(v string) {
	o.Type = &v
}

func (o UpdateLiveEventDestinationRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateLiveEventDestinationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisplayName) {
		toSerialize["display_name"] = o.DisplayName
	}
	if !IsNil(o.IsEnabled) {
		toSerialize["is_enabled"] = o.IsEnabled
	}
	if !IsNil(o.Privacy) {
		toSerialize["privacy"] = o.Privacy
	}
	if !IsNil(o.ProviderDestinationId) {
		toSerialize["provider_destination_id"] = o.ProviderDestinationId
	}
	if !IsNil(o.ServiceName) {
		toSerialize["service_name"] = o.ServiceName
	}
	if !IsNil(o.StreamKey) {
		toSerialize["stream_key"] = o.StreamKey
	}
	if !IsNil(o.StreamUrl) {
		toSerialize["stream_url"] = o.StreamUrl
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableUpdateLiveEventDestinationRequest struct {
	value *UpdateLiveEventDestinationRequest
	isSet bool
}

func (v NullableUpdateLiveEventDestinationRequest) Get() *UpdateLiveEventDestinationRequest {
	return v.value
}

func (v *NullableUpdateLiveEventDestinationRequest) Set(val *UpdateLiveEventDestinationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateLiveEventDestinationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateLiveEventDestinationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateLiveEventDestinationRequest(val *UpdateLiveEventDestinationRequest) *NullableUpdateLiveEventDestinationRequest {
	return &NullableUpdateLiveEventDestinationRequest{value: val, isSet: true}
}

func (v NullableUpdateLiveEventDestinationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateLiveEventDestinationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


