/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the EditVideoRequestEmbed type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EditVideoRequestEmbed{}

// EditVideoRequestEmbed struct for EditVideoRequestEmbed
type EditVideoRequestEmbed struct {
	// Whether AirPlay is enabled in the embeddable player.
	Airplay *bool `json:"airplay,omitempty"`
	// Whether multiple audio tracks can appear in the embeddable player.
	AudioTracks *bool                                      `json:"audio_tracks,omitempty"`
	Buttons     *CreateEmbedPresetsAlt1RequestEmbedButtons `json:"buttons,omitempty"`
	// A collection of cards associated with the selected video.
	Cards []EditVideoRequestEmbedCardsInner `json:"cards,omitempty"`
	// Whether chapters are enabled in the embeddable player.
	Chapters *bool `json:"chapters,omitempty"`
	// Whether the Chromecast button appears in the embeddable player.
	Chromecast *bool `json:"chromecast,omitempty"`
	// Whether closed captions are enabled in the embeddable player.
	ClosedCaptions *bool `json:"closed_captions,omitempty"`
	// The main color of the embeddable player.
	Color      *string                                       `json:"color,omitempty"`
	EndScreen  *UploadVideoAlt1RequestEmbedEndScreen         `json:"end_screen,omitempty"`
	Logos      *EditVideoRequestEmbedLogos                   `json:"logos,omitempty"`
	PlayButton *CreateEmbedPresetsAlt1RequestEmbedPlayButton `json:"play_button,omitempty"`
	// Whether to show the playbar on the embeddable player.
	Playbar *bool `json:"playbar,omitempty"`
	// Whether to show the quality selector in the embeddable player.
	QualitySelector *bool                                    `json:"quality_selector,omitempty"`
	Title           *CreateEmbedPresetsAlt1RequestEmbedTitle `json:"title,omitempty"`
	// Whether the transcript controls appear in the embeddable player.
	Transcript *bool `json:"transcript,omitempty"`
	// Whether to show the volume selector on the embeddable player.
	Volume *bool `json:"volume,omitempty"`
}

// NewEditVideoRequestEmbed instantiates a new EditVideoRequestEmbed object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditVideoRequestEmbed() *EditVideoRequestEmbed {
	this := EditVideoRequestEmbed{}
	return &this
}

// NewEditVideoRequestEmbedWithDefaults instantiates a new EditVideoRequestEmbed object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditVideoRequestEmbedWithDefaults() *EditVideoRequestEmbed {
	this := EditVideoRequestEmbed{}
	return &this
}

// GetAirplay returns the Airplay field value if set, zero value otherwise.
func (o *EditVideoRequestEmbed) GetAirplay() bool {
	if o == nil || IsNil(o.Airplay) {
		var ret bool
		return ret
	}
	return *o.Airplay
}

// GetAirplayOk returns a tuple with the Airplay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditVideoRequestEmbed) GetAirplayOk() (*bool, bool) {
	if o == nil || IsNil(o.Airplay) {
		return nil, false
	}
	return o.Airplay, true
}

// HasAirplay returns a boolean if a field has been set.
func (o *EditVideoRequestEmbed) HasAirplay() bool {
	if o != nil && !IsNil(o.Airplay) {
		return true
	}

	return false
}

// SetAirplay gets a reference to the given bool and assigns it to the Airplay field.
func (o *EditVideoRequestEmbed) SetAirplay(v bool) {
	o.Airplay = &v
}

// GetAudioTracks returns the AudioTracks field value if set, zero value otherwise.
func (o *EditVideoRequestEmbed) GetAudioTracks() bool {
	if o == nil || IsNil(o.AudioTracks) {
		var ret bool
		return ret
	}
	return *o.AudioTracks
}

// GetAudioTracksOk returns a tuple with the AudioTracks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditVideoRequestEmbed) GetAudioTracksOk() (*bool, bool) {
	if o == nil || IsNil(o.AudioTracks) {
		return nil, false
	}
	return o.AudioTracks, true
}

// HasAudioTracks returns a boolean if a field has been set.
func (o *EditVideoRequestEmbed) HasAudioTracks() bool {
	if o != nil && !IsNil(o.AudioTracks) {
		return true
	}

	return false
}

// SetAudioTracks gets a reference to the given bool and assigns it to the AudioTracks field.
func (o *EditVideoRequestEmbed) SetAudioTracks(v bool) {
	o.AudioTracks = &v
}

// GetButtons returns the Buttons field value if set, zero value otherwise.
func (o *EditVideoRequestEmbed) GetButtons() CreateEmbedPresetsAlt1RequestEmbedButtons {
	if o == nil || IsNil(o.Buttons) {
		var ret CreateEmbedPresetsAlt1RequestEmbedButtons
		return ret
	}
	return *o.Buttons
}

// GetButtonsOk returns a tuple with the Buttons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditVideoRequestEmbed) GetButtonsOk() (*CreateEmbedPresetsAlt1RequestEmbedButtons, bool) {
	if o == nil || IsNil(o.Buttons) {
		return nil, false
	}
	return o.Buttons, true
}

// HasButtons returns a boolean if a field has been set.
func (o *EditVideoRequestEmbed) HasButtons() bool {
	if o != nil && !IsNil(o.Buttons) {
		return true
	}

	return false
}

// SetButtons gets a reference to the given CreateEmbedPresetsAlt1RequestEmbedButtons and assigns it to the Buttons field.
func (o *EditVideoRequestEmbed) SetButtons(v CreateEmbedPresetsAlt1RequestEmbedButtons) {
	o.Buttons = &v
}

// GetCards returns the Cards field value if set, zero value otherwise.
func (o *EditVideoRequestEmbed) GetCards() []EditVideoRequestEmbedCardsInner {
	if o == nil || IsNil(o.Cards) {
		var ret []EditVideoRequestEmbedCardsInner
		return ret
	}
	return o.Cards
}

// GetCardsOk returns a tuple with the Cards field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditVideoRequestEmbed) GetCardsOk() ([]EditVideoRequestEmbedCardsInner, bool) {
	if o == nil || IsNil(o.Cards) {
		return nil, false
	}
	return o.Cards, true
}

// HasCards returns a boolean if a field has been set.
func (o *EditVideoRequestEmbed) HasCards() bool {
	if o != nil && !IsNil(o.Cards) {
		return true
	}

	return false
}

// SetCards gets a reference to the given []EditVideoRequestEmbedCardsInner and assigns it to the Cards field.
func (o *EditVideoRequestEmbed) SetCards(v []EditVideoRequestEmbedCardsInner) {
	o.Cards = v
}

// GetChapters returns the Chapters field value if set, zero value otherwise.
func (o *EditVideoRequestEmbed) GetChapters() bool {
	if o == nil || IsNil(o.Chapters) {
		var ret bool
		return ret
	}
	return *o.Chapters
}

// GetChaptersOk returns a tuple with the Chapters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditVideoRequestEmbed) GetChaptersOk() (*bool, bool) {
	if o == nil || IsNil(o.Chapters) {
		return nil, false
	}
	return o.Chapters, true
}

// HasChapters returns a boolean if a field has been set.
func (o *EditVideoRequestEmbed) HasChapters() bool {
	if o != nil && !IsNil(o.Chapters) {
		return true
	}

	return false
}

// SetChapters gets a reference to the given bool and assigns it to the Chapters field.
func (o *EditVideoRequestEmbed) SetChapters(v bool) {
	o.Chapters = &v
}

// GetChromecast returns the Chromecast field value if set, zero value otherwise.
func (o *EditVideoRequestEmbed) GetChromecast() bool {
	if o == nil || IsNil(o.Chromecast) {
		var ret bool
		return ret
	}
	return *o.Chromecast
}

// GetChromecastOk returns a tuple with the Chromecast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditVideoRequestEmbed) GetChromecastOk() (*bool, bool) {
	if o == nil || IsNil(o.Chromecast) {
		return nil, false
	}
	return o.Chromecast, true
}

// HasChromecast returns a boolean if a field has been set.
func (o *EditVideoRequestEmbed) HasChromecast() bool {
	if o != nil && !IsNil(o.Chromecast) {
		return true
	}

	return false
}

// SetChromecast gets a reference to the given bool and assigns it to the Chromecast field.
func (o *EditVideoRequestEmbed) SetChromecast(v bool) {
	o.Chromecast = &v
}

// GetClosedCaptions returns the ClosedCaptions field value if set, zero value otherwise.
func (o *EditVideoRequestEmbed) GetClosedCaptions() bool {
	if o == nil || IsNil(o.ClosedCaptions) {
		var ret bool
		return ret
	}
	return *o.ClosedCaptions
}

// GetClosedCaptionsOk returns a tuple with the ClosedCaptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditVideoRequestEmbed) GetClosedCaptionsOk() (*bool, bool) {
	if o == nil || IsNil(o.ClosedCaptions) {
		return nil, false
	}
	return o.ClosedCaptions, true
}

// HasClosedCaptions returns a boolean if a field has been set.
func (o *EditVideoRequestEmbed) HasClosedCaptions() bool {
	if o != nil && !IsNil(o.ClosedCaptions) {
		return true
	}

	return false
}

// SetClosedCaptions gets a reference to the given bool and assigns it to the ClosedCaptions field.
func (o *EditVideoRequestEmbed) SetClosedCaptions(v bool) {
	o.ClosedCaptions = &v
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *EditVideoRequestEmbed) GetColor() string {
	if o == nil || IsNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditVideoRequestEmbed) GetColorOk() (*string, bool) {
	if o == nil || IsNil(o.Color) {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *EditVideoRequestEmbed) HasColor() bool {
	if o != nil && !IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *EditVideoRequestEmbed) SetColor(v string) {
	o.Color = &v
}

// GetEndScreen returns the EndScreen field value if set, zero value otherwise.
func (o *EditVideoRequestEmbed) GetEndScreen() UploadVideoAlt1RequestEmbedEndScreen {
	if o == nil || IsNil(o.EndScreen) {
		var ret UploadVideoAlt1RequestEmbedEndScreen
		return ret
	}
	return *o.EndScreen
}

// GetEndScreenOk returns a tuple with the EndScreen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditVideoRequestEmbed) GetEndScreenOk() (*UploadVideoAlt1RequestEmbedEndScreen, bool) {
	if o == nil || IsNil(o.EndScreen) {
		return nil, false
	}
	return o.EndScreen, true
}

// HasEndScreen returns a boolean if a field has been set.
func (o *EditVideoRequestEmbed) HasEndScreen() bool {
	if o != nil && !IsNil(o.EndScreen) {
		return true
	}

	return false
}

// SetEndScreen gets a reference to the given UploadVideoAlt1RequestEmbedEndScreen and assigns it to the EndScreen field.
func (o *EditVideoRequestEmbed) SetEndScreen(v UploadVideoAlt1RequestEmbedEndScreen) {
	o.EndScreen = &v
}

// GetLogos returns the Logos field value if set, zero value otherwise.
func (o *EditVideoRequestEmbed) GetLogos() EditVideoRequestEmbedLogos {
	if o == nil || IsNil(o.Logos) {
		var ret EditVideoRequestEmbedLogos
		return ret
	}
	return *o.Logos
}

// GetLogosOk returns a tuple with the Logos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditVideoRequestEmbed) GetLogosOk() (*EditVideoRequestEmbedLogos, bool) {
	if o == nil || IsNil(o.Logos) {
		return nil, false
	}
	return o.Logos, true
}

// HasLogos returns a boolean if a field has been set.
func (o *EditVideoRequestEmbed) HasLogos() bool {
	if o != nil && !IsNil(o.Logos) {
		return true
	}

	return false
}

// SetLogos gets a reference to the given EditVideoRequestEmbedLogos and assigns it to the Logos field.
func (o *EditVideoRequestEmbed) SetLogos(v EditVideoRequestEmbedLogos) {
	o.Logos = &v
}

// GetPlayButton returns the PlayButton field value if set, zero value otherwise.
func (o *EditVideoRequestEmbed) GetPlayButton() CreateEmbedPresetsAlt1RequestEmbedPlayButton {
	if o == nil || IsNil(o.PlayButton) {
		var ret CreateEmbedPresetsAlt1RequestEmbedPlayButton
		return ret
	}
	return *o.PlayButton
}

// GetPlayButtonOk returns a tuple with the PlayButton field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditVideoRequestEmbed) GetPlayButtonOk() (*CreateEmbedPresetsAlt1RequestEmbedPlayButton, bool) {
	if o == nil || IsNil(o.PlayButton) {
		return nil, false
	}
	return o.PlayButton, true
}

// HasPlayButton returns a boolean if a field has been set.
func (o *EditVideoRequestEmbed) HasPlayButton() bool {
	if o != nil && !IsNil(o.PlayButton) {
		return true
	}

	return false
}

// SetPlayButton gets a reference to the given CreateEmbedPresetsAlt1RequestEmbedPlayButton and assigns it to the PlayButton field.
func (o *EditVideoRequestEmbed) SetPlayButton(v CreateEmbedPresetsAlt1RequestEmbedPlayButton) {
	o.PlayButton = &v
}

// GetPlaybar returns the Playbar field value if set, zero value otherwise.
func (o *EditVideoRequestEmbed) GetPlaybar() bool {
	if o == nil || IsNil(o.Playbar) {
		var ret bool
		return ret
	}
	return *o.Playbar
}

// GetPlaybarOk returns a tuple with the Playbar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditVideoRequestEmbed) GetPlaybarOk() (*bool, bool) {
	if o == nil || IsNil(o.Playbar) {
		return nil, false
	}
	return o.Playbar, true
}

// HasPlaybar returns a boolean if a field has been set.
func (o *EditVideoRequestEmbed) HasPlaybar() bool {
	if o != nil && !IsNil(o.Playbar) {
		return true
	}

	return false
}

// SetPlaybar gets a reference to the given bool and assigns it to the Playbar field.
func (o *EditVideoRequestEmbed) SetPlaybar(v bool) {
	o.Playbar = &v
}

// GetQualitySelector returns the QualitySelector field value if set, zero value otherwise.
func (o *EditVideoRequestEmbed) GetQualitySelector() bool {
	if o == nil || IsNil(o.QualitySelector) {
		var ret bool
		return ret
	}
	return *o.QualitySelector
}

// GetQualitySelectorOk returns a tuple with the QualitySelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditVideoRequestEmbed) GetQualitySelectorOk() (*bool, bool) {
	if o == nil || IsNil(o.QualitySelector) {
		return nil, false
	}
	return o.QualitySelector, true
}

// HasQualitySelector returns a boolean if a field has been set.
func (o *EditVideoRequestEmbed) HasQualitySelector() bool {
	if o != nil && !IsNil(o.QualitySelector) {
		return true
	}

	return false
}

// SetQualitySelector gets a reference to the given bool and assigns it to the QualitySelector field.
func (o *EditVideoRequestEmbed) SetQualitySelector(v bool) {
	o.QualitySelector = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *EditVideoRequestEmbed) GetTitle() CreateEmbedPresetsAlt1RequestEmbedTitle {
	if o == nil || IsNil(o.Title) {
		var ret CreateEmbedPresetsAlt1RequestEmbedTitle
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditVideoRequestEmbed) GetTitleOk() (*CreateEmbedPresetsAlt1RequestEmbedTitle, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *EditVideoRequestEmbed) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given CreateEmbedPresetsAlt1RequestEmbedTitle and assigns it to the Title field.
func (o *EditVideoRequestEmbed) SetTitle(v CreateEmbedPresetsAlt1RequestEmbedTitle) {
	o.Title = &v
}

// GetTranscript returns the Transcript field value if set, zero value otherwise.
func (o *EditVideoRequestEmbed) GetTranscript() bool {
	if o == nil || IsNil(o.Transcript) {
		var ret bool
		return ret
	}
	return *o.Transcript
}

// GetTranscriptOk returns a tuple with the Transcript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditVideoRequestEmbed) GetTranscriptOk() (*bool, bool) {
	if o == nil || IsNil(o.Transcript) {
		return nil, false
	}
	return o.Transcript, true
}

// HasTranscript returns a boolean if a field has been set.
func (o *EditVideoRequestEmbed) HasTranscript() bool {
	if o != nil && !IsNil(o.Transcript) {
		return true
	}

	return false
}

// SetTranscript gets a reference to the given bool and assigns it to the Transcript field.
func (o *EditVideoRequestEmbed) SetTranscript(v bool) {
	o.Transcript = &v
}

// GetVolume returns the Volume field value if set, zero value otherwise.
func (o *EditVideoRequestEmbed) GetVolume() bool {
	if o == nil || IsNil(o.Volume) {
		var ret bool
		return ret
	}
	return *o.Volume
}

// GetVolumeOk returns a tuple with the Volume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditVideoRequestEmbed) GetVolumeOk() (*bool, bool) {
	if o == nil || IsNil(o.Volume) {
		return nil, false
	}
	return o.Volume, true
}

// HasVolume returns a boolean if a field has been set.
func (o *EditVideoRequestEmbed) HasVolume() bool {
	if o != nil && !IsNil(o.Volume) {
		return true
	}

	return false
}

// SetVolume gets a reference to the given bool and assigns it to the Volume field.
func (o *EditVideoRequestEmbed) SetVolume(v bool) {
	o.Volume = &v
}

func (o EditVideoRequestEmbed) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EditVideoRequestEmbed) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Airplay) {
		toSerialize["airplay"] = o.Airplay
	}
	if !IsNil(o.AudioTracks) {
		toSerialize["audio_tracks"] = o.AudioTracks
	}
	if !IsNil(o.Buttons) {
		toSerialize["buttons"] = o.Buttons
	}
	if !IsNil(o.Cards) {
		toSerialize["cards"] = o.Cards
	}
	if !IsNil(o.Chapters) {
		toSerialize["chapters"] = o.Chapters
	}
	if !IsNil(o.Chromecast) {
		toSerialize["chromecast"] = o.Chromecast
	}
	if !IsNil(o.ClosedCaptions) {
		toSerialize["closed_captions"] = o.ClosedCaptions
	}
	if !IsNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	if !IsNil(o.EndScreen) {
		toSerialize["end_screen"] = o.EndScreen
	}
	if !IsNil(o.Logos) {
		toSerialize["logos"] = o.Logos
	}
	if !IsNil(o.PlayButton) {
		toSerialize["play_button"] = o.PlayButton
	}
	if !IsNil(o.Playbar) {
		toSerialize["playbar"] = o.Playbar
	}
	if !IsNil(o.QualitySelector) {
		toSerialize["quality_selector"] = o.QualitySelector
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Transcript) {
		toSerialize["transcript"] = o.Transcript
	}
	if !IsNil(o.Volume) {
		toSerialize["volume"] = o.Volume
	}
	return toSerialize, nil
}

type NullableEditVideoRequestEmbed struct {
	value *EditVideoRequestEmbed
	isSet bool
}

func (v NullableEditVideoRequestEmbed) Get() *EditVideoRequestEmbed {
	return v.value
}

func (v *NullableEditVideoRequestEmbed) Set(val *EditVideoRequestEmbed) {
	v.value = val
	v.isSet = true
}

func (v NullableEditVideoRequestEmbed) IsSet() bool {
	return v.isSet
}

func (v *NullableEditVideoRequestEmbed) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditVideoRequestEmbed(val *EditVideoRequestEmbed) *NullableEditVideoRequestEmbed {
	return &NullableEditVideoRequestEmbed{value: val, isSet: true}
}

func (v NullableEditVideoRequestEmbed) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditVideoRequestEmbed) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
