/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the VideoFileLog type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VideoFileLog{}

// VideoFileLog struct for VideoFileLog
type VideoFileLog struct {
	// The URL to record a Play logging event.
	Play *string `json:"play,omitempty"`
}

// NewVideoFileLog instantiates a new VideoFileLog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVideoFileLog() *VideoFileLog {
	this := VideoFileLog{}
	return &this
}

// NewVideoFileLogWithDefaults instantiates a new VideoFileLog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVideoFileLogWithDefaults() *VideoFileLog {
	this := VideoFileLog{}
	return &this
}

// GetPlay returns the Play field value if set, zero value otherwise.
func (o *VideoFileLog) GetPlay() string {
	if o == nil || IsNil(o.Play) {
		var ret string
		return ret
	}
	return *o.Play
}

// GetPlayOk returns a tuple with the Play field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VideoFileLog) GetPlayOk() (*string, bool) {
	if o == nil || IsNil(o.Play) {
		return nil, false
	}
	return o.Play, true
}

// HasPlay returns a boolean if a field has been set.
func (o *VideoFileLog) HasPlay() bool {
	if o != nil && !IsNil(o.Play) {
		return true
	}

	return false
}

// SetPlay gets a reference to the given string and assigns it to the Play field.
func (o *VideoFileLog) SetPlay(v string) {
	o.Play = &v
}

func (o VideoFileLog) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VideoFileLog) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Play) {
		toSerialize["play"] = o.Play
	}
	return toSerialize, nil
}

type NullableVideoFileLog struct {
	value *VideoFileLog
	isSet bool
}

func (v NullableVideoFileLog) Get() *VideoFileLog {
	return v.value
}

func (v *NullableVideoFileLog) Set(val *VideoFileLog) {
	v.value = val
	v.isSet = true
}

func (v NullableVideoFileLog) IsSet() bool {
	return v.isSet
}

func (v *NullableVideoFileLog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVideoFileLog(val *VideoFileLog) *NullableVideoFileLog {
	return &NullableVideoFileLog{value: val, isSet: true}
}

func (v NullableVideoFileLog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVideoFileLog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


