/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the VersionTranscodeStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VersionTranscodeStatus{}

// VersionTranscodeStatus struct for VersionTranscodeStatus
type VersionTranscodeStatus struct {
	// Whether the video has finished transcoding.
	IsComplete bool `json:"is_complete"`
	// Whether the video is playable in all resolutions, up to either the source quality or 4K, whichever is lower, at standard definition.
	IsFullyPlayable bool `json:"is_fully_playable"`
	// Whether the video is playable.
	IsPlayable bool `json:"is_playable"`
}

// NewVersionTranscodeStatus instantiates a new VersionTranscodeStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionTranscodeStatus(isComplete bool, isFullyPlayable bool, isPlayable bool) *VersionTranscodeStatus {
	this := VersionTranscodeStatus{}
	this.IsComplete = isComplete
	this.IsFullyPlayable = isFullyPlayable
	this.IsPlayable = isPlayable
	return &this
}

// NewVersionTranscodeStatusWithDefaults instantiates a new VersionTranscodeStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionTranscodeStatusWithDefaults() *VersionTranscodeStatus {
	this := VersionTranscodeStatus{}
	return &this
}

// GetIsComplete returns the IsComplete field value
func (o *VersionTranscodeStatus) GetIsComplete() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsComplete
}

// GetIsCompleteOk returns a tuple with the IsComplete field value
// and a boolean to check if the value has been set.
func (o *VersionTranscodeStatus) GetIsCompleteOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsComplete, true
}

// SetIsComplete sets field value
func (o *VersionTranscodeStatus) SetIsComplete(v bool) {
	o.IsComplete = v
}

// GetIsFullyPlayable returns the IsFullyPlayable field value
func (o *VersionTranscodeStatus) GetIsFullyPlayable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsFullyPlayable
}

// GetIsFullyPlayableOk returns a tuple with the IsFullyPlayable field value
// and a boolean to check if the value has been set.
func (o *VersionTranscodeStatus) GetIsFullyPlayableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsFullyPlayable, true
}

// SetIsFullyPlayable sets field value
func (o *VersionTranscodeStatus) SetIsFullyPlayable(v bool) {
	o.IsFullyPlayable = v
}

// GetIsPlayable returns the IsPlayable field value
func (o *VersionTranscodeStatus) GetIsPlayable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsPlayable
}

// GetIsPlayableOk returns a tuple with the IsPlayable field value
// and a boolean to check if the value has been set.
func (o *VersionTranscodeStatus) GetIsPlayableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsPlayable, true
}

// SetIsPlayable sets field value
func (o *VersionTranscodeStatus) SetIsPlayable(v bool) {
	o.IsPlayable = v
}

func (o VersionTranscodeStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VersionTranscodeStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["is_complete"] = o.IsComplete
	toSerialize["is_fully_playable"] = o.IsFullyPlayable
	toSerialize["is_playable"] = o.IsPlayable
	return toSerialize, nil
}

type NullableVersionTranscodeStatus struct {
	value *VersionTranscodeStatus
	isSet bool
}

func (v NullableVersionTranscodeStatus) Get() *VersionTranscodeStatus {
	return v.value
}

func (v *NullableVersionTranscodeStatus) Set(val *VersionTranscodeStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionTranscodeStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionTranscodeStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionTranscodeStatus(val *VersionTranscodeStatus) *NullableVersionTranscodeStatus {
	return &NullableVersionTranscodeStatus{value: val, isSet: true}
}

func (v NullableVersionTranscodeStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionTranscodeStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


