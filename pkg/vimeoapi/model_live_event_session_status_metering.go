/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LiveEventSessionStatusMetering type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LiveEventSessionStatusMetering{}

// LiveEventSessionStatusMetering The metering status of the live video.
type LiveEventSessionStatusMetering struct {
	// The maximum number of seconds.
	SecondsMax float32 `json:"seconds_max"`
	// The number of seconds remaining.
	SecondsRemaining float32 `json:"seconds_remaining"`
}

type _LiveEventSessionStatusMetering LiveEventSessionStatusMetering

// NewLiveEventSessionStatusMetering instantiates a new LiveEventSessionStatusMetering object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLiveEventSessionStatusMetering(secondsMax float32, secondsRemaining float32) *LiveEventSessionStatusMetering {
	this := LiveEventSessionStatusMetering{}
	this.SecondsMax = secondsMax
	this.SecondsRemaining = secondsRemaining
	return &this
}

// NewLiveEventSessionStatusMeteringWithDefaults instantiates a new LiveEventSessionStatusMetering object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLiveEventSessionStatusMeteringWithDefaults() *LiveEventSessionStatusMetering {
	this := LiveEventSessionStatusMetering{}
	return &this
}

// GetSecondsMax returns the SecondsMax field value
func (o *LiveEventSessionStatusMetering) GetSecondsMax() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SecondsMax
}

// GetSecondsMaxOk returns a tuple with the SecondsMax field value
// and a boolean to check if the value has been set.
func (o *LiveEventSessionStatusMetering) GetSecondsMaxOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecondsMax, true
}

// SetSecondsMax sets field value
func (o *LiveEventSessionStatusMetering) SetSecondsMax(v float32) {
	o.SecondsMax = v
}

// GetSecondsRemaining returns the SecondsRemaining field value
func (o *LiveEventSessionStatusMetering) GetSecondsRemaining() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SecondsRemaining
}

// GetSecondsRemainingOk returns a tuple with the SecondsRemaining field value
// and a boolean to check if the value has been set.
func (o *LiveEventSessionStatusMetering) GetSecondsRemainingOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecondsRemaining, true
}

// SetSecondsRemaining sets field value
func (o *LiveEventSessionStatusMetering) SetSecondsRemaining(v float32) {
	o.SecondsRemaining = v
}

func (o LiveEventSessionStatusMetering) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LiveEventSessionStatusMetering) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["seconds_max"] = o.SecondsMax
	toSerialize["seconds_remaining"] = o.SecondsRemaining
	return toSerialize, nil
}

func (o *LiveEventSessionStatusMetering) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"seconds_max",
		"seconds_remaining",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLiveEventSessionStatusMetering := _LiveEventSessionStatusMetering{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLiveEventSessionStatusMetering)

	if err != nil {
		return err
	}

	*o = LiveEventSessionStatusMetering(varLiveEventSessionStatusMetering)

	return err
}

type NullableLiveEventSessionStatusMetering struct {
	value *LiveEventSessionStatusMetering
	isSet bool
}

func (v NullableLiveEventSessionStatusMetering) Get() *LiveEventSessionStatusMetering {
	return v.value
}

func (v *NullableLiveEventSessionStatusMetering) Set(val *LiveEventSessionStatusMetering) {
	v.value = val
	v.isSet = true
}

func (v NullableLiveEventSessionStatusMetering) IsSet() bool {
	return v.isSet
}

func (v *NullableLiveEventSessionStatusMetering) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLiveEventSessionStatusMetering(val *LiveEventSessionStatusMetering) *NullableLiveEventSessionStatusMetering {
	return &NullableLiveEventSessionStatusMetering{value: val, isSet: true}
}

func (v NullableLiveEventSessionStatusMetering) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLiveEventSessionStatusMetering) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


