/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type VideosShowcasesAPI interface {

	/*
		AddOrRemoveMultipleAlbums Add or remove a video from a list of showcases

		This method adds or removes the specified video to or from multiple showcases.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param videoId The ID of the video.
		@return ApiAddOrRemoveMultipleAlbumsRequest
	*/
	AddOrRemoveMultipleAlbums(ctx context.Context, videoId int32) ApiAddOrRemoveMultipleAlbumsRequest

	// AddOrRemoveMultipleAlbumsExecute executes the request
	//  @return []Album
	AddOrRemoveMultipleAlbumsExecute(r ApiAddOrRemoveMultipleAlbumsRequest) ([]Album, *http.Response, error)

	/*
		GetVideoAlbums Get all the showcases that contain a video

		This method returns all the showcases that contain the specified video.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param videoId The ID of the video.
		@return ApiGetVideoAlbumsRequest
	*/
	GetVideoAlbums(ctx context.Context, videoId int32) ApiGetVideoAlbumsRequest

	// GetVideoAlbumsExecute executes the request
	//  @return []Album
	GetVideoAlbumsExecute(r ApiGetVideoAlbumsRequest) ([]Album, *http.Response, error)
}

// VideosShowcasesAPIService VideosShowcasesAPI service
type VideosShowcasesAPIService service

type ApiAddOrRemoveMultipleAlbumsRequest struct {
	ctx                              context.Context
	ApiService                       VideosShowcasesAPI
	videoId                          int32
	addOrRemoveMultipleAlbumsRequest *AddOrRemoveMultipleAlbumsRequest
}

func (r ApiAddOrRemoveMultipleAlbumsRequest) AddOrRemoveMultipleAlbumsRequest(addOrRemoveMultipleAlbumsRequest AddOrRemoveMultipleAlbumsRequest) ApiAddOrRemoveMultipleAlbumsRequest {
	r.addOrRemoveMultipleAlbumsRequest = &addOrRemoveMultipleAlbumsRequest
	return r
}

func (r ApiAddOrRemoveMultipleAlbumsRequest) Execute() ([]Album, *http.Response, error) {
	return r.ApiService.AddOrRemoveMultipleAlbumsExecute(r)
}

/*
AddOrRemoveMultipleAlbums Add or remove a video from a list of showcases

This method adds or removes the specified video to or from multiple showcases.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param videoId The ID of the video.
	@return ApiAddOrRemoveMultipleAlbumsRequest
*/
func (a *VideosShowcasesAPIService) AddOrRemoveMultipleAlbums(ctx context.Context, videoId int32) ApiAddOrRemoveMultipleAlbumsRequest {
	return ApiAddOrRemoveMultipleAlbumsRequest{
		ApiService: a,
		ctx:        ctx,
		videoId:    videoId,
	}
}

// Execute executes the request
//
//	@return []Album
func (a *VideosShowcasesAPIService) AddOrRemoveMultipleAlbumsExecute(r ApiAddOrRemoveMultipleAlbumsRequest) ([]Album, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Album
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosShowcasesAPIService.AddOrRemoveMultipleAlbums")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos/{video_id}/albums"
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.vimeo.album+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.album+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addOrRemoveMultipleAlbumsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetVideoAlbumsRequest struct {
	ctx        context.Context
	ApiService VideosShowcasesAPI
	videoId    int32
	page       *float32
	perPage    *float32
}

// The page number of the results to show.
func (r ApiGetVideoAlbumsRequest) Page(page float32) ApiGetVideoAlbumsRequest {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiGetVideoAlbumsRequest) PerPage(perPage float32) ApiGetVideoAlbumsRequest {
	r.perPage = &perPage
	return r
}

func (r ApiGetVideoAlbumsRequest) Execute() ([]Album, *http.Response, error) {
	return r.ApiService.GetVideoAlbumsExecute(r)
}

/*
GetVideoAlbums Get all the showcases that contain a video

This method returns all the showcases that contain the specified video.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param videoId The ID of the video.
	@return ApiGetVideoAlbumsRequest
*/
func (a *VideosShowcasesAPIService) GetVideoAlbums(ctx context.Context, videoId int32) ApiGetVideoAlbumsRequest {
	return ApiGetVideoAlbumsRequest{
		ApiService: a,
		ctx:        ctx,
		videoId:    videoId,
	}
}

// Execute executes the request
//
//	@return []Album
func (a *VideosShowcasesAPIService) GetVideoAlbumsExecute(r ApiGetVideoAlbumsRequest) ([]Album, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Album
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosShowcasesAPIService.GetVideoAlbums")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos/{video_id}/albums"
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.album+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
