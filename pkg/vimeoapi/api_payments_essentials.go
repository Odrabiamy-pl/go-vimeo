/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type PaymentsEssentialsAPI interface {

	/*
	GetPaymentMethodInfo Get information about a payments service payment method

	This method returns information about the specified Vimeo payments service payment method.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param paymentMethodId The ID of the payment method.
	@return ApiGetPaymentMethodInfoRequest
	*/
	GetPaymentMethodInfo(ctx context.Context, paymentMethodId string) ApiGetPaymentMethodInfoRequest

	// GetPaymentMethodInfoExecute executes the request
	//  @return PaymentMethod
	GetPaymentMethodInfoExecute(r ApiGetPaymentMethodInfoRequest) (*PaymentMethod, *http.Response, error)

	/*
	ListPaymentMethods Get a list of all payments service payment methods

	This method returns a list of all Vimeo payments service payment methods that are available to the authenticated user.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListPaymentMethodsRequest
	*/
	ListPaymentMethods(ctx context.Context) ApiListPaymentMethodsRequest

	// ListPaymentMethodsExecute executes the request
	//  @return []PaymentMethod
	ListPaymentMethodsExecute(r ApiListPaymentMethodsRequest) ([]PaymentMethod, *http.Response, error)
}

// PaymentsEssentialsAPIService PaymentsEssentialsAPI service
type PaymentsEssentialsAPIService service

type ApiGetPaymentMethodInfoRequest struct {
	ctx context.Context
	ApiService PaymentsEssentialsAPI
	paymentMethodId string
}

func (r ApiGetPaymentMethodInfoRequest) Execute() (*PaymentMethod, *http.Response, error) {
	return r.ApiService.GetPaymentMethodInfoExecute(r)
}

/*
GetPaymentMethodInfo Get information about a payments service payment method

This method returns information about the specified Vimeo payments service payment method.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param paymentMethodId The ID of the payment method.
 @return ApiGetPaymentMethodInfoRequest
*/
func (a *PaymentsEssentialsAPIService) GetPaymentMethodInfo(ctx context.Context, paymentMethodId string) ApiGetPaymentMethodInfoRequest {
	return ApiGetPaymentMethodInfoRequest{
		ApiService: a,
		ctx: ctx,
		paymentMethodId: paymentMethodId,
	}
}

// Execute executes the request
//  @return PaymentMethod
func (a *PaymentsEssentialsAPIService) GetPaymentMethodInfoExecute(r ApiGetPaymentMethodInfoRequest) (*PaymentMethod, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaymentMethod
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PaymentsEssentialsAPIService.GetPaymentMethodInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/payment_methods/{payment_method_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"payment_method_id"+"}", url.PathEscape(parameterValueToString(r.paymentMethodId, "paymentMethodId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListPaymentMethodsRequest struct {
	ctx context.Context
	ApiService PaymentsEssentialsAPI
	accountId *string
	cardmemberName *string
	page *float32
	perPage *float32
	showDisabled *bool
	listPaymentMethodsRequest *ListPaymentMethodsRequest
}

// The ID associated with the account.
func (r ApiListPaymentMethodsRequest) AccountId(accountId string) ApiListPaymentMethodsRequest {
	r.accountId = &accountId
	return r
}

// The name of the card member.
func (r ApiListPaymentMethodsRequest) CardmemberName(cardmemberName string) ApiListPaymentMethodsRequest {
	r.cardmemberName = &cardmemberName
	return r
}

// The page number of the results to show.
func (r ApiListPaymentMethodsRequest) Page(page float32) ApiListPaymentMethodsRequest {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiListPaymentMethodsRequest) PerPage(perPage float32) ApiListPaymentMethodsRequest {
	r.perPage = &perPage
	return r
}

// Whether to return disabled payment methods.
func (r ApiListPaymentMethodsRequest) ShowDisabled(showDisabled bool) ApiListPaymentMethodsRequest {
	r.showDisabled = &showDisabled
	return r
}

func (r ApiListPaymentMethodsRequest) ListPaymentMethodsRequest(listPaymentMethodsRequest ListPaymentMethodsRequest) ApiListPaymentMethodsRequest {
	r.listPaymentMethodsRequest = &listPaymentMethodsRequest
	return r
}

func (r ApiListPaymentMethodsRequest) Execute() ([]PaymentMethod, *http.Response, error) {
	return r.ApiService.ListPaymentMethodsExecute(r)
}

/*
ListPaymentMethods Get a list of all payments service payment methods

This method returns a list of all Vimeo payments service payment methods that are available to the authenticated user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListPaymentMethodsRequest
*/
func (a *PaymentsEssentialsAPIService) ListPaymentMethods(ctx context.Context) ApiListPaymentMethodsRequest {
	return ApiListPaymentMethodsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []PaymentMethod
func (a *PaymentsEssentialsAPIService) ListPaymentMethodsExecute(r ApiListPaymentMethodsRequest) ([]PaymentMethod, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PaymentMethod
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PaymentsEssentialsAPIService.ListPaymentMethods")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/payment_methods"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.accountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "account_id", r.accountId, "")
	}
	if r.cardmemberName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cardmember_name", r.cardmemberName, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	if r.showDisabled != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "show_disabled", r.showDisabled, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.listPaymentMethodsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
