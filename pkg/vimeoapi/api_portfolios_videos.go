/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type PortfoliosVideosAPI interface {

	/*
	AddVideoToPortfolio Add a video to a portfolio

	This method adds a video to the specified portfolio belonging to the authenticated user.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param portfolioId The ID of the portfolio.
	@param userId The ID of the user.
	@param videoId The ID of the video.
	@return ApiAddVideoToPortfolioRequest
	*/
	AddVideoToPortfolio(ctx context.Context, portfolioId float32, userId int32, videoId int32) ApiAddVideoToPortfolioRequest

	// AddVideoToPortfolioExecute executes the request
	AddVideoToPortfolioExecute(r ApiAddVideoToPortfolioRequest) (*http.Response, error)

	/*
	AddVideoToPortfolioAlt1 Add a video to a portfolio

	This method adds a video to the specified portfolio belonging to the authenticated user.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param portfolioId The ID of the portfolio.
	@param videoId The ID of the video.
	@return ApiAddVideoToPortfolioAlt1Request
	*/
	AddVideoToPortfolioAlt1(ctx context.Context, portfolioId float32, videoId int32) ApiAddVideoToPortfolioAlt1Request

	// AddVideoToPortfolioAlt1Execute executes the request
	AddVideoToPortfolioAlt1Execute(r ApiAddVideoToPortfolioAlt1Request) (*http.Response, error)

	/*
	DeleteVideoFromPortfolio Remove a video from a portfolio

	This method removes a video from the specified portfolio belonging to the authenticated user.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param portfolioId The ID of the portfolio.
	@param userId The ID of the user.
	@param videoId The ID of the video.
	@return ApiDeleteVideoFromPortfolioRequest
	*/
	DeleteVideoFromPortfolio(ctx context.Context, portfolioId float32, userId int32, videoId int32) ApiDeleteVideoFromPortfolioRequest

	// DeleteVideoFromPortfolioExecute executes the request
	DeleteVideoFromPortfolioExecute(r ApiDeleteVideoFromPortfolioRequest) (*http.Response, error)

	/*
	DeleteVideoFromPortfolioAlt1 Remove a video from a portfolio

	This method removes a video from the specified portfolio belonging to the authenticated user.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param portfolioId The ID of the portfolio.
	@param videoId The ID of the video.
	@return ApiDeleteVideoFromPortfolioAlt1Request
	*/
	DeleteVideoFromPortfolioAlt1(ctx context.Context, portfolioId float32, videoId int32) ApiDeleteVideoFromPortfolioAlt1Request

	// DeleteVideoFromPortfolioAlt1Execute executes the request
	DeleteVideoFromPortfolioAlt1Execute(r ApiDeleteVideoFromPortfolioAlt1Request) (*http.Response, error)

	/*
	GetPortfolioVideo Get a specific video in a portfolio

	This method returns a single video from the specified portfolio belonging to the authenticated user.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param portfolioId The ID of the portfolio.
	@param userId The ID of the user.
	@param videoId The ID of the video.
	@return ApiGetPortfolioVideoRequest
	*/
	GetPortfolioVideo(ctx context.Context, portfolioId float32, userId int32, videoId int32) ApiGetPortfolioVideoRequest

	// GetPortfolioVideoExecute executes the request
	//  @return Video
	GetPortfolioVideoExecute(r ApiGetPortfolioVideoRequest) (*Video, *http.Response, error)

	/*
	GetPortfolioVideoAlt1 Get a specific video in a portfolio

	This method returns a single video from the specified portfolio belonging to the authenticated user.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param portfolioId The ID of the portfolio.
	@param videoId The ID of the video.
	@return ApiGetPortfolioVideoAlt1Request
	*/
	GetPortfolioVideoAlt1(ctx context.Context, portfolioId float32, videoId int32) ApiGetPortfolioVideoAlt1Request

	// GetPortfolioVideoAlt1Execute executes the request
	//  @return Video
	GetPortfolioVideoAlt1Execute(r ApiGetPortfolioVideoAlt1Request) (*Video, *http.Response, error)

	/*
	GetPortfolioVideos Get all the videos in a portfolio

	This method returns every video from the specified portfolio belonging to the authenticated user.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param portfolioId The ID of the portfolio.
	@param userId The ID of the user.
	@return ApiGetPortfolioVideosRequest
	*/
	GetPortfolioVideos(ctx context.Context, portfolioId float32, userId int32) ApiGetPortfolioVideosRequest

	// GetPortfolioVideosExecute executes the request
	//  @return []Video
	GetPortfolioVideosExecute(r ApiGetPortfolioVideosRequest) ([]Video, *http.Response, error)

	/*
	GetPortfolioVideosAlt1 Get all the videos in a portfolio

	This method returns every video from the specified portfolio belonging to the authenticated user.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param portfolioId The ID of the portfolio.
	@return ApiGetPortfolioVideosAlt1Request
	*/
	GetPortfolioVideosAlt1(ctx context.Context, portfolioId float32) ApiGetPortfolioVideosAlt1Request

	// GetPortfolioVideosAlt1Execute executes the request
	//  @return []Video
	GetPortfolioVideosAlt1Execute(r ApiGetPortfolioVideosAlt1Request) ([]Video, *http.Response, error)
}

// PortfoliosVideosAPIService PortfoliosVideosAPI service
type PortfoliosVideosAPIService service

type ApiAddVideoToPortfolioRequest struct {
	ctx context.Context
	ApiService PortfoliosVideosAPI
	portfolioId float32
	userId int32
	videoId int32
}

func (r ApiAddVideoToPortfolioRequest) Execute() (*http.Response, error) {
	return r.ApiService.AddVideoToPortfolioExecute(r)
}

/*
AddVideoToPortfolio Add a video to a portfolio

This method adds a video to the specified portfolio belonging to the authenticated user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param portfolioId The ID of the portfolio.
 @param userId The ID of the user.
 @param videoId The ID of the video.
 @return ApiAddVideoToPortfolioRequest
*/
func (a *PortfoliosVideosAPIService) AddVideoToPortfolio(ctx context.Context, portfolioId float32, userId int32, videoId int32) ApiAddVideoToPortfolioRequest {
	return ApiAddVideoToPortfolioRequest{
		ApiService: a,
		ctx: ctx,
		portfolioId: portfolioId,
		userId: userId,
		videoId: videoId,
	}
}

// Execute executes the request
func (a *PortfoliosVideosAPIService) AddVideoToPortfolioExecute(r ApiAddVideoToPortfolioRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortfoliosVideosAPIService.AddVideoToPortfolio")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/portfolios/{portfolio_id}/videos/{video_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"portfolio_id"+"}", url.PathEscape(parameterValueToString(r.portfolioId, "portfolioId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAddVideoToPortfolioAlt1Request struct {
	ctx context.Context
	ApiService PortfoliosVideosAPI
	portfolioId float32
	videoId int32
}

func (r ApiAddVideoToPortfolioAlt1Request) Execute() (*http.Response, error) {
	return r.ApiService.AddVideoToPortfolioAlt1Execute(r)
}

/*
AddVideoToPortfolioAlt1 Add a video to a portfolio

This method adds a video to the specified portfolio belonging to the authenticated user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param portfolioId The ID of the portfolio.
 @param videoId The ID of the video.
 @return ApiAddVideoToPortfolioAlt1Request
*/
func (a *PortfoliosVideosAPIService) AddVideoToPortfolioAlt1(ctx context.Context, portfolioId float32, videoId int32) ApiAddVideoToPortfolioAlt1Request {
	return ApiAddVideoToPortfolioAlt1Request{
		ApiService: a,
		ctx: ctx,
		portfolioId: portfolioId,
		videoId: videoId,
	}
}

// Execute executes the request
func (a *PortfoliosVideosAPIService) AddVideoToPortfolioAlt1Execute(r ApiAddVideoToPortfolioAlt1Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortfoliosVideosAPIService.AddVideoToPortfolioAlt1")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/portfolios/{portfolio_id}/videos/{video_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"portfolio_id"+"}", url.PathEscape(parameterValueToString(r.portfolioId, "portfolioId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteVideoFromPortfolioRequest struct {
	ctx context.Context
	ApiService PortfoliosVideosAPI
	portfolioId float32
	userId int32
	videoId int32
}

func (r ApiDeleteVideoFromPortfolioRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteVideoFromPortfolioExecute(r)
}

/*
DeleteVideoFromPortfolio Remove a video from a portfolio

This method removes a video from the specified portfolio belonging to the authenticated user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param portfolioId The ID of the portfolio.
 @param userId The ID of the user.
 @param videoId The ID of the video.
 @return ApiDeleteVideoFromPortfolioRequest
*/
func (a *PortfoliosVideosAPIService) DeleteVideoFromPortfolio(ctx context.Context, portfolioId float32, userId int32, videoId int32) ApiDeleteVideoFromPortfolioRequest {
	return ApiDeleteVideoFromPortfolioRequest{
		ApiService: a,
		ctx: ctx,
		portfolioId: portfolioId,
		userId: userId,
		videoId: videoId,
	}
}

// Execute executes the request
func (a *PortfoliosVideosAPIService) DeleteVideoFromPortfolioExecute(r ApiDeleteVideoFromPortfolioRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortfoliosVideosAPIService.DeleteVideoFromPortfolio")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/portfolios/{portfolio_id}/videos/{video_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"portfolio_id"+"}", url.PathEscape(parameterValueToString(r.portfolioId, "portfolioId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteVideoFromPortfolioAlt1Request struct {
	ctx context.Context
	ApiService PortfoliosVideosAPI
	portfolioId float32
	videoId int32
}

func (r ApiDeleteVideoFromPortfolioAlt1Request) Execute() (*http.Response, error) {
	return r.ApiService.DeleteVideoFromPortfolioAlt1Execute(r)
}

/*
DeleteVideoFromPortfolioAlt1 Remove a video from a portfolio

This method removes a video from the specified portfolio belonging to the authenticated user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param portfolioId The ID of the portfolio.
 @param videoId The ID of the video.
 @return ApiDeleteVideoFromPortfolioAlt1Request
*/
func (a *PortfoliosVideosAPIService) DeleteVideoFromPortfolioAlt1(ctx context.Context, portfolioId float32, videoId int32) ApiDeleteVideoFromPortfolioAlt1Request {
	return ApiDeleteVideoFromPortfolioAlt1Request{
		ApiService: a,
		ctx: ctx,
		portfolioId: portfolioId,
		videoId: videoId,
	}
}

// Execute executes the request
func (a *PortfoliosVideosAPIService) DeleteVideoFromPortfolioAlt1Execute(r ApiDeleteVideoFromPortfolioAlt1Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortfoliosVideosAPIService.DeleteVideoFromPortfolioAlt1")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/portfolios/{portfolio_id}/videos/{video_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"portfolio_id"+"}", url.PathEscape(parameterValueToString(r.portfolioId, "portfolioId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LegacyError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetPortfolioVideoRequest struct {
	ctx context.Context
	ApiService PortfoliosVideosAPI
	portfolioId float32
	userId int32
	videoId int32
}

func (r ApiGetPortfolioVideoRequest) Execute() (*Video, *http.Response, error) {
	return r.ApiService.GetPortfolioVideoExecute(r)
}

/*
GetPortfolioVideo Get a specific video in a portfolio

This method returns a single video from the specified portfolio belonging to the authenticated user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param portfolioId The ID of the portfolio.
 @param userId The ID of the user.
 @param videoId The ID of the video.
 @return ApiGetPortfolioVideoRequest
*/
func (a *PortfoliosVideosAPIService) GetPortfolioVideo(ctx context.Context, portfolioId float32, userId int32, videoId int32) ApiGetPortfolioVideoRequest {
	return ApiGetPortfolioVideoRequest{
		ApiService: a,
		ctx: ctx,
		portfolioId: portfolioId,
		userId: userId,
		videoId: videoId,
	}
}

// Execute executes the request
//  @return Video
func (a *PortfoliosVideosAPIService) GetPortfolioVideoExecute(r ApiGetPortfolioVideoRequest) (*Video, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Video
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortfoliosVideosAPIService.GetPortfolioVideo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/portfolios/{portfolio_id}/videos/{video_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"portfolio_id"+"}", url.PathEscape(parameterValueToString(r.portfolioId, "portfolioId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.video+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPortfolioVideoAlt1Request struct {
	ctx context.Context
	ApiService PortfoliosVideosAPI
	portfolioId float32
	videoId int32
}

func (r ApiGetPortfolioVideoAlt1Request) Execute() (*Video, *http.Response, error) {
	return r.ApiService.GetPortfolioVideoAlt1Execute(r)
}

/*
GetPortfolioVideoAlt1 Get a specific video in a portfolio

This method returns a single video from the specified portfolio belonging to the authenticated user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param portfolioId The ID of the portfolio.
 @param videoId The ID of the video.
 @return ApiGetPortfolioVideoAlt1Request
*/
func (a *PortfoliosVideosAPIService) GetPortfolioVideoAlt1(ctx context.Context, portfolioId float32, videoId int32) ApiGetPortfolioVideoAlt1Request {
	return ApiGetPortfolioVideoAlt1Request{
		ApiService: a,
		ctx: ctx,
		portfolioId: portfolioId,
		videoId: videoId,
	}
}

// Execute executes the request
//  @return Video
func (a *PortfoliosVideosAPIService) GetPortfolioVideoAlt1Execute(r ApiGetPortfolioVideoAlt1Request) (*Video, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Video
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortfoliosVideosAPIService.GetPortfolioVideoAlt1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/portfolios/{portfolio_id}/videos/{video_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"portfolio_id"+"}", url.PathEscape(parameterValueToString(r.portfolioId, "portfolioId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", url.PathEscape(parameterValueToString(r.videoId, "videoId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.video+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPortfolioVideosRequest struct {
	ctx context.Context
	ApiService PortfoliosVideosAPI
	portfolioId float32
	userId int32
	containingUri *string
	filter *string
	filterEmbeddable *bool
	page *float32
	perPage *float32
	sort *string
}

// The page that contains the video URI.
func (r ApiGetPortfolioVideosRequest) ContainingUri(containingUri string) ApiGetPortfolioVideosRequest {
	r.containingUri = &containingUri
	return r
}

// The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos. 
func (r ApiGetPortfolioVideosRequest) Filter(filter string) ApiGetPortfolioVideosRequest {
	r.filter = &filter
	return r
}

// Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;.
func (r ApiGetPortfolioVideosRequest) FilterEmbeddable(filterEmbeddable bool) ApiGetPortfolioVideosRequest {
	r.filterEmbeddable = &filterEmbeddable
	return r
}

// The page number of the results to show.
func (r ApiGetPortfolioVideosRequest) Page(page float32) ApiGetPortfolioVideosRequest {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiGetPortfolioVideosRequest) PerPage(perPage float32) ApiGetPortfolioVideosRequest {
	r.perPage = &perPage
	return r
}

// The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by creation date.  * &#x60;default&#x60; - Use the default sorting method.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;manual&#x60; - Sort the results by their user-specified order.  * &#x60;plays&#x60; - Sort the results by number of plays. 
func (r ApiGetPortfolioVideosRequest) Sort(sort string) ApiGetPortfolioVideosRequest {
	r.sort = &sort
	return r
}

func (r ApiGetPortfolioVideosRequest) Execute() ([]Video, *http.Response, error) {
	return r.ApiService.GetPortfolioVideosExecute(r)
}

/*
GetPortfolioVideos Get all the videos in a portfolio

This method returns every video from the specified portfolio belonging to the authenticated user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param portfolioId The ID of the portfolio.
 @param userId The ID of the user.
 @return ApiGetPortfolioVideosRequest
*/
func (a *PortfoliosVideosAPIService) GetPortfolioVideos(ctx context.Context, portfolioId float32, userId int32) ApiGetPortfolioVideosRequest {
	return ApiGetPortfolioVideosRequest{
		ApiService: a,
		ctx: ctx,
		portfolioId: portfolioId,
		userId: userId,
	}
}

// Execute executes the request
//  @return []Video
func (a *PortfoliosVideosAPIService) GetPortfolioVideosExecute(r ApiGetPortfolioVideosRequest) ([]Video, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Video
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortfoliosVideosAPIService.GetPortfolioVideos")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/portfolios/{portfolio_id}/videos"
	localVarPath = strings.Replace(localVarPath, "{"+"portfolio_id"+"}", url.PathEscape(parameterValueToString(r.portfolioId, "portfolioId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.containingUri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "containing_uri", r.containingUri, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.filterEmbeddable != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter_embeddable", r.filterEmbeddable, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.video+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPortfolioVideosAlt1Request struct {
	ctx context.Context
	ApiService PortfoliosVideosAPI
	portfolioId float32
	containingUri *string
	filter *string
	filterEmbeddable *bool
	page *float32
	perPage *float32
	sort *string
}

// The page that contains the video URI.
func (r ApiGetPortfolioVideosAlt1Request) ContainingUri(containingUri string) ApiGetPortfolioVideosAlt1Request {
	r.containingUri = &containingUri
	return r
}

// The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos. 
func (r ApiGetPortfolioVideosAlt1Request) Filter(filter string) ApiGetPortfolioVideosAlt1Request {
	r.filter = &filter
	return r
}

// Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;.
func (r ApiGetPortfolioVideosAlt1Request) FilterEmbeddable(filterEmbeddable bool) ApiGetPortfolioVideosAlt1Request {
	r.filterEmbeddable = &filterEmbeddable
	return r
}

// The page number of the results to show.
func (r ApiGetPortfolioVideosAlt1Request) Page(page float32) ApiGetPortfolioVideosAlt1Request {
	r.page = &page
	return r
}

// The number of items to show on each page of results, up to a maximum of 100.
func (r ApiGetPortfolioVideosAlt1Request) PerPage(perPage float32) ApiGetPortfolioVideosAlt1Request {
	r.perPage = &perPage
	return r
}

// The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by creation date.  * &#x60;default&#x60; - Use the default sorting method.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;manual&#x60; - Sort the results by their user-specified order.  * &#x60;plays&#x60; - Sort the results by number of plays. 
func (r ApiGetPortfolioVideosAlt1Request) Sort(sort string) ApiGetPortfolioVideosAlt1Request {
	r.sort = &sort
	return r
}

func (r ApiGetPortfolioVideosAlt1Request) Execute() ([]Video, *http.Response, error) {
	return r.ApiService.GetPortfolioVideosAlt1Execute(r)
}

/*
GetPortfolioVideosAlt1 Get all the videos in a portfolio

This method returns every video from the specified portfolio belonging to the authenticated user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param portfolioId The ID of the portfolio.
 @return ApiGetPortfolioVideosAlt1Request
*/
func (a *PortfoliosVideosAPIService) GetPortfolioVideosAlt1(ctx context.Context, portfolioId float32) ApiGetPortfolioVideosAlt1Request {
	return ApiGetPortfolioVideosAlt1Request{
		ApiService: a,
		ctx: ctx,
		portfolioId: portfolioId,
	}
}

// Execute executes the request
//  @return []Video
func (a *PortfoliosVideosAPIService) GetPortfolioVideosAlt1Execute(r ApiGetPortfolioVideosAlt1Request) ([]Video, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Video
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortfoliosVideosAPIService.GetPortfolioVideosAlt1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/portfolios/{portfolio_id}/videos"
	localVarPath = strings.Replace(localVarPath, "{"+"portfolio_id"+"}", url.PathEscape(parameterValueToString(r.portfolioId, "portfolioId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.containingUri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "containing_uri", r.containingUri, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.filterEmbeddable != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter_embeddable", r.filterEmbeddable, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.video+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
