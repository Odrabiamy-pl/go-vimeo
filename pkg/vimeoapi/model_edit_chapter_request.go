/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the EditChapterRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EditChapterRequest{}

// EditChapterRequest struct for EditChapterRequest
type EditChapterRequest struct {
	// The URI of the chapter's active thumbnail.
	ActiveThumbnailUri *string `json:"active_thumbnail_uri,omitempty"`
	// The timecode of the chapter in seconds from the start of the video.
	Timecode NullableFloat32 `json:"timecode,omitempty"`
	// The title of the chapter.
	Title NullableString `json:"title,omitempty"`
}

// NewEditChapterRequest instantiates a new EditChapterRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditChapterRequest() *EditChapterRequest {
	this := EditChapterRequest{}
	return &this
}

// NewEditChapterRequestWithDefaults instantiates a new EditChapterRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditChapterRequestWithDefaults() *EditChapterRequest {
	this := EditChapterRequest{}
	return &this
}

// GetActiveThumbnailUri returns the ActiveThumbnailUri field value if set, zero value otherwise.
func (o *EditChapterRequest) GetActiveThumbnailUri() string {
	if o == nil || IsNil(o.ActiveThumbnailUri) {
		var ret string
		return ret
	}
	return *o.ActiveThumbnailUri
}

// GetActiveThumbnailUriOk returns a tuple with the ActiveThumbnailUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditChapterRequest) GetActiveThumbnailUriOk() (*string, bool) {
	if o == nil || IsNil(o.ActiveThumbnailUri) {
		return nil, false
	}
	return o.ActiveThumbnailUri, true
}

// HasActiveThumbnailUri returns a boolean if a field has been set.
func (o *EditChapterRequest) HasActiveThumbnailUri() bool {
	if o != nil && !IsNil(o.ActiveThumbnailUri) {
		return true
	}

	return false
}

// SetActiveThumbnailUri gets a reference to the given string and assigns it to the ActiveThumbnailUri field.
func (o *EditChapterRequest) SetActiveThumbnailUri(v string) {
	o.ActiveThumbnailUri = &v
}

// GetTimecode returns the Timecode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EditChapterRequest) GetTimecode() float32 {
	if o == nil || IsNil(o.Timecode.Get()) {
		var ret float32
		return ret
	}
	return *o.Timecode.Get()
}

// GetTimecodeOk returns a tuple with the Timecode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EditChapterRequest) GetTimecodeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timecode.Get(), o.Timecode.IsSet()
}

// HasTimecode returns a boolean if a field has been set.
func (o *EditChapterRequest) HasTimecode() bool {
	if o != nil && o.Timecode.IsSet() {
		return true
	}

	return false
}

// SetTimecode gets a reference to the given NullableFloat32 and assigns it to the Timecode field.
func (o *EditChapterRequest) SetTimecode(v float32) {
	o.Timecode.Set(&v)
}
// SetTimecodeNil sets the value for Timecode to be an explicit nil
func (o *EditChapterRequest) SetTimecodeNil() {
	o.Timecode.Set(nil)
}

// UnsetTimecode ensures that no value is present for Timecode, not even an explicit nil
func (o *EditChapterRequest) UnsetTimecode() {
	o.Timecode.Unset()
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EditChapterRequest) GetTitle() string {
	if o == nil || IsNil(o.Title.Get()) {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EditChapterRequest) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *EditChapterRequest) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given NullableString and assigns it to the Title field.
func (o *EditChapterRequest) SetTitle(v string) {
	o.Title.Set(&v)
}
// SetTitleNil sets the value for Title to be an explicit nil
func (o *EditChapterRequest) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *EditChapterRequest) UnsetTitle() {
	o.Title.Unset()
}

func (o EditChapterRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EditChapterRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActiveThumbnailUri) {
		toSerialize["active_thumbnail_uri"] = o.ActiveThumbnailUri
	}
	if o.Timecode.IsSet() {
		toSerialize["timecode"] = o.Timecode.Get()
	}
	if o.Title.IsSet() {
		toSerialize["title"] = o.Title.Get()
	}
	return toSerialize, nil
}

type NullableEditChapterRequest struct {
	value *EditChapterRequest
	isSet bool
}

func (v NullableEditChapterRequest) Get() *EditChapterRequest {
	return v.value
}

func (v *NullableEditChapterRequest) Set(val *EditChapterRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEditChapterRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEditChapterRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditChapterRequest(val *EditChapterRequest) *NullableEditChapterRequest {
	return &NullableEditChapterRequest{value: val, isSet: true}
}

func (v NullableEditChapterRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditChapterRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


