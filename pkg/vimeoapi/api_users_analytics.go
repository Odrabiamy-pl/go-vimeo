/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


type UsersAnalyticsAPI interface {

	/*
	GetUserAnalytics Get analytics for the user

	This method returns analytic metrics for the authenticated user.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId The ID of the user.
	@return ApiGetUserAnalyticsRequest
	*/
	GetUserAnalytics(ctx context.Context, userId int32) ApiGetUserAnalyticsRequest

	// GetUserAnalyticsExecute executes the request
	//  @return []Analytics
	GetUserAnalyticsExecute(r ApiGetUserAnalyticsRequest) ([]Analytics, *http.Response, error)

	/*
	GetUserAnalyticsAlt1 Get analytics for the user

	This method returns analytic metrics for the authenticated user.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetUserAnalyticsAlt1Request
	*/
	GetUserAnalyticsAlt1(ctx context.Context) ApiGetUserAnalyticsAlt1Request

	// GetUserAnalyticsAlt1Execute executes the request
	//  @return []Analytics
	GetUserAnalyticsAlt1Execute(r ApiGetUserAnalyticsAlt1Request) ([]Analytics, *http.Response, error)
}

// UsersAnalyticsAPIService UsersAnalyticsAPI service
type UsersAnalyticsAPIService service

type ApiGetUserAnalyticsRequest struct {
	ctx context.Context
	ApiService UsersAnalyticsAPI
	userId int32
	dimension *string
	from *string
	to *string
	direction *string
	filterContent *string
	filterCountries *[]string
	filterDeviceTypes *[]string
	filterEmbedDomains *[]string
	filterStreamingTypes *[]string
	page *float32
	perPage *float32
	sort *string
	timeInterval *string
}

// The data dimension by which to group the results.  Option descriptions:  * &#x60;country&#x60; - Group the results by country.  * &#x60;embed_domain&#x60; - Group the results by embed domain.  * &#x60;total&#x60; - Group the results by the time range provided.  * &#x60;video&#x60; - Group the results by video. 
func (r ApiGetUserAnalyticsRequest) Dimension(dimension string) ApiGetUserAnalyticsRequest {
	r.dimension = &dimension
	return r
}

// The start date of the range of results in ISO 8601 format.
func (r ApiGetUserAnalyticsRequest) From(from string) ApiGetUserAnalyticsRequest {
	r.from = &from
	return r
}

// The end date of the range of results in ISO 8601 format.
func (r ApiGetUserAnalyticsRequest) To(to string) ApiGetUserAnalyticsRequest {
	r.to = &to
	return r
}

// The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
func (r ApiGetUserAnalyticsRequest) Direction(direction string) ApiGetUserAnalyticsRequest {
	r.direction = &direction
	return r
}

// A comma-separated list of video, folder, or event URIs to filter.
func (r ApiGetUserAnalyticsRequest) FilterContent(filterContent string) ApiGetUserAnalyticsRequest {
	r.filterContent = &filterContent
	return r
}

// A comma-separated list of country codes in ISO-3166 format to filter on.
func (r ApiGetUserAnalyticsRequest) FilterCountries(filterCountries []string) ApiGetUserAnalyticsRequest {
	r.filterCountries = &filterCountries
	return r
}

// A comma-separated list of device types to filter on.
func (r ApiGetUserAnalyticsRequest) FilterDeviceTypes(filterDeviceTypes []string) ApiGetUserAnalyticsRequest {
	r.filterDeviceTypes = &filterDeviceTypes
	return r
}

// A comma-separated list of domain names to filter on.
func (r ApiGetUserAnalyticsRequest) FilterEmbedDomains(filterEmbedDomains []string) ApiGetUserAnalyticsRequest {
	r.filterEmbedDomains = &filterEmbedDomains
	return r
}

// A comma-separated list of streaming types to filter on.
func (r ApiGetUserAnalyticsRequest) FilterStreamingTypes(filterStreamingTypes []string) ApiGetUserAnalyticsRequest {
	r.filterStreamingTypes = &filterStreamingTypes
	return r
}

// The page number of the results to show.
func (r ApiGetUserAnalyticsRequest) Page(page float32) ApiGetUserAnalyticsRequest {
	r.page = &page
	return r
}

// The maximum number of items returned from the request, up to a limit of 1000 items. The default value is &#x60;50&#x60;.
func (r ApiGetUserAnalyticsRequest) PerPage(perPage float32) ApiGetUserAnalyticsRequest {
	r.perPage = &perPage
	return r
}

// The way to sort the results.  Option descriptions:  * &#x60;average_percent_watched&#x60; - Sort the results by mean seconds played.  * &#x60;average_time_watched&#x60; - Sort the results by mean percentage played.  * &#x60;comments&#x60; - Sort the results by the number of comments.  * &#x60;country&#x60; - Sort the results by country.  * &#x60;default&#x60; - Sort the results by the values of both the **dimension** and **time_interval** fields.  * &#x60;downloads&#x60; - Sort the results by the number of downloads.  * &#x60;embed_domain&#x60; - Sort the results by embed domain.  * &#x60;finishes&#x60; - Sort the results by the number of complete plays.  * &#x60;impressions&#x60; - Sort the results by the number of impressions.  * &#x60;like&#x60; - Sort the results by the number of likes.  * &#x60;time&#x60; - Sort the results by the value of the **start_date** field. This option is available only when the value of **time_interval** isn&#39;t &#x60;none&#x60;.  * &#x60;total_time_watched&#x60; - Sort the results by total seconds played.  * &#x60;unique_impressions&#x60; - Sort the results by unique impressions.  * &#x60;unique_viewers&#x60; - Sort the results by unique viewers.  * &#x60;video&#x60; - Sort the results by video ID.  * &#x60;views&#x60; - Sort the results by the number of views. 
func (r ApiGetUserAnalyticsRequest) Sort(sort string) ApiGetUserAnalyticsRequest {
	r.sort = &sort
	return r
}

// The interval by which to aggregate the data according to the specified data dimension. The default value is &#x60;none&#x60;.  Option descriptions:  * &#x60;day&#x60; - Aggregate the results by day according to the specified data dimension.  * &#x60;month&#x60; - Aggregate the results by month according to the specified data dimension.  * &#x60;none&#x60; - The results are not aggregated by time interval.  * &#x60;week&#x60; - Aggregate the results by week according to the specified data dimension.  * &#x60;year&#x60; - Aggregate the results by year according to the specified data dimension. 
func (r ApiGetUserAnalyticsRequest) TimeInterval(timeInterval string) ApiGetUserAnalyticsRequest {
	r.timeInterval = &timeInterval
	return r
}

func (r ApiGetUserAnalyticsRequest) Execute() ([]Analytics, *http.Response, error) {
	return r.ApiService.GetUserAnalyticsExecute(r)
}

/*
GetUserAnalytics Get analytics for the user

This method returns analytic metrics for the authenticated user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId The ID of the user.
 @return ApiGetUserAnalyticsRequest
*/
func (a *UsersAnalyticsAPIService) GetUserAnalytics(ctx context.Context, userId int32) ApiGetUserAnalyticsRequest {
	return ApiGetUserAnalyticsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return []Analytics
func (a *UsersAnalyticsAPIService) GetUserAnalyticsExecute(r ApiGetUserAnalyticsRequest) ([]Analytics, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Analytics
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAnalyticsAPIService.GetUserAnalytics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/analytics"
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dimension == nil {
		return localVarReturnValue, nil, reportError("dimension is required and must be specified")
	}
	if r.from == nil {
		return localVarReturnValue, nil, reportError("from is required and must be specified")
	}
	if r.to == nil {
		return localVarReturnValue, nil, reportError("to is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", r.dimension, "")
	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.filterContent != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter_content", r.filterContent, "")
	}
	if r.filterCountries != nil {
		t := *r.filterCountries
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter_countries", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter_countries", t, "multi")
		}
	}
	if r.filterDeviceTypes != nil {
		t := *r.filterDeviceTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter_device_types", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter_device_types", t, "multi")
		}
	}
	if r.filterEmbedDomains != nil {
		t := *r.filterEmbedDomains
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter_embed_domains", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter_embed_domains", t, "multi")
		}
	}
	if r.filterStreamingTypes != nil {
		t := *r.filterStreamingTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter_streaming_types", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter_streaming_types", t, "multi")
		}
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "from", r.from, "")
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	if r.timeInterval != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "time_interval", r.timeInterval, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "to", r.to, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.analytics+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetUserAnalyticsAlt1Request struct {
	ctx context.Context
	ApiService UsersAnalyticsAPI
	dimension *string
	from *string
	to *string
	direction *string
	filterContent *string
	filterCountries *[]string
	filterDeviceTypes *[]string
	filterEmbedDomains *[]string
	filterStreamingTypes *[]string
	page *float32
	perPage *float32
	sort *string
	timeInterval *string
}

// The data dimension by which to group the results.  Option descriptions:  * &#x60;country&#x60; - Group the results by country.  * &#x60;embed_domain&#x60; - Group the results by embed domain.  * &#x60;total&#x60; - Group the results by the time range provided.  * &#x60;video&#x60; - Group the results by video. 
func (r ApiGetUserAnalyticsAlt1Request) Dimension(dimension string) ApiGetUserAnalyticsAlt1Request {
	r.dimension = &dimension
	return r
}

// The start date of the range of results in ISO 8601 format.
func (r ApiGetUserAnalyticsAlt1Request) From(from string) ApiGetUserAnalyticsAlt1Request {
	r.from = &from
	return r
}

// The end date of the range of results in ISO 8601 format.
func (r ApiGetUserAnalyticsAlt1Request) To(to string) ApiGetUserAnalyticsAlt1Request {
	r.to = &to
	return r
}

// The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order. 
func (r ApiGetUserAnalyticsAlt1Request) Direction(direction string) ApiGetUserAnalyticsAlt1Request {
	r.direction = &direction
	return r
}

// A comma-separated list of video, folder, or event URIs to filter.
func (r ApiGetUserAnalyticsAlt1Request) FilterContent(filterContent string) ApiGetUserAnalyticsAlt1Request {
	r.filterContent = &filterContent
	return r
}

// A comma-separated list of country codes in ISO-3166 format to filter on.
func (r ApiGetUserAnalyticsAlt1Request) FilterCountries(filterCountries []string) ApiGetUserAnalyticsAlt1Request {
	r.filterCountries = &filterCountries
	return r
}

// A comma-separated list of device types to filter on.
func (r ApiGetUserAnalyticsAlt1Request) FilterDeviceTypes(filterDeviceTypes []string) ApiGetUserAnalyticsAlt1Request {
	r.filterDeviceTypes = &filterDeviceTypes
	return r
}

// A comma-separated list of domain names to filter on.
func (r ApiGetUserAnalyticsAlt1Request) FilterEmbedDomains(filterEmbedDomains []string) ApiGetUserAnalyticsAlt1Request {
	r.filterEmbedDomains = &filterEmbedDomains
	return r
}

// A comma-separated list of streaming types to filter on.
func (r ApiGetUserAnalyticsAlt1Request) FilterStreamingTypes(filterStreamingTypes []string) ApiGetUserAnalyticsAlt1Request {
	r.filterStreamingTypes = &filterStreamingTypes
	return r
}

// The page number of the results to show.
func (r ApiGetUserAnalyticsAlt1Request) Page(page float32) ApiGetUserAnalyticsAlt1Request {
	r.page = &page
	return r
}

// The maximum number of items returned from the request, up to a limit of 1000 items. The default value is &#x60;50&#x60;.
func (r ApiGetUserAnalyticsAlt1Request) PerPage(perPage float32) ApiGetUserAnalyticsAlt1Request {
	r.perPage = &perPage
	return r
}

// The way to sort the results.  Option descriptions:  * &#x60;average_percent_watched&#x60; - Sort the results by mean seconds played.  * &#x60;average_time_watched&#x60; - Sort the results by mean percentage played.  * &#x60;comments&#x60; - Sort the results by the number of comments.  * &#x60;country&#x60; - Sort the results by country.  * &#x60;default&#x60; - Sort the results by the values of both the **dimension** and **time_interval** fields.  * &#x60;downloads&#x60; - Sort the results by the number of downloads.  * &#x60;embed_domain&#x60; - Sort the results by embed domain.  * &#x60;finishes&#x60; - Sort the results by the number of complete plays.  * &#x60;impressions&#x60; - Sort the results by the number of impressions.  * &#x60;like&#x60; - Sort the results by the number of likes.  * &#x60;time&#x60; - Sort the results by the value of the **start_date** field. This option is available only when the value of **time_interval** isn&#39;t &#x60;none&#x60;.  * &#x60;total_time_watched&#x60; - Sort the results by total seconds played.  * &#x60;unique_impressions&#x60; - Sort the results by unique impressions.  * &#x60;unique_viewers&#x60; - Sort the results by unique viewers.  * &#x60;video&#x60; - Sort the results by video ID.  * &#x60;views&#x60; - Sort the results by the number of views. 
func (r ApiGetUserAnalyticsAlt1Request) Sort(sort string) ApiGetUserAnalyticsAlt1Request {
	r.sort = &sort
	return r
}

// The interval by which to aggregate the data according to the specified data dimension. The default value is &#x60;none&#x60;.  Option descriptions:  * &#x60;day&#x60; - Aggregate the results by day according to the specified data dimension.  * &#x60;month&#x60; - Aggregate the results by month according to the specified data dimension.  * &#x60;none&#x60; - The results are not aggregated by time interval.  * &#x60;week&#x60; - Aggregate the results by week according to the specified data dimension.  * &#x60;year&#x60; - Aggregate the results by year according to the specified data dimension. 
func (r ApiGetUserAnalyticsAlt1Request) TimeInterval(timeInterval string) ApiGetUserAnalyticsAlt1Request {
	r.timeInterval = &timeInterval
	return r
}

func (r ApiGetUserAnalyticsAlt1Request) Execute() ([]Analytics, *http.Response, error) {
	return r.ApiService.GetUserAnalyticsAlt1Execute(r)
}

/*
GetUserAnalyticsAlt1 Get analytics for the user

This method returns analytic metrics for the authenticated user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetUserAnalyticsAlt1Request
*/
func (a *UsersAnalyticsAPIService) GetUserAnalyticsAlt1(ctx context.Context) ApiGetUserAnalyticsAlt1Request {
	return ApiGetUserAnalyticsAlt1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Analytics
func (a *UsersAnalyticsAPIService) GetUserAnalyticsAlt1Execute(r ApiGetUserAnalyticsAlt1Request) ([]Analytics, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Analytics
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAnalyticsAPIService.GetUserAnalyticsAlt1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/analytics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dimension == nil {
		return localVarReturnValue, nil, reportError("dimension is required and must be specified")
	}
	if r.from == nil {
		return localVarReturnValue, nil, reportError("from is required and must be specified")
	}
	if r.to == nil {
		return localVarReturnValue, nil, reportError("to is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", r.dimension, "")
	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.filterContent != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter_content", r.filterContent, "")
	}
	if r.filterCountries != nil {
		t := *r.filterCountries
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter_countries", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter_countries", t, "multi")
		}
	}
	if r.filterDeviceTypes != nil {
		t := *r.filterDeviceTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter_device_types", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter_device_types", t, "multi")
		}
	}
	if r.filterEmbedDomains != nil {
		t := *r.filterEmbedDomains
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter_embed_domains", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter_embed_domains", t, "multi")
		}
	}
	if r.filterStreamingTypes != nil {
		t := *r.filterStreamingTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter_streaming_types", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter_streaming_types", t, "multi")
		}
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "from", r.from, "")
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	if r.timeInterval != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "time_interval", r.timeInterval, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "to", r.to, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.vimeo.analytics+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
