/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the EditVideoRequestPrivacy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EditVideoRequestPrivacy{}

// EditVideoRequestPrivacy struct for EditVideoRequestPrivacy
type EditVideoRequestPrivacy struct {
	// Whether a user can add the video to a showcase, channel, or group.
	Add *bool `json:"add,omitempty"`
	// The privacy level required to comment on the video.  Option descriptions:  * `anybody` - Anyone can comment on the video.  * `contacts` - Only the owner's contacts can comment on the video.  * `nobody` - No one can comment on the video. 
	Comments *string `json:"comments,omitempty"`
	// Whether a user can download the video. This field isn't available to Vimeo Free members.
	Download *bool `json:"download,omitempty"`
	// The video's embed setting. Specify the `whitelist` value to restrict embedding to a specific set of domains. For more information, see our [Interacting with Videos](https://developer.vimeo.com/api/guides/videos/interact#set-off-site-privacy) guide.  Option descriptions:  * `private` - The video can't be embedded.  * `public` - The video can be embedded.  * `whitelist` - The video can be embedded on the specified domains only. 
	Embed *string `json:"embed,omitempty"`
	// The video's privacy setting. When this value is `users`, `application/json` is the only valid content type. Also, some privacy settings are unavailable to Vimeo Free members; for more information, see our [Help Center](https://vimeo.zendesk.com/hc/en-us/articles/224817847).  Option descriptions:  * `anybody` - Anyone can access the video. This privacy setting appears as `Public` on the Vimeo front end.  * `contacts` - Only those who follow the owner on Vimeo can access the video. _This field is deprecated._  * `disable` - The video is embeddable, but it's hidden on Vimeo and can't be played. This privacy setting appears as `Hide from Vimeo` on the Vimeo front end. _This field is deprecated._  * `nobody` - No one except the owner can access the video. This privacy setting appears as `Private` on the Vimeo front end.  * `password` - Only those with the password can access the video.  * `unlisted` - Only those with the private link can access the video.  * `users` - Only Vimeo members can access the video. _This field is deprecated._ 
	View *string `json:"view,omitempty"`
}

// NewEditVideoRequestPrivacy instantiates a new EditVideoRequestPrivacy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditVideoRequestPrivacy() *EditVideoRequestPrivacy {
	this := EditVideoRequestPrivacy{}
	return &this
}

// NewEditVideoRequestPrivacyWithDefaults instantiates a new EditVideoRequestPrivacy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditVideoRequestPrivacyWithDefaults() *EditVideoRequestPrivacy {
	this := EditVideoRequestPrivacy{}
	return &this
}

// GetAdd returns the Add field value if set, zero value otherwise.
func (o *EditVideoRequestPrivacy) GetAdd() bool {
	if o == nil || IsNil(o.Add) {
		var ret bool
		return ret
	}
	return *o.Add
}

// GetAddOk returns a tuple with the Add field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditVideoRequestPrivacy) GetAddOk() (*bool, bool) {
	if o == nil || IsNil(o.Add) {
		return nil, false
	}
	return o.Add, true
}

// HasAdd returns a boolean if a field has been set.
func (o *EditVideoRequestPrivacy) HasAdd() bool {
	if o != nil && !IsNil(o.Add) {
		return true
	}

	return false
}

// SetAdd gets a reference to the given bool and assigns it to the Add field.
func (o *EditVideoRequestPrivacy) SetAdd(v bool) {
	o.Add = &v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *EditVideoRequestPrivacy) GetComments() string {
	if o == nil || IsNil(o.Comments) {
		var ret string
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditVideoRequestPrivacy) GetCommentsOk() (*string, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *EditVideoRequestPrivacy) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given string and assigns it to the Comments field.
func (o *EditVideoRequestPrivacy) SetComments(v string) {
	o.Comments = &v
}

// GetDownload returns the Download field value if set, zero value otherwise.
func (o *EditVideoRequestPrivacy) GetDownload() bool {
	if o == nil || IsNil(o.Download) {
		var ret bool
		return ret
	}
	return *o.Download
}

// GetDownloadOk returns a tuple with the Download field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditVideoRequestPrivacy) GetDownloadOk() (*bool, bool) {
	if o == nil || IsNil(o.Download) {
		return nil, false
	}
	return o.Download, true
}

// HasDownload returns a boolean if a field has been set.
func (o *EditVideoRequestPrivacy) HasDownload() bool {
	if o != nil && !IsNil(o.Download) {
		return true
	}

	return false
}

// SetDownload gets a reference to the given bool and assigns it to the Download field.
func (o *EditVideoRequestPrivacy) SetDownload(v bool) {
	o.Download = &v
}

// GetEmbed returns the Embed field value if set, zero value otherwise.
func (o *EditVideoRequestPrivacy) GetEmbed() string {
	if o == nil || IsNil(o.Embed) {
		var ret string
		return ret
	}
	return *o.Embed
}

// GetEmbedOk returns a tuple with the Embed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditVideoRequestPrivacy) GetEmbedOk() (*string, bool) {
	if o == nil || IsNil(o.Embed) {
		return nil, false
	}
	return o.Embed, true
}

// HasEmbed returns a boolean if a field has been set.
func (o *EditVideoRequestPrivacy) HasEmbed() bool {
	if o != nil && !IsNil(o.Embed) {
		return true
	}

	return false
}

// SetEmbed gets a reference to the given string and assigns it to the Embed field.
func (o *EditVideoRequestPrivacy) SetEmbed(v string) {
	o.Embed = &v
}

// GetView returns the View field value if set, zero value otherwise.
func (o *EditVideoRequestPrivacy) GetView() string {
	if o == nil || IsNil(o.View) {
		var ret string
		return ret
	}
	return *o.View
}

// GetViewOk returns a tuple with the View field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditVideoRequestPrivacy) GetViewOk() (*string, bool) {
	if o == nil || IsNil(o.View) {
		return nil, false
	}
	return o.View, true
}

// HasView returns a boolean if a field has been set.
func (o *EditVideoRequestPrivacy) HasView() bool {
	if o != nil && !IsNil(o.View) {
		return true
	}

	return false
}

// SetView gets a reference to the given string and assigns it to the View field.
func (o *EditVideoRequestPrivacy) SetView(v string) {
	o.View = &v
}

func (o EditVideoRequestPrivacy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EditVideoRequestPrivacy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Add) {
		toSerialize["add"] = o.Add
	}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	if !IsNil(o.Download) {
		toSerialize["download"] = o.Download
	}
	if !IsNil(o.Embed) {
		toSerialize["embed"] = o.Embed
	}
	if !IsNil(o.View) {
		toSerialize["view"] = o.View
	}
	return toSerialize, nil
}

type NullableEditVideoRequestPrivacy struct {
	value *EditVideoRequestPrivacy
	isSet bool
}

func (v NullableEditVideoRequestPrivacy) Get() *EditVideoRequestPrivacy {
	return v.value
}

func (v *NullableEditVideoRequestPrivacy) Set(val *EditVideoRequestPrivacy) {
	v.value = val
	v.isSet = true
}

func (v NullableEditVideoRequestPrivacy) IsSet() bool {
	return v.isSet
}

func (v *NullableEditVideoRequestPrivacy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditVideoRequestPrivacy(val *EditVideoRequestPrivacy) *NullableEditVideoRequestPrivacy {
	return &NullableEditVideoRequestPrivacy{value: val, isSet: true}
}

func (v NullableEditVideoRequestPrivacy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditVideoRequestPrivacy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


