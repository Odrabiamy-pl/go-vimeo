/*
Vimeo API

Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

API version: 3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vimeoapi

import (
	"encoding/json"
)

// checks if the PurchaseInteraction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PurchaseInteraction{}

// PurchaseInteraction struct for PurchaseInteraction
type PurchaseInteraction struct {
	// Information on purchasing the On Demand video.
	Buy map[string]interface{} `json:"buy,omitempty"`
	// Information on renting the On Demand video.
	Rent map[string]interface{} `json:"rent,omitempty"`
	Subscribe NullablePurchaseInteractionSubscribe `json:"subscribe,omitempty"`
}

// NewPurchaseInteraction instantiates a new PurchaseInteraction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPurchaseInteraction() *PurchaseInteraction {
	this := PurchaseInteraction{}
	return &this
}

// NewPurchaseInteractionWithDefaults instantiates a new PurchaseInteraction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPurchaseInteractionWithDefaults() *PurchaseInteraction {
	this := PurchaseInteraction{}
	return &this
}

// GetBuy returns the Buy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PurchaseInteraction) GetBuy() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Buy
}

// GetBuyOk returns a tuple with the Buy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PurchaseInteraction) GetBuyOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Buy) {
		return map[string]interface{}{}, false
	}
	return o.Buy, true
}

// HasBuy returns a boolean if a field has been set.
func (o *PurchaseInteraction) HasBuy() bool {
	if o != nil && IsNil(o.Buy) {
		return true
	}

	return false
}

// SetBuy gets a reference to the given map[string]interface{} and assigns it to the Buy field.
func (o *PurchaseInteraction) SetBuy(v map[string]interface{}) {
	o.Buy = v
}

// GetRent returns the Rent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PurchaseInteraction) GetRent() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Rent
}

// GetRentOk returns a tuple with the Rent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PurchaseInteraction) GetRentOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Rent) {
		return map[string]interface{}{}, false
	}
	return o.Rent, true
}

// HasRent returns a boolean if a field has been set.
func (o *PurchaseInteraction) HasRent() bool {
	if o != nil && IsNil(o.Rent) {
		return true
	}

	return false
}

// SetRent gets a reference to the given map[string]interface{} and assigns it to the Rent field.
func (o *PurchaseInteraction) SetRent(v map[string]interface{}) {
	o.Rent = v
}

// GetSubscribe returns the Subscribe field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PurchaseInteraction) GetSubscribe() PurchaseInteractionSubscribe {
	if o == nil || IsNil(o.Subscribe.Get()) {
		var ret PurchaseInteractionSubscribe
		return ret
	}
	return *o.Subscribe.Get()
}

// GetSubscribeOk returns a tuple with the Subscribe field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PurchaseInteraction) GetSubscribeOk() (*PurchaseInteractionSubscribe, bool) {
	if o == nil {
		return nil, false
	}
	return o.Subscribe.Get(), o.Subscribe.IsSet()
}

// HasSubscribe returns a boolean if a field has been set.
func (o *PurchaseInteraction) HasSubscribe() bool {
	if o != nil && o.Subscribe.IsSet() {
		return true
	}

	return false
}

// SetSubscribe gets a reference to the given NullablePurchaseInteractionSubscribe and assigns it to the Subscribe field.
func (o *PurchaseInteraction) SetSubscribe(v PurchaseInteractionSubscribe) {
	o.Subscribe.Set(&v)
}
// SetSubscribeNil sets the value for Subscribe to be an explicit nil
func (o *PurchaseInteraction) SetSubscribeNil() {
	o.Subscribe.Set(nil)
}

// UnsetSubscribe ensures that no value is present for Subscribe, not even an explicit nil
func (o *PurchaseInteraction) UnsetSubscribe() {
	o.Subscribe.Unset()
}

func (o PurchaseInteraction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PurchaseInteraction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Buy != nil {
		toSerialize["buy"] = o.Buy
	}
	if o.Rent != nil {
		toSerialize["rent"] = o.Rent
	}
	if o.Subscribe.IsSet() {
		toSerialize["subscribe"] = o.Subscribe.Get()
	}
	return toSerialize, nil
}

type NullablePurchaseInteraction struct {
	value *PurchaseInteraction
	isSet bool
}

func (v NullablePurchaseInteraction) Get() *PurchaseInteraction {
	return v.value
}

func (v *NullablePurchaseInteraction) Set(val *PurchaseInteraction) {
	v.value = val
	v.isSet = true
}

func (v NullablePurchaseInteraction) IsSet() bool {
	return v.isSet
}

func (v *NullablePurchaseInteraction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePurchaseInteraction(val *PurchaseInteraction) *NullablePurchaseInteraction {
	return &NullablePurchaseInteraction{value: val, isSet: true}
}

func (v NullablePurchaseInteraction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePurchaseInteraction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


